<?xml version='1.0' encoding='UTF-8'?>
<chapter version="5.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
  xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xl="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:svg="http://www.w3.org/2000/svg" xmlns:mth="http://www.w3.org/1998/Math/MathML"
  xmlns:db="http://docbook.org/ns/docbook"
  xml:id="webapi">
  <title>Web API</title>
  <para>The Web API is a component which makes it possible for external systems to access and
    manipulate data stored in an instance of DHIS2. More precisely, it provides a programmatic
    interface to a wide range of exposed data and service methods for applications such as
    third-party software clients, web portals and internal DHIS2 modules.</para>
  <section xml:id="webapi_introduction">
    <title>Introduction</title>
    <para>The Web API adheres to many of the principles behind the REST architectural style. To
      mention some few and important ones:</para>
    <orderedlist>
      <listitem>
        <para>The fundamental building blocks are referred to as <emphasis role="italic"
            >resources</emphasis>. A resource can be anything exposed to the Web, from a document to
          a business process - anything a client might want to interact with. The information
          aspects of a resource can be retrieved or exchanged through resource <emphasis
            role="italic">representations</emphasis>. A representation is a view of a
          resource&apos;s state at any given time. For instance, the <emphasis role="italic"
            >reportTable</emphasis> resource in DHIS2 represents a tabular report of aggregated data
          for a certain set of parameters. This resource can be retrieved in a variety of
          representation formats including HTML, PDF, and MS Excel.</para>
      </listitem>
      <listitem>
        <para>All resources can be uniquely identified by a <emphasis role="italic">URI</emphasis>
          (also referred to as <emphasis role="italic">URL</emphasis>). All resources have a default
          representation. You can indicate that you are interested in a specific representation by
          supplying an <emphasis role="italic">Accept</emphasis> HTTP header, a file extension or a
            <emphasis role="italic">format</emphasis> query parameter. So in order to retrieve the
          PDF representation of a report table you can supply a <emphasis role="italic">Accept:
            application/pdf</emphasis> header or append <emphasis role="italic">.pdf</emphasis> or
            <emphasis role="italic">?format=pdf</emphasis> to your request URL.</para>
      </listitem>
      <listitem>
        <para>Interactions with the API requires correct use of HTTP <emphasis role="italic"
            >methods</emphasis> or <emphasis role="italic">verbs</emphasis>. This implies that for a
          resource you must issue a <emphasis role="italic">GET</emphasis> request when you want to
          retrieve it, <emphasis role="italic">POST</emphasis> request when you want to create one,
            <emphasis role="italic">PUT</emphasis> when you want to update it and <emphasis
            role="italic">DELETE</emphasis> when you want to remove it. So if you want to retrieve
          the default representation of a report table you can send a GET request to e.g. <emphasis
            role="italic">/reportTable/iu8j/hYgF6t</emphasis>, where the last part is the report
          table identifier.</para>
      </listitem>
      <listitem>
        <para>Resource representations are <emphasis role="italic">linkable</emphasis>, meaning that
          representations advertise other resources which are relevant to the current one by
          embedding links into itself (please be aware that you need to request <emphasis
            role="italic">href</emphasis> in your field filter to have this working. This feature
          greatly improves the usability and robustness of the API as we will see later. For
          instance, you can easily navigate to the indicators which are associated with a report
          table from the <emphasis role="italic">reportTable</emphasis> resource through the
          embedded links using your preferred representation format.</para>
      </listitem>
    </orderedlist>
    <para>While all of this might sound complicated, the Web API is actually very simple to use. We
      will proceed with a few practical examples in a minute.</para>
  </section>
  <section xml:id="webapi_authentication">
    <title>Authentication</title>
    <para>The DHIS2 Web API supports two protocols for authentication, Basic Authentication and
      OAuth 2. You can verify and get information about the currently authenticated user by making a
      GET request to the following URL:</para>
    <screen>/api/26/me</screen>
    <para>And more information about authorities (and if a user have a certain authority) by using
      the endpoints:<screen>/api/26/me/authorities
/api/26/me/authorities/ALL</screen></para>
    <section xml:id="webapi_basic_authentication">
      <title>Basic Authentication</title>
      <para>The DHIS2 Web API supports <emphasis role="italic">Basic authentication</emphasis>.
        Basic authentication is a technique for clients to send login credentials over HTTP to a web
        server. Technically speaking, the username is appended with a colon and the password,
        Base64-encoded, prefixed Basic and supplied as the value of the <emphasis role="italic"
          >Authorization</emphasis> HTTP header. More formally that is<code> Authorization: Basic
          base64encode(username:password)</code> Most network-aware development frameworks provides
        support for authentication using Basic, such as Apache HttpClient, Spring RestTemplate and
        C# WebClient. An important note is that this authentication scheme provides no security
        since the username and password is sent in plain text and can be easily decoded. Using it is
        recommended only if the server is using SSL/TLS (HTTPS) to encrypt communication between
        itself and the client. Consider it a hard requirement to provide secure interactions with
        the Web API.</para>
    </section>
    <section xml:id="webapi_oauth2">
      <title>OAuth2</title>
      <para>DHIS2 supports the OAuth2 authentication protocol. OAuth2 is an open standard for
        authorization which it allows third-party clients to connect on behalf of a DHIS2 user and
        get a reusable bearer token for subsequent requests to the Web API. DHIS 2 does not support
        fine-grained OAuth2 roles but rather provides applications access based on user roles of the
        DHIS2 user.</para>
      <para>Each client for which you want to allow OAuth 2 authentication must be registered in
        DHIS2. To add a new OAuth2 client go to <emphasis role="italic">Apps > Settings > OAuth2
          Clients</emphasis>, click add new and enter the desired client name and the grant
        types.</para>
      <section>
        <title>Adding a client using the Web API</title>
        <para>An OAuth2 client can be added through the Web API. As an example we can send a payload
          like
          this:<screen>{
   &quot;name&quot; : &quot;OAuth2 Demo Client&quot;,
   &quot;cid&quot; : &quot;demo&quot;,
   &quot;secret&quot; : &quot;1e6db50c-0fee-11e5-98d0-3c15c2c6caf6&quot;,
   &quot;grantTypes&quot; : [
      &quot;password&quot;,
      &quot;refresh_token&quot;,
      &quot;authorization_code&quot;
   ],
   &quot;redirectUris&quot; : [
      &quot;http://www.example.org&quot;
   ]
}</screen></para>
        <screen>SERVER=&quot;https://play.dhis2.org/dev&quot;
curl -X POST -H &quot;Content-Type: application/json&quot; -d @client.json 
  -u admin:district $SERVER/api/oAuth2Clients</screen>
        <para>We will use this client as the basis for our next grant type examples.</para>
      </section>
      <section>
        <title>Grant type password</title>
        <para>The simplest of all grant types is the <emphasis role="bold">password</emphasis> grant
          type. This grant type is similar to basic authenticaion in the sense that it requires the
          client to collect the users username and password. As an example we can use our demo
          server:</para>
        <para>
          <screen>SERVER=&quot;https://play.dhis2.org/dev&quot;
SECRET=&quot;1e6db50c-0fee-11e5-98d0-3c15c2c6caf6&quot;

curl -X POST -H &quot;Accept: application/json&quot; -u demo:$SECRET $SERVER/uaa/oauth/token
-d grant_type=password -d username=admin -d password=district</screen>
        </para>
        <para>This will give you a response similar to
          this:<screen>{
   &quot;expires_in&quot; : 43175,
   &quot;scope&quot; : &quot;ALL&quot;,
   &quot;access_token&quot; : &quot;07fc551c-806c-41a4-9a8c-10658bd15435&quot;,
   &quot;refresh_token&quot; : &quot;a4e4de45-4743-481d-9345-2cfe34732fcc&quot;,
   &quot;token_type&quot; : &quot;bearer&quot;
}</screen></para>
        <para>For now, we will concentrate on the <emphasis role="bold">access_token</emphasis>,
          which is what we will use as our authentication (bearer) token. As an example we will get
          all data elements using our
          token:<screen>SERVER=&quot;https://play.dhis2.org/dev&quot;
curl -H &quot;Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435&quot; $SERVER/api/26/dataElements.json</screen></para>
      </section>
      <section>
        <title>Grant type refresh_token</title>
        <para>In general the access tokens have limited validity. You can have a look at the
            <emphasis role="bold">expires_in</emphasis> property of the response in the previous
          example to understand when a token expires. To get a fresh <emphasis role="bold"
            >access_token</emphasis> you can make another roundtrip to the server and use <emphasis
            role="bold">refresh_token</emphasis> which allows you to get an updated token without
          needing to ask for the user credentials one more
          time.<screen>SERVER=&quot;https://play.dhis2.org/dev&quot;
SECRET=&quot;1e6db50c-0fee-11e5-98d0-3c15c2c6caf6&quot;
REFRESH_TOKEN=&quot;a4e4de45-4743-481d-9345-2cfe34732fcc&quot;

curl -X POST -H &quot;Accept: application/json&quot; -u demo:$SECRET $SERVER/uaa/oauth/token
-d grant_type=refresh_token -d refresh_token=$REFRESH_TOKEN</screen></para>
        <para>The response will be exactly the same as when you get an token to start with.</para>
      </section>
      <section>
        <title>Grant type authorization_code</title>
        <para>Authorized code grant type is the recommended approach if you don&apos;t want to store
          the user credentials externally. It allows DHIS2 to collect the username/password
          directly from the user instead of the client collecting them and then authenticating on
          behalf of the user. Please be aware that this approach uses the <emphasis role="bold"
            >redirect_uris</emphasis> part of the client payload.</para>
        <para>Step 1: Using a browser visit this URL (if you have more than one redirect URIs, you
          might want to add &amp;redirect_uri=http://www.example.org)
          :<screen>SERVER=&quot;https://play.dhis2.org/dev&quot;

$SERVER/uaa/oauth/authorize?client_xml:id=demo&amp;response_type=code</screen></para>
        <para>Step 2: After the user have successfully logged in and accepted your client access, it
          will redirect back to your redirect uri like
          this:<screen>http://www.example.org/?code=XYZ</screen></para>
        <para>Step 3: This step is similar to what we did in the password grant type, using the
          given code, we will now ask for a access
          token:<screen>SERVER=&quot;https://play.dhis2.org/dev&quot;
SECRET=&quot;1e6db50c-0fee-11e5-98d0-3c15c2c6caf6&quot;

curl -X POST -u demo:$SECRET -H &quot;Accept: application/json&quot; $SERVER/token 
  -d grant_type=authorization_code -d code=XYZ</screen></para>
      </section>
    </section>
  </section>
  <section xml:id="webapi_error_info_messages">
    <title>Error and info messages</title>
    <para>The Web API uses a consistent format for all error/warning and informational
      messages:<screen>{
   &quot;httpStatus&quot; : &quot;Forbidden&quot;,
   &quot;message&quot; : &quot;You don&apos;t have the proper permissions to read objects of this type.&quot;,
   &quot;httpStatusCode&quot; : 403,
   &quot;status&quot; : &quot;ERROR&quot;
}</screen></para>
    <para>Here we can see from the message that the user tried to access a resource I did not have
      access to. It uses the http status code 403, the http status message <emphasis role="bold"
        >forbidden</emphasis> and a descriptive message.<table frame="all">
        <title>WebMessage properties</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c3" colwidth="6.31*"/>
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>httpStatus</entry>
              <entry>HTTP Status message for this response, see RFC 2616 (Section 10) for more
                information.</entry>
            </row>
            <row>
              <entry>httpStatusCode</entry>
              <entry>HTTP Status code for this response, see RFC 2616 (Section 10) for more
                information.</entry>
            </row>
            <row>
              <entry>status</entry>
              <entry>DHIS2 status, possible values are <emphasis role="italic">OK</emphasis>
                  |&#160;<emphasis role="italic">WARNING</emphasis> |&#160;<emphasis role="italic"
                  >ERROR</emphasis>, where <emphasis role="bold">OK</emphasis> is means everything
                was successful, <emphasis role="bold">ERROR</emphasis> means that operation did not
                complete and <emphasis role="bold">WARNING</emphasis> means operation was partially
                successful, if there message contains a <emphasis role="bold">response</emphasis>
                property, please look there for more information.</entry>
            </row>
            <row>
              <entry>message</entry>
              <entry>A user friendly message telling whether the operation was a success or
                not.</entry>
            </row>
            <row>
              <entry>devMessage</entry>
              <entry>A more techincal developer friendly message (not currently in use).</entry>
            </row>
            <row>
              <entry>response</entry>
              <entry>Extension point for future extension to the WebMessage format. This will be
                documented when it starts being used.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
  </section>
  <section xml:id="webapi_date_perid_format">
    <title>Date and period format</title>
    <para>Throughout the Web API we refer to dates and periods. The date format is:</para>
    <screen>yyyy-MM-dd</screen>
    <para>For instance, if you want to express March 20, 2014 you must use <emphasis role="italic"
        >2014-03-20</emphasis>.</para>
    <para>The period format is described in the following table. </para>
    <table>
      <title>Period format</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="c1" colwidth="60pt"/>
        <colspec colnum="2" colname="c2" colwidth="80pt"/>
        <colspec colnum="3" colname="c3" colwidth="80pt"/>
        <colspec colnum="4" colname="c4" colwidth="200pt"/>
        <thead>
          <row>
            <entry> Interval </entry>
            <entry> Format </entry>
            <entry> Example </entry>
            <entry> Description </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Day</entry>
            <entry>
              <emphasis>yyyyMMdd</emphasis>
            </entry>
            <entry>20040315</entry>
            <entry>March 15 2004</entry>
          </row>
          <row>
            <entry>Week</entry>
            <entry><emphasis>yyyy</emphasis>W<emphasis>n</emphasis></entry>
            <entry>2004W10</entry>
            <entry>Week 10 2004</entry>
          </row>
          <row>
            <entry>Month</entry>
            <entry>
              <emphasis>yyyyMM</emphasis>
            </entry>
            <entry>200403</entry>
            <entry>March 2004</entry>
          </row>
          <row>
            <entry>Quarter</entry>
            <entry><emphasis>yyyy</emphasis>Q<emphasis>n</emphasis></entry>
            <entry>2004Q1</entry>
            <entry>January-March 2004</entry>
          </row>
          <row>
            <entry>Six-month</entry>
            <entry><emphasis>yyyy</emphasis>S<emphasis>n</emphasis></entry>
            <entry>2004S1</entry>
            <entry>January-June 2004</entry>
          </row>
          <row>
            <entry>Six-month April</entry>
            <entry><emphasis>yyyy</emphasis>AprilSn</entry>
            <entry>2004AprilS1</entry>
            <entry>April-September 2004</entry>
          </row>
          <row>
            <entry>Year</entry>
            <entry>yyyy</entry>
            <entry>2004</entry>
            <entry>2004</entry>
          </row>
          <row>
            <entry>Financial Year April</entry>
            <entry>yyyyApril</entry>
            <entry>2004April</entry>
            <entry>Apr 2004-Mar 2005</entry>
          </row>
          <row>
            <entry>Financial Year July</entry>
            <entry>yyyyJuly</entry>
            <entry>2004July</entry>
            <entry>July 2004-June 2005</entry>
          </row>
          <row>
            <entry>Financial Year Oct</entry>
            <entry>yyyyOct</entry>
            <entry>2004Oct</entry>
            <entry>Oct 2004-Sep 2005</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>In some parts of the API, like for the analytics resource, you can utilize relative
      periods in addition to fixed periods (defined above). The relative periods are relative to the
      current date, and allows e.g. for creating dynamic reports. The available relative period
      values are:</para>
    <screen>THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,
THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,
THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_12_MONTHS,
LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS</screen>
  </section>
  <section xml:id="webapi_identifier_schemes">
    <title>Identifier schemes</title>
    <para>Throughout the Web API we refer to different kinds of id schemes, this section will give a
      explanation to how they can be used. Please note that not all schemes works for all web-api
      calls, and not not all schemes can be used for both input and output (this is outlined in the
      sections explaining the web-apis themself). Setting the <emphasis role="italic"
        >idScheme</emphasis> allows you to override the default for <emphasis role="italic"
        >all</emphasis> schemes, but if other schemes are declared like <emphasis role="italic"
        >dataElementIdScheme</emphasis> this this will be used instead.</para>
    <para>The full range of scheme parameters available
      are:<screen>idScheme, dataElementIdScheme, categoryOptionComboIdScheme, orgUnitIdScheme,
programIdScheme, programStageIdScheme, trackedEntityIdScheme, trackedEntityAttributeIdScheme</screen></para>
    <para>The default scheme for all parameters are what we call the <emphasis role="italic">stable
        identifiers</emphasis> i.e. UIDs, but we also have different schemes depending on how you
      want object matching to behave.<table frame="all">
        <title>Scheme Values</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="6.14*"/>
          <thead>
            <row>
              <entry>Scheme</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ID, UID</entry>
              <entry>Match on DHIS2 stable Identifier, this is the default id scheme.</entry>
            </row>
            <row>
              <entry>CODE</entry>
              <entry>Match on DHIS2 Code, mainly used to exchange data with an external
                system.</entry>
            </row>
            <row>
              <entry>NAME</entry>
              <entry>Match on DHIS2 Name, please not that this uses what is available as <emphasis
                  role="italic">object.name</emphasis>, and not the translated name. Also not that
                names are not always unique, and in that case they can not be used.</entry>
            </row>
            <row>
              <entry>ATTRIBUTE:ID</entry>
              <entry>Match on metadata attribute, this attribute needs to be assigned to the type
                you are matching on, and also that the unique property is set to <emphasis
                  role="italic">true</emphasis>. The main usage of this is also to exchange data
                with external systems, it has some advantages over <emphasis role="italic"
                  >CODE</emphasis> since multiple attributes can be added, so it can be used to
                synchronize with more than one system.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>
  <section xml:id="webapi_browsing_the_web_api">
    <title>Browsing the Web API</title>
    <para>The entry point for browsing the Web API is <emphasis role="italic">/api/</emphasis>. This
      resource provide links to all available resources. Four resource representation formats are
      consistently available for all resources: HTML, XML, JSON and JSONP. Some resources will have
      other formats available, like MS Excel, PDF, CSV and PNG. To explore the API from a web
      browser, navigate to the <emphasis role="italic">/api/</emphasis> entry point and follow the
      links to your desired resource, for instance <emphasis role="italic"
        >/api/dataElements</emphasis>. For all resources which return a list of elements certain
      query parameters can be used to modify the response:</para>
      <table frame="all">
        <title>Query parameters</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.77*"/>
          <colspec colnum="3" colname="c3" colwidth="1.08*"/>
          <colspec colnum="4" colname="c4" colwidth="4.61*"/>
          <thead>
            <row>
              <entry>Param</entry>
              <entry>Option values</entry>
              <entry>Default option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>paging</entry>
              <entry>true | false</entry>
              <entry>true</entry>
              <entry>Indicates whether to return lists of elements in pages.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>number</entry>
              <entry>1</entry>
              <entry>Defines which page number to return.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>number</entry>
              <entry>50</entry>
              <entry>Defines the number of elements to return for each page.</entry>
            </row>
            <row>
              <entry>order</entry>
              <entry>property:asc/iasc/desc/idesc</entry>
              <entry/>
              <entry>Order the output using a specified order, only properties that are both
                persisted and simple (no collections, idObjects etc) are supported. iasc and idesc
                are case insensitive sorting.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    <para>An example of how these parameters can be used to get a full list of data element groups
      in XML response format is:</para>
    <screen>/api/26/dataElementGroups.xml?links=false&amp;paging=false</screen>
    <para>You can query for elements on the name property instead of returning full list of elements
      using the <emphasis role="italic">query</emphasis> query variable. In this example we query
      for all data elements with the word &quot;anaemia&quot; in the name:</para>
    <screen>/api/26/dataElements?query=anaemia</screen>
    <para>You can get specific pages and page sizes of objects like this:</para>
    <screen>/api/26/dataElements.json?page=2&amp;pageSize=20</screen>
    <para>You can completely disable paging like this:</para>
    <screen>/api/26/indicatorGroups.json?paging=false</screen>
    <para>To order the result based on a specific property:</para>
    <screen>/api/26/indicators.json?order=shortName:desc</screen>
    <para>You can find an object based on its ID across all object types through the <emphasis
        role="italic">identifiableObjects</emphasis> resource:</para>
    <screen>/api/26/identifiableObjects/&lt;id&gt;</screen>
    <section xml:id="webapi_translation">
      <title>Translation</title>
      <para>DHIS2 supports translations of database content, such as data elements, indicators and
        programs. All metadata objects in the Web API have properties meant to be used for display /
        UI purposes, which includes <emphasis>displayName</emphasis>,
          <emphasis>displayShortName</emphasis> and <emphasis>displayDescription</emphasis>.<table
          frame="all">
          <title>Translate options</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1.28*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="3.82*"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Values</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>translate</entry>
                <entry>true | false</entry>
                <entry>Translate display* properties in metadata output (displayName,
                  displayShortName, displayDescription, and displayFormName for data elements).
                  Default value is true.</entry>
              </row>
              <row>
                <entry>locale</entry>
                <entry>Locale to use</entry>
                <entry>Translate metadata output using a specified locale (requires
                  translate=true).</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </section>
    <section xml:id="webapi_translation_api">
      <title>Translation API</title>
      <para>The translations for an object is rendered as part of the object itself in the
          <emphasis>translations</emphasis> array. Note that the <emphasis role="italic"
          >translations</emphasis> array in the JSON/XML payloads are normally pre-filtered for you,
        which means they can not directly be used to import/export translations (as that would
        normally overwrite locales other than current users).</para>
      <para><emphasis role="italic">Example of data element with translation array filtered on user
          locale:</emphasis><screen>{
  "id": "FTRrcoaog83",
  "displayName": "Accute French",
  "translations": [
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    }
  ]
}</screen></para>
      <para><emphasis role="italic">Example of data element with translations turned
        off:</emphasis><screen>{
  "id": "FTRrcoaog83",
  "displayName": "Accute Flaccid Paralysis (Deaths &lt; 5 yrs)",
  "translations": [
    {
      "property": "FORM_NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "SHORT_NAME",
      "locale": "en_GB",
      "value": "Accute Flaccid Paral"
    },
    {
      "property": "SHORT_NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Accute French"
    },
    {
      "property": "NAME",
      "locale": "en_FK",
      "value": "aa"
    },
    {
      "property": "DESCRIPTION",
      "locale": "en_FK",
      "value": "aa"
    }
  ]
}</screen></para>
      <para>Note that even if you get the unfiltered result, and are using the appropriate type
        endpoint i..e <emphasis role="italic">/api/26/dataElements</emphasis> we do not allow
        updates, as it would be too easy to make mistakes and overwrite the other available
        locales.</para>
      <para>To read and update translations you can use the special translations endpoint for each
        object resource. These can be accessed by <emphasis role="bold">GET</emphasis> or <emphasis
          role="bold">PUT</emphasis> on the appropriate <emphasis role="italic"
          >/api/26/&lt;object-type>/&lt;object-id>/translations</emphasis> endpoint. As an example,
        for a data element with identifier <emphasis role="italic">FTRrcoaog83</emphasis> you could
        use <emphasis role="italic">/api/26/dataElements/FTRrcoaog83/translations</emphasis> to get
        and update translations. The fields available are <emphasis role="italic"
          >property</emphasis> with options <emphasis role="bold">NAME</emphasis>, <emphasis
          role="bold">SHORT_NAME</emphasis>, <emphasis role="bold">DESCRIPTION</emphasis>, the
          <emphasis role="italic">locale</emphasis> which supports any valid locale ID and the the
          <emphasis role="italic">value</emphasis> itself.</para>
      <para><emphasis role="italic">Example of NAME property for french
        locale:</emphasis><screen>{
  "property": "NAME",
  "locale": "fr",
  "value": "Paralysie Flasque Aiguë (Décès &lt;5 ans)"
}</screen></para>
      <para>This payload would then be added to a translation array, and sent back to the
        appropriate
        endpoint:<screen>{
  "translations": [
    {
      "property": "NAME",
      "locale": "fr",
      "value": "Paralysie Flasque Aiguë (Décès &lt;5 ans)"
    }
  ]
}</screen></para>
      <para>For a an data element with ID <emphasis role="italic">FTRrcoaog83</emphasis> you can
          <emphasis role="bold">PUT</emphasis> this to <emphasis role="italic"
          >/api/26/dataElements/FTRrcoaog83/translations</emphasis>. Make sure to send all
        translations for the specific object and not just for a single locale (if not you will
        potentially overwrite existing locales for other locales).</para>
    </section>
    <section xml:id="webapi_api_versions">
      <title>Web API versions</title>
      <para>The Web API is fully versioned starting from DHIS 2.25. The API versioning follows the
        DHIS 2 major version numbering. As an example, the API version for DHIS 2.25 is
          <emphasis>25</emphasis>.</para>
      <para>You can access a specific API version by including the version number after the
          <emphasis>/api</emphasis> component, as an example like
        this:<screen>/api/26/dataElements</screen></para>
      <para>If you omit the version part of the URL, the system will use the current API version. As
        an example, for DHIS 2.25, when omitting the API part, the system will use API version 25.
        When developing API clients it is recommended to use explicit API versions (rather than
        omitting the API version), as this will protect the client from unforeseen API
        changes.</para>
      <para>The last three API versions will be supported. As an example, DHIS version 2.27 will
        support API version 27, 26 and 25.</para>
    </section>
  </section>
  <section xml:id="webapi_working_with_metadata_api">
    <title>Working with the metadata API</title>
    <para>The metadata resource can be accessed at <emphasis role="italic">/api/metadata</emphasis>.
      This resource lets you read and write the full set of metadata. This section will give a basic
      introduction to working with this API. For specific synchronization issues, please see the
      integration chapter.</para>
    <para>By default, interacting with<emphasis role="italic"> /api/metadata</emphasis> using the
      GET HTTP method will give you all metadata rendered as XML. You can also be more specific
      about the metadata elements you are interested in.</para>
    <section xml:id="webapi_content_types">
      <title>Content types</title>
      <para>The Web API offers several content types for metadata.</para>
      <para>
        <table>
          <title>Available Content-Types</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="2.7*"/>
            <thead>
              <row>
                <entry> Content-Type </entry>
                <entry>URL extension</entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>application/xml</entry>
                <entry>.xml</entry>
                <entry>Returns the metadata in XML representation</entry>
              </row>
              <row>
                <entry>application/json</entry>
                <entry>.json</entry>
                <entry>Returns the metadata in JSON representation</entry>
              </row>
              <row>
                <entry>application/pdf</entry>
                <entry>.pdf</entry>
                <entry>Returns the metadata as a PDF document</entry>
              </row>
              <row>
                <entry>application/csv</entry>
                <entry>.csv</entry>
                <entry>Returns the metadata as a CSV file</entry>
              </row>
              <row>
                <entry>application/vnd.ms-excel</entry>
                <entry>.xls | .xlsx</entry>
                <entry>Returns the metadata as an Excel workbook</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section xml:id="webapi_query_parameters">
      <title>Query parameters</title>
      <para>The following query parameters are available for customizing your request.</para>
      <para>
        <table>
          <title>Available Query Filters</title>
          <tgroup cols="5">
            <thead>
              <row>
                <entry> Param </entry>
                <entry> Type </entry>
                <entry> Required </entry>
                <entry> Options (default first) </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>assumeTrue</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>true | false</entry>
                <entry>Indicates whether to get all resources or no resources by default.</entry>
              </row>
              <row>
                <entry>viewClass</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>export | basic | detailed</entry>
                <entry>Alternative views of the metadata. Please note that only metadata exported
                  with viewClass=export or detailed can be used for import.</entry>
              </row>
              <row>
                <entry>dryRun</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>false | true</entry>
                <entry>If you set this to true, the actual import will not happen. Instead the
                  system will generate a summary of what would have been done.</entry>
              </row>
              <row>
                <entry>{resources}</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>true | false (default depends on assumeTrue)</entry>
                <entry>See <emphasis role="italic">/api</emphasis> for available resources.
                  Indicates which resources to include in the response.</entry>
              </row>
              <row>
                <entry>lastUpdated</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Several formats are available: yyyy, yyyy-MM, yyyy-MM-dd, yyyyMM,
                  yyyyMMdd</entry>
                <entry>Filters the metadata based on the lastUpdated field.</entry>
              </row>
              <row>
                <entry>preheatCache</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>true | false</entry>
                <entry>Turn cache-map preheating on/off. This is on by default, turning this off
                  will make initial load time for importer much shorter (but will make the import
                  itself slower). This is mostly used for cases where you have a small XML/JSON file
                  you want to import, and don&apos;t want to wait for cache-map preheating.</entry>
              </row>
              <row>
                <entry>strategy</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>CREATE_AND_UPDATE | CREATE | UPDATE | DELETE</entry>
                <entry>Import strategy to use, see below for more information.</entry>
              </row>
              <row>
                <entry>sharing</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>false |&#160;true</entry>
                <entry>Should sharing be supported or not. The default is false, which is the old
                  behavior. You can set this to true to allow updating user, publicAccess and
                  userGroupAccesses fields (if not they are cleared out on create, and not touched
                  on update).</entry>
              </row>
              <row>
                <entry>mergeMode</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>REPLACE, MERGE</entry>
                <entry>Strategy for merging of objects when doing updates. REPLACE will just
                  overwrite the propery with the new value provided, MERGE will only set the
                  property if its not null (only if the property was provided).</entry>
              </row>
              <row>
                <entry>async</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>false |&#160;true</entry>
                <entry>Indicates wether the import should be done async or not, the default is false
                  which means the client will wait until the import is done, this is probably what
                  you want for small imports (as you will get the import summary directly back to
                  you). For large imports, the client might time out, so async=true is recommended,
                  and the client connection will be dropped when the payload is uploaded.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section xml:id="webapi_import_strategies">
      <title>Available strategies for import</title>
      <para>When importing data using the metadata resource you can define various strategies for
        import.</para>
      <para>
        <table>
          <title>Available Strategies</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry> Type </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>CREATE_AND_UPDATE</entry>
                <entry>Allows creation and updating of objects.</entry>
              </row>
              <row>
                <entry>CREATE</entry>
                <entry>Allows creation of objects only.</entry>
              </row>
              <row>
                <entry>UPDATE</entry>
                <entry>Allows update of objects only.</entry>
              </row>
              <row>
                <entry>DELETE</entry>
                <entry>Allows deletes of objects only.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section xml:id="webapi_metadata_import_examples">
      <title>Metadata import examples</title>
      <para>
        <emphasis role="bold">Example: Get a filtered set of metadata that was updated since August
          1, 2014</emphasis>
      </para>
      <para>As described in the last section, there is a number of options you can apply to
          <emphasis role="italic">/api/metadata</emphasis> to give you a filtered view. The use-case
        we will be looking into here is where you want a nightly job that synchronizes organisation
        units. We will be using <emphasis role="italic">cURL</emphasis> as the HTTP
        client.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district
  &quot;https://play.dhis2.org/demo/api/metadata?assumeTrue=false&amp;organisationUnits=true&amp;lastUpdated=2014-08-01&quot;</screen></para>
      <para><emphasis role="bold">Example: Get metadata that was updated since February
          2014</emphasis></para>
      <para>This example will just the default <emphasis role="italic">assumeTrue</emphasis>
        setting, along with getting the last updates from February 2014. This means that every
        single type that has been updated will be
        retrieved.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district 
  &quot;https://play.dhis2.org/demo/api/metadata?lastUpdated=2014-02&quot;</screen></para>
      <para><emphasis role="bold">Example: Create metadata</emphasis></para>
      <para>The metadata resource can also be used to create or update metadata by using the POST
        HTTP method. The metadata content can be both XML and JSON, using
        &quot;application/xml&quot; and &quot;application/json&quot; content type respectively. The
        request payload content will be accepted in several formats, including plain text, zipped
        and gzipped. POSTing a metadata payload can be done for example like this, where
        metadata.xml is a file in the same directory with the metadata content:</para>
      <screen>curl -H &quot;Content-Type: application/xml&quot; -u admin:district -d @metadata.xml 
  &quot;https://play.dhis2.org/demo/api/metadata&quot; -X POST -v</screen>
      <para>The import will happen in a asyncronous process which implies that the response will
        return as soon as the process is started. The response status code to be expected is 204 No
        Content.</para>
    </section>
  </section>
  <section xml:id="webapi_metadata_object_filter">
    <title>Metadata object filter</title>
    <para>To filter the metadata there are several filter operations that can be applied to the
      returned list of metadata. The format of the filter itself is straight-forward and follows the
      pattern <emphasis role="italic">property:operator:value</emphasis>, where <emphasis
        role="italic">property</emphasis> is the property on the metadata you want to filter on,
        <emphasis role="italic">operator</emphasis> is the comparison operator you want to perform
      and <emphasis role="italic">value</emphasis> is the value to check against (not all operators
      require value). Please see the <emphasis role="italic">schema</emphasis> section to discover
      which properties are available. Recursive filtering, ie. filtering on associated objects or
      collection of objects, are supported as well.<table>
        <title>Available Operators</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Types</entry>
              <entry>Value required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>eq</entry>
              <entry> string | boolean | integer | float | enum |&#160;collection (checks for size)
                | date </entry>
              <entry>true</entry>
              <entry>Equality</entry>
            </row>
            <row>
              <entry>!eq</entry>
              <entry> string | boolean | integer | float | enum |&#160;collection (checks for size)
                | date </entry>
              <entry>true</entry>
              <entry>Inequality</entry>
            </row>
            <row>
              <entry>ne</entry>
              <entry> string | boolean | integer | float | enum |&#160;collection (checks for size)
                | date </entry>
              <entry>true</entry>
              <entry>Inequality</entry>
            </row>
            <row>
              <entry>like</entry>
              <entry> string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, match anywhere</entry>
            </row>
            <row>
              <entry>!like</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, not match anywhere</entry>
            </row>
            <row>
              <entry>^like</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, match start</entry>
            </row>
            <row>
              <entry>!^like</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, not match start</entry>
            </row>
            <row>
              <entry>$like</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, match end</entry>
            </row>
            <row>
              <entry>!$like</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case sensitive string, not match end</entry>
            </row>
            <row>
              <entry>ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, match anywhere</entry>
            </row>
            <row>
              <entry>!ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, not match anywhere</entry>
            </row>
            <row>
              <entry>^ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, match start</entry>
            </row>
            <row>
              <entry>!^ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, not match start</entry>
            </row>
            <row>
              <entry>$ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, match end</entry>
            </row>
            <row>
              <entry>!$ilike</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry>Case insensitive string, not match end</entry>
            </row>
            <row>
              <entry>gt</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>ge</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Greater than or equal</entry>
            </row>
            <row>
              <entry>lt</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>le</entry>
              <entry> string | boolean | integer | float | collection (checks for size) | date </entry>
              <entry>true</entry>
              <entry>Less than or equal</entry>
            </row>
            <row>
              <entry>null</entry>
              <entry> all</entry>
              <entry>false</entry>
              <entry>Property is null</entry>
            </row>
            <row>
              <entry>!null</entry>
              <entry>all</entry>
              <entry>false</entry>
              <entry>Property is not null</entry>
            </row>
            <row>
              <entry>empty</entry>
              <entry> collection</entry>
              <entry>false</entry>
              <entry>Collection is empty</entry>
            </row>
            <row>
              <entry>in</entry>
              <entry> string | boolean | integer | float | date</entry>
              <entry>true</entry>
              <entry>Find objects matching 1 or more values</entry>
            </row>
            <row>
              <entry>!in</entry>
              <entry> string | boolean | integer | float | date</entry>
              <entry>true</entry>
              <entry>Find objects not matching 1 or more values</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
    <para>Operators will be applied as logical <emphasis role="bold">and</emphasis> query, if you
      need a <emphasis role="bold">or</emphasis> query, you can have a look at our <emphasis
        role="italic">in</emphasis> filter (also have a look at the section below). The filtering
      mechanism allows for recursion. See below for some examples.</para>
    <para>Get data elements with id property ID1 or
      ID2:<screen>/api/26/dataElements?filter=id:eq:ID1&amp;filter=id:eq:ID2</screen></para>
    <para>Get all data elements which has the dataSet with id
      ID1:<screen>/api/26/dataElements?filter=dataSetElements.dataSet.id:eq:ID1</screen></para>
    <para>Get all data elements with aggregation operator &quot;sum&quot; and value type
      &quot;int&quot;:<screen>/api/26/dataElements.json?filter=aggregationOperator:eq:sum&amp;filter=type:eq:int</screen></para>
    <para>You can do filtering within collections, e.g. to get data elements which are members of
      the &quot;ANC&quot; data element group you can use the following query using the id property
      of the associated data element
      groups:<screen>/api/26/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6</screen></para>
    <para>Since all operators are <emphasis role="bold">and</emphasis> by default, you can&apos;t
      find a data element matching more than one id, for that purpose you can use the <emphasis
        role="italic">in</emphasis>
      operator.<screen>/api/26/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]</screen></para>
    <section xml:id="webapi_metadata_logical_operator">
      <title>Logical operators</title>
      <para>As mentioned in the section before, the default logical operator applied to the filters
        are <emphasis role="bold">AND</emphasis> which means that all object filters must be
        matched. There are however cases where you want to match on one of several filters (maybe id
        and code field) and in those cases it is possible to switch the root logical operator from
          <emphasis role="bold">AND</emphasis> to <emphasis role="bold">OR</emphasis> using the
          <emphasis>rootJunction</emphasis> parameter.</para>
      <para>Example: Normal filtering where both id and code must match to have a result
        returned<screen>/api/dataElements.json?filter=id:in:[id1,id2]&amp;filter=code:eq:code1</screen></para>
      <para>Example: Filtering where the logical operator has been switched to OR and now only one
        of the filters must match to have a result returned</para>
      <screen>/api/dataElements.json?filter=id:in:[id1,id2]&amp;filter=code:eq:code1&amp;rootJunction=OR</screen>      
    </section>
  </section>
  <section xml:id="webapi_metadata_field_filter">
    <title>Metadata field filter</title>
    <para>In certain situations the default views of the metadata can be too verbose. A client might
      only need a few fields from each object and want to remove unnecessary fields from the
      response. To discover which fields are available for each object please see the <emphasis
        role="italic">schema</emphasis> section.</para>
    <para>The format for include/exclude is very simple and allows for infinite recursion. To filter
      at the &quot;root&quot; level you can just use the name of the field, i.e. <emphasis
        role="italic">?fields=id,name</emphasis> which would only display the <emphasis
        role="italic">id</emphasis> and <emphasis role="italic">name</emphasis> for every object.
      For objects that are either collections or complex objects with properties on their own you
      can use the format <emphasis role="italic">?fields=id,name,dataSets[id,name]</emphasis> which
      would return <emphasis role="italic">id</emphasis>, <emphasis role="italic">name</emphasis> of
      the root, and the <emphasis role="italic">id</emphasis> and <emphasis role="italic"
        >name</emphasis> of every data set on that object. Negation can be done with the exclamation
      operator, and we have a set of presets of field select (see below). Both XML and JSON are
      supported.</para>
    <para><emphasis role="bold">Example</emphasis>: Get <emphasis role="italic">id</emphasis> and
        <emphasis role="italic">name</emphasis> on the indicators
      resource:<screen>/api/26/indicators?fields=id,name</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Get <emphasis role="italic">id</emphasis> and
        <emphasis role="italic">name</emphasis> from dataElements, and <emphasis role="italic"
        >id</emphasis> and <emphasis role="italic">name</emphasis> from the dataSets on
      dataElements:<screen>/api/26/dataElements?fields=id,name,dataSets[id,name]</screen></para>
    <para>To exclude a field from the output you can use the exclamation (!) operator. This is
      allowed anywhere in the query and will simply not include that property (as it might have been
      inserted in some of the presets).</para>
    <para>A few presets (selected fields groups) are available and can be applied using the
      &apos;:&apos; operator.<table frame="all">
        <title>Property operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.99*"/>
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>&lt;field-name&gt;</entry>
              <entry>Include property with name, if it exists.</entry>
            </row>
            <row>
              <entry>&lt;object&gt;[&lt;field-name&gt;, ...]</entry>
              <entry>Includes a field within either a collection (will be applied to every object in
                that collection), or just on a single object.</entry>
            </row>
            <row>
              <entry>!&lt;field-name&gt;, &lt;object&gt;[!&lt;field-name&gt;</entry>
              <entry>Do not include this field name, also works inside objects/collections. Useful
                when you use a preset to inlude fields.</entry>
            </row>
            <row>
              <entry>*, &lt;object&gt;[*]</entry>
              <entry>Include all fields on a certain object, if applied to a collection, it will
                include all fields on all objects on that collection.</entry>
            </row>
            <row>
              <entry>:&lt;preset&gt;</entry>
              <entry>Alias to select multiple fields. Three presets are currently available, see
                table below for descriptions.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
    <table frame="all">
      <title>Field presets</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="2.96*"/>
        <thead>
          <row>
            <entry>Preset</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>all</entry>
            <entry>All fields of the object</entry>
          </row>
          <row>
            <entry>*</entry>
            <entry>Alias for all</entry>
          </row>
          <row>
            <entry>identifiable</entry>
            <entry>Includes id, name, code, created and lastUpdated fields</entry>
          </row>
          <row>
            <entry>nameable</entry>
            <entry>Includes id, name, shortName, code, description, created and lastUpdated
              fields</entry>
          </row>
          <row>
            <entry>persisted</entry>
            <entry>Returns all persisted property on a object, does not take into consideration if
              the object is the owner of the relation.</entry>
          </row>
          <row>
            <entry>owner</entry>
            <entry>Returns all persisted property on a object where the object is the owner of all
              properties, this payload can be used to update through the web-api.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para><emphasis role="bold">Example</emphasis>: Include all fields from dataSets except
      organisationUnits:<screen>/api/26/dataSets?fields=:all,!organisationUnits</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Include only id, name and the collection of
      organisation units from a data set, but exclude the id from organisation
      units:<screen>/api/26/dataSets/BfMAe6Itzgt?fields=id,name,organisationUnits[:all,!id]</screen></para>
    <para><emphasis role="bold">Example</emphasis>: Include nameable properties from all
      indicators:<screen>/api/26/indicators.json?fields=:nameable</screen></para>
    <section xml:id="webapi_field_transformers">
      <title>Field transformers</title>
      <para>In DHIS2.17 we introduced field transformers, the idea is to allow further customization
        of the properties on the server
        side.<screen>/api/26/dataElements/ID?fields=id~rename(i),name~rename(n)</screen></para>
      <para>This will rename the <emphasis role="italic">id</emphasis> property to <emphasis
          role="italic">i</emphasis> and <emphasis role="italic">name</emphasis> property to
          <emphasis role="italic">n</emphasis>.</para>
      <para>Multipe transformers can be used by repeating the transformer
          syntax:<screen>/api/26/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements)</screen><table
          frame="all">
          <title>Available Transformers</title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="1.52*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <colspec colname="c3" colnum="3" colwidth="2.03*"/>
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Arguments</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>size</entry>
                <entry/>
                <entry>Gives sizes of strings (length) and collections</entry>
              </row>
              <row>
                <entry>isEmpty</entry>
                <entry/>
                <entry>Is string or collection empty</entry>
              </row>
              <row>
                <entry>isNotEmpty</entry>
                <entry/>
                <entry>Is string or collection not empty</entry>
              </row>
              <row>
                <entry>rename</entry>
                <entry>Arg1: name</entry>
                <entry>Renames the property name</entry>
              </row>
              <row>
                <entry>paging</entry>
                <entry>Arg1: page,Arg2: pageSize</entry>
                <entry>Pages a collection, default pageSize is 50.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <section xml:id="webapi_field_transformers_examples">
        <title>Examples</title>
        <para>Examples of transformer
          usage.<screen>/api/26/dataElements?fields=dataSets~size</screen><screen>/api/26/dataElements?fields=dataSets~isEmpty</screen><screen>/api/26/dataElements?fields=dataSets~isNotEmpty</screen><screen>/api/26/dataElements/ID?fields=id~rename(i),name~rename(n)</screen><screen>/api/26/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)</screen></para>
      </section>
    </section>
  </section>
  <section xml:id="webapi_metadata_crud">
    <title>Metadata create, read, update, delete, validate</title>
    <para>While some of the web-api endpoints already contains support for CRUD (create, read,
      update, delete), from version 2.15 this is now supported on all endpoints. It should work as
      you expect, and the subsections will give more detailed information about create, update, and
      delete (read is already covered elsewhere, and have been supported for a long time).</para>
    <section xml:id="webapi_metadata_create_update">
      <title>Create / update parameters</title>
      <para>The following query parameters are available for customizing your request.</para>
      <para>
        <table>
          <title>Available Query Filters</title>
          <tgroup cols="5">
            <thead>
              <row>
                <entry> Param </entry>
                <entry> Type </entry>
                <entry> Required </entry>
                <entry> Options (default first) </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>preheatCache</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>true | false</entry>
                <entry>Turn cache-map preheating on/off. This is on by default, turning this off
                  will make initial load time for importer much shorter (but will make the import
                  itself slower). This is mostly used for cases where you have a small XML/JSON file
                  you want to import, and don&apos;t want to wait for cache-map preheating.</entry>
              </row>
              <row>
                <entry>strategy</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>CREATE_AND_UPDATE | CREATE | UPDATE | DELETE</entry>
                <entry>Import strategy to use, see below for more information.</entry>
              </row>
              <row>
                <entry>mergeMode</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>REPLACE, MERGE</entry>
                <entry>Strategy for merging of objects when doing updates. REPLACE will just
                  overwrite the propery with the new value provided, MERGE will only set the
                  property if its not null (only if the property was provided).</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
    </section>
    <section xml:id="webapi_creating_updating_objects">
      <title>Creating and updating objects</title>
      <para>For creating new objects you will need to know the endpoint, the type format, and make
        sure that you have the required authorities. As an example , we will create and update an
          <emphasis role="italic">constant</emphasis>. To figure out the format, we can use the new
          <emphasis role="italic">schema</emphasis> endpoint for getting format description. So we
        will start with getting that
        info:<screen>http://&lt;&lt;server&gt;&gt;/api/schemas/constant.json</screen> From the
        output, you can see that the required authorities for create are F_CONSTANT_ADD, and the
        important properties are: <emphasis role="italic">name</emphasis> and <emphasis
          role="italic">value</emphasis>. From this we can create a JSON payload and save it as a
        file called
        constant.json:<screen>{
  &quot;name&quot;: &quot;PI&quot;,
  &quot;value&quot;: &quot;3.14159265359&quot;
}</screen></para>
      <para>The same content as an XML
        payload:<screen>&lt;constant name=&quot;PI&quot; xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;value&gt;3.14159265359&lt;/value&gt;
&lt;/constant&gt;</screen></para>
      <para>We are now ready create the new <emphasis role="italic">constant</emphasis> by sending a
        POST request to the <emphasis role="italic">constants </emphasis>endpoint with the JSON
        payload using curl:
        <screen>curl -d @constant.json &quot;http://server/api/26/constants&quot; -X POST 
-H &quot;Content-Type: application/json&quot; -u user:password</screen></para>
      <para>A specific example of posting the constant to the demo server:
        <screen>curl -d @constant.json &quot;https://play.dhis2.org/api/26/constants&quot; -X POST 
-H &quot;Content-Type: application/json&quot; -u admin:district</screen></para>
      <para>If everything went well, you should see an output similar
        to:<screen language="json">{
  &quot;status&quot;:&quot;SUCCESS&quot;,
  &quot;importCount&quot;:{&quot;imported&quot;:1,&quot;updated&quot;:0,&quot;ignored&quot;:0,&quot;deleted&quot;:0},
  &quot;type&quot;:&quot;Constant&quot;
}</screen></para>
      <para>The process will be exactly the same for updating, you make your changes to the JSON/XML
        payload, find out the <emphasis role="italic">ID</emphasis> of the constant, and then send a
        PUT request to the endpoint including
        ID:<screen language="bash">curl -X PUT -d @pi.json -H &quot;Content-Type: application/json&quot; 
-u user:password http://server/api/26/constants/ID</screen></para>
    </section>
    <section xml:id="webapi_deleting_objects">
      <title>Deleting objects</title>
      <para>Deleting objects are very straight forward, you will need to know the <emphasis
          role="italic">ID</emphasis> and the endpoint of the type you want delete, let&apos;s
        continue our example from the last section and use a <emphasis role="italic"
          >constant</emphasis>. Let&apos;s assume that the id is <emphasis role="italic"
          >abc123</emphasis>, then all you need to do is the send the DELETE request to the endpoint
        +
        id:<screen>curl -X DELETE -u user:password
http://server/api/26/constants/ID</screen></para>
      <para>A successful delete should return HTTP status 204 (no content).</para>
    </section>
    <section xml:id="webapi_adding_removing_objects_collections">
      <title>Adding and removing objects in collections</title>
      <para>The collections resource lets you modify collections of objects.</para>
      <section xml:id="webapi_collections_adding_removing_single_objects">
        <title>Adding or removing single objects</title>
      <para>In order to add or remove objects to or from a collection of objects you can use the
          following
          pattern:<screen>/api/26/{collection-object}/{collection-object-id}/{collection-name}/{object-id}</screen></para>
      <para>You should use the POST method to add, and the DELETE method to remove an object. The
        components of the pattern are:</para>
      <itemizedlist>
        <listitem>
          <para>collection object: The type of objects that owns the collection you want to
            modify.</para>
        </listitem>
        <listitem>
          <para>collection object id: The identifier of the object that owns the collection you want
            to modify.</para>
        </listitem>
        <listitem>
          <para>collection name: The name of the collection you want to modify.</para>
        </listitem>
        <listitem>
          <para>object id: The identifier of the object you want to add or remove from the
            collection.</para>
        </listitem>
      </itemizedlist>
      <para>As an example, in order to remove a data element with identifier IDB from a data element
          group with identifier IDA you can do a DELETE
          request:<screen>DELETE /api/26/dataElementGroups/IDA/dataElements/IDB</screen></para>
      <para>To add a category option with identifier IDB to a category with identifier IDA you can
          do a POST request:<screen>POST /api/26/categories/IDA/categoryOptions/IDB</screen></para>
      </section>
      <section xml:id="webapi_collections_adding_removing_multiple_objects">
        <title>Adding or removing multiple objects</title>
      <para>You can add or remove multiple objects from a collection in one request with a payload
          like
          this:<screen>{
  "identifiableObjects": [
    { "id": "IDA" },
    { "id": "IDB" },
    { "id": "IDC" }
  ]
}</screen></para>
      <para>Using this payload you can add, replace or delete items:</para>
      <para><emphasis role="italic">Adding Items:</emphasis></para>
      <screen>POST /api/26/categories/IDA/categoryOptions</screen>
      <para><emphasis role="italic">Replacing
          Items:</emphasis><screen>PUT /api/26/categories/IDA/categoryOptions</screen></para>
      <para><emphasis role="italic">Delete
          Items:</emphasis><screen>DELETE /api/26/categories/IDA/categoryOptions</screen></para>
      </section>
      <section xml:id="webapi_collections_adding_removing_objects_single_request">
        <title>Adding and removing objects in a single request</title>
        <para>You can both add and remove objects from a collection in a single POST request with
          the following type of
          payload:<screen>POST /api/26/categories/IDA/categoryOptions</screen><screen>{
  "additions": [
    { "id": "IDA" },
    { "id": "IDB" },
    { "id": "IDC" }
  ],
  "deletions": [
    { "id": "IDD" },
    { "id": "IDE" },
    { "id": "IDF" }
  ]
}</screen></para>
      </section>
    </section>
    <section xml:id="webapi_validating_payloads">
      <title>Validating payloads</title>
      <para>System wide validation of metadata payloads are enabled from 2.19 release, this means
        that create/update operations on the web-api endpoints will be checked for valid payload
        before allowed changes to be made, to find out what validations are in place for a endpoint,
        please have a look at the /api/schemas endpoint, i.e. to figure out which constraints a data
        element have, you would go to /api/schemas/dataElement.</para>
      <para>You can also validate your payload manually by sending it to the proper schema endpoint.
        If you wanted to validate the constant from the create section before, you would send it
        like this:<screen>POST /api/schemas/constant
{ payload }</screen></para>
      <para>A simple (non-validating) example would
        be:<screen>curl -X POST -d &quot;{\&quot;name\&quot;: \&quot;some name\&quot;}&quot; -H &quot;Content-Type: application/json&quot; 
-u admin:district https://play.dhis2.org/dev/api/schemas/dataElement</screen></para>
      <para>Which would yield the
        result:<screen>[
   {
      &quot;message&quot; : &quot;Required property missing.&quot;,
      &quot;property&quot; : &quot;type&quot;
   },
   {
      &quot;property&quot; : &quot;aggregationOperator&quot;,
      &quot;message&quot; : &quot;Required property missing.&quot;
   },
   {
      &quot;property&quot; : &quot;domainType&quot;,
      &quot;message&quot; : &quot;Required property missing.&quot;
   },
   {
      &quot;property&quot; : &quot;shortName&quot;,
      &quot;message&quot; : &quot;Required property missing.&quot;
   }
]</screen></para>
    </section>
    <section xml:id="webapi_partial_updates">
      <title>Partial updates</title>
      <para>For cases where you don&apos;t want or need to update all properties on a object (which
        means downloading a potentially huge payload, change one property, then upload again) we now
        support partial update, both for single properties and for multiple properties.</para>
      <para>The format for updating a single property is the same as when you are updating a
        complete object, just with only 1 property in the JSON/XML file,
        i.e.:<screen>curl -X PATCH -d &quot;{\&quot;name\&quot;: \&quot;New Name\&quot;}&quot; -H &quot;Content-Type: application/json&quot; 
-u admin:district https://play.dhis2.org/dev/api/26/dataElements/fbfJHSPpUQD/name</screen></para>
      <para>Please note that we are including the property name two times, one time in the payload,
        and one time in the endpoint, the generic endpoint for this is <emphasis role="italic"
          >/api/type/id/property-name</emphasis>, and the <emphasis role="italic"
          >Content-Type</emphasis> must also be included as usual (since we support multiple
        formats).</para>
      <para>The format for updating multiple properties are similar, just that we don&apos;t include
        the property names in the url,
        i.e.:<screen>{ // file.json
  &quot;name&quot;: &quot;Updated Name&quot;,
  &quot;zeroIsSignificant&quot;: true
}</screen><screen>curl -X PATCH -d @file.json -H &quot;Content-Type: application/json&quot; 
-u admin:district https://play.dhis2.org/dev/api/26/dataElements/fbfJHSPpUQD</screen></para>
    </section>
  </section>
  <section xml:id="webapi_metadata_export">
    <title>Metadata export</title>
    <para>This section explains the metatada API which is available at <emphasis role="italic"
        >/api/23/metadata</emphasis> and <emphasis role="italic"
      >/api/26/metadata</emphasis>endpoints. XML and JSON resource representations are
      supported.</para>
    <para>The most common parameters are described below in the "Export Parameter" table. You can
      also apply this to all available types by using <emphasis role="italic"
        >type:fields=&lt;filter></emphasis> and <emphasis role="italic"
        >type:filter=&lt;filter></emphasis>- You can also enable/disable export of certain types by
      setting <emphasis role="italic">type=true/false</emphasis>.</para>
    <table frame="all">
      <title>Export Parameter</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.27*"/>
        <colspec colname="c3" colnum="3" colwidth="3.61*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Options</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>fields</entry>
            <entry>Same as metadata field filter</entry>
            <entry>Default field filter to apply for all types, default is <emphasis role="bold"
                >:owner</emphasis>.</entry>
          </row>
          <row>
            <entry>filter</entry>
            <entry>Same as metadata object filter</entry>
            <entry>Default object filter to apply for all types, default is <emphasis role="bold"
                >none</emphasis>.</entry>
          </row>
          <row>
            <entry>order</entry>
            <entry>Same as metadata order</entry>
            <entry>Default order to apply to all types, default is <emphasis role="bold"
                >name</emphasis> if available, or <emphasis role="bold">created</emphasis> if
              not.</entry>
          </row>
          <row>
            <entry>translate</entry>
            <entry>false/true</entry>
            <entry>Enable translations. Be aware that this is turned off by default (in other
              endpoints this is on by default).</entry>
          </row>
          <row>
            <entry>locale</entry>
            <entry>&lt;locale></entry>
            <entry>Change from user locale, to your own custom locale.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section xml:id="webapi_metadata_export_examples">
      <title>Metadata export examples</title>
      <para>Export all
        metadata:<screen>curl -u user:pass http://server/api/26/metadata</screen></para>
      <para>Export all metadata ordered by lastUpdated
        descending:<screen>curl -u user:pass http://server/api/26/metadata?defaultOrder=lastUpdated:desc</screen></para>
      <para>Export id and displayName for all data elements, ordered by
        displayName:<screen>curl -u user:pass http://server/api/26/metadata?dataElements:fields=id,name&amp;dataElements:order=displayName:desc</screen></para>
      <para>Export data elements and indicators where name starts with
        "ANC":<screen>curl -u user:pass http://server/api/26/metadata?defaultFilter=name:^like:ANC&amp;dataElements=true&amp;indicators=true</screen></para>
    </section>
    <section xml:id="webapi_dataset_program_export_dependencies">
      <title>Data set and program export with dependencies</title>
      <para>When you want to move a whole set of data set or program metadata from one server to
        another (possibly empty) server, we have two special endpoints for just that
        purpose:<screen>/api/26/dataSets/ID/metadata.json</screen><screen>/api/26/programs/ID/metadata.json</screen></para>
      <para>These exports can be imported both using the old importer at <emphasis role="italic"
          >/api/metadata</emphasis> and the new importer at <emphasis role="italic"
          >/api/23/metadata</emphasis>.</para>
    </section>
  </section>
  <section xml:id="webapi_metadata_import">
    <title>Metadata import</title>
    <para>This section explains the metatada API which is available at <emphasis role="italic"
        >/api/23/metadata</emphasis> and <emphasis role="italic"
      >/api/26/metadata</emphasis>endpoints. XML and JSON resource representations are
      supported.</para>
    <para>The importer allows you to import metadata exported with the new exporter. The various
      parameters are listed below.</para>
    <table frame="all">
      <title>Import Parameter</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.27*"/>
        <colspec colname="c3" colnum="3" colwidth="3.61*"/>
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Options (first is default)</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>importMode</entry>
            <entry>COMMIT, VALIDATE</entry>
            <entry>Sets overall import mode, decides whether or not to only <emphasis role="bold"
                >VALIDATE</emphasis> or also <emphasis role="bold">COMMIT</emphasis> the metadata,
              this have similar functionality as our old dryRun flag.</entry>
          </row>
          <row>
            <entry>identifier</entry>
            <entry>UID, CODE, AUTO</entry>
            <entry>Sets the identifier scheme to use for reference matching. <emphasis role="bold"
                >AUTO</emphasis> means try <emphasis role="bold">UID</emphasis> first, then
                <emphasis role="bold">CODE</emphasis>.</entry>
          </row>
          <row>
            <entry>importReportMode</entry>
            <entry>ERRORS, FULL, DEBUG</entry>
            <entry>Sets the <emphasis role="bold">ImportReport</emphasis> mode, controls how much is
              reported back after the import is done. <emphasis role="bold">ERRORS</emphasis> only
              includes <emphasis role="italic">ObjectReports</emphasis> for object which has errors.
                <emphasis role="bold">FULL</emphasis> returns an <emphasis role="italic"
                >ObjectReport</emphasis> for all objects imported, and <emphasis role="bold"
                >DEBUG</emphasis> returns the same plus a name for the object (if
              available).</entry>
          </row>
          <row>
            <entry>preheatMode</entry>
            <entry>REFERENCE, ALL, NONE</entry>
            <entry>Sets the preheater mode, used to signal if preheating should be done for
                <emphasis role="bold">ALL</emphasis> (as it was before with <emphasis role="italic"
                >preheatCache=true</emphasis>) or do a more intelligent scan of the objects to see
              what to preheat (now the default), setting this to <emphasis role="bold"
                >NONE</emphasis> is not recommended.</entry>
          </row>
          <row>
            <entry>importStrategy</entry>
            <entry>CREATE_AND_UPDATE, CREATE, UPDATE, DELETE</entry>
            <entry>Sets import strategy, <emphasis role="bold">CREATE_AND_UPDATE</emphasis> will try
              and match on identifier, if it doesn't exist, it will create the object.</entry>
          </row>
          <row>
            <entry>atomicMode</entry>
            <entry>ALL, NONE</entry>
            <entry>Sets atomic mode, in the old importer we always did a <emphasis role="italic"
                >best effort</emphasis> import, which means that even if some references did not
              exist, we would still import (i.e. missing data elements on a data element group
              import). Default for new importer is to not allow this, and similar reject any
              validation errors. Setting the <emphasis role="bold">NONE</emphasis> mode emulated the
              old behavior.</entry>
          </row>
          <row>
            <entry>mergeMode</entry>
            <entry>MERGE, REPLACE</entry>
            <entry>Sets the merge mode, when doing updates we have two ways of merging the old
              object with the new one, <emphasis role="bold">MERGE</emphasis> mode will only
              overwrite the old property if the new one is not-null, for <emphasis role="bold"
                >REPLACE</emphasis> mode all properties are overwritten regardsless of null or
              not.</entry>
          </row>
          <row>
            <entry>flushMode</entry>
            <entry>AUTO, OBJECT</entry>
            <entry>Sets the flush mode, decides when to flush the internal cache, <emphasis
                role="italic">strongly</emphasis> reommended to keep this to <emphasis role="bold"
                >AUTO</emphasis> (which is the default). Only use <emphasis role="bold"
                >OBJECT</emphasis> for debugging purposes, where you are seeing hibernate exceptions
              and want to pinpoint the exact place where the stack happens (hibernate will only
              throw when flushing, so it can be hard to know which object had issues).</entry>
          </row>
          <row>
            <entry>skipSharing</entry>
            <entry>false, true</entry>
            <entry>Skip sharing properties, does not merge sharing when doing updates, and does not
              add user group accessses when creating new objects.</entry>
          </row>
          <row>
            <entry>skipValidation</entry>
            <entry>false, true</entry>
            <entry>Skip validation for import. <emphasis role="bold">NOT
              RECOMMENDED</emphasis>.</entry>
          </row>
          <row>
            <entry>async</entry>
            <entry>false, true</entry>
            <entry>Asynchronous import, returns immediately with a <emphasis>Location</emphasis>
              header pointing to the location of the <emphasis>importReport</emphasis>.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="webapi_csv_metadata_import">
    <title>CSV metadata import</title>
    <para>DHIS2 supports import of metadata in the CSV format. Columns which are not required can
      be omitted in the CSV file, but the order will be affected. If you would like to specify
      columns which appear late in the order but not specify columns which appear early in the order
      you can include empty columns (&quot;&quot;) for them. The following object types are
      supported:</para>
    <itemizedlist>
      <listitem>
        <para>Data elements</para>
      </listitem>
      <listitem>
        <para>Data element groups</para>
      </listitem>
      <listitem>
        <para>Category options</para>
      </listitem>
      <listitem>
        <para>Category option groups</para>
      </listitem>
      <listitem>
        <para>Organisation units</para>
      </listitem>
      <listitem>
        <para>Organisation unit groups</para>
      </listitem>
      <listitem>
        <para>Validation rules</para>
      </listitem>
      <listitem>
        <para>Translations</para>
      </listitem>
      <listitem>
        <para>Option sets</para>
      </listitem>
    </itemizedlist>
    <para>The formats for the currently supported object types for CSV import are listed in the
      following sections.</para>
    <section xml:id="webapi_csv_data_elements">
      <title>Data elements</title>
      <table frame="all">
        <title>Data Element CSV Format</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.87*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="newCol3" colwidth="3.7*"/>
          <colspec colnum="4" colname="c3" colwidth="6.79*"/>
          <thead>
            <row>
              <entry>Column</entry>
              <entry>Required</entry>
              <entry>Value (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Name</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Name. Max 230 char. Unique.</entry>
            </row>
            <row>
              <entry>UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Exactly 11 alpha-numeric characters, beginning with a
                character. Will be generated by system if not specified.</entry>
            </row>
            <row>
              <entry>Code</entry>
              <entry>No</entry>
              <entry/>
              <entry>Stable code. Max 50 char.</entry>
            </row>
            <row>
              <entry>Short name</entry>
              <entry>No</entry>
              <entry>50 first char of name</entry>
              <entry>Will fall back to first 50 characters of name if unspecified. Max 50 char.
                Unique.</entry>
            </row>
            <row>
              <entry>Description</entry>
              <entry>No</entry>
              <entry/>
              <entry>Free text description.</entry>
            </row>
            <row>
              <entry>Form name</entry>
              <entry>No</entry>
              <entry/>
              <entry>Max 230 char.</entry>
            </row>
            <row>
              <entry>Domain type</entry>
              <entry>No</entry>
              <entry>AGGREGATE | TRACKER</entry>
              <entry>Domain type for data element, can be aggregate or tracker. Max 16 char.</entry>
            </row>
            <row>
              <entry>Value type</entry>
              <entry>No</entry>
              <entry>INTEGER | NUMBER | UNIT_INTERVAL | PERCENTAGE | INTEGER_POSITIVE |
                INTEGER_NEGATIVE | INTEGER_ZERO_OR_POSITIVE | FILE_RESOURCE | COORDINATE |TEXT |
                LONG_TEXT | LETTER | PHONE_NUMBER | EMAIL | BOOLEAN | TRUE_ONLY | DATE | DATETIME </entry>
              <entry>Value type. Max 16 char.</entry>
            </row>
            <row>
              <entry>Aggregation operator</entry>
              <entry>No</entry>
              <entry>SUM | AVERAGE | AVERAGE_SUM_ORG_UNIT | COUNT | STDDEV | VARIANCE | MIN | MAX |
                NONE</entry>
              <entry>Operator indicating how to aggregate data in the time dimension. Max 16
                char.</entry>
            </row>
            <row>
              <entry>Category combination UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>UID of category combination. Will default to default category combination if
                not specified.</entry>
            </row>
            <row>
              <entry>Url</entry>
              <entry>No</entry>
              <entry/>
              <entry>URL to data element resource. Max 255 char.</entry>
            </row>
            <row>
              <entry>Zero is significant</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Indicates whether zero values will be stored for this data element.</entry>
            </row>
            <row>
              <entry>Option set</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>UID of option set to use for data.</entry>
            </row>
            <row>
              <entry>Comment option set</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>UID of option set to use for comments.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>An example of a CSV file for data elements can be seen below. The first row will always
        be ignored. Note how you can skip columns and rely on default values to be used by the
        system. You can also skip columns which you do not use which appear to the right of the
        ones</para>
      <screen>name,uid,code,shortname,description
&quot;Women participated in skill development training&quot;,,&quot;D0001&quot;,&quot;Women participated development training&quot;
&quot;Women participated in community organizations&quot;,,&quot;D0002&quot;,&quot;Women participated community organizations&quot;</screen>
    </section>
    <section xml:id="webapi_csv_org_units">
      <title>Organisation units</title>
      <table frame="all">
        <title>Organisation Unit CSV Format</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.33*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="2.05*"/>
          <colspec colnum="4" colname="c4" colwidth="5.1*"/>
          <thead>
            <row>
              <entry>Column</entry>
              <entry>Required</entry>
              <entry>Value (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Name</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Name. Max 230 characters. Unique.</entry>
            </row>
            <row>
              <entry>UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Max 11 char. Will be generated by system if not
                specified.</entry>
            </row>
            <row>
              <entry>Code</entry>
              <entry>No</entry>
              <entry/>
              <entry>Stable code. Max 50 char.</entry>
            </row>
            <row>
              <entry>Parent UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>UID of parent organisation unit.</entry>
            </row>
            <row>
              <entry>Short name</entry>
              <entry>No</entry>
              <entry>50 first char of name</entry>
              <entry>Will fall back to first 50 characters of name if unspecified. Max 50
                characters. Unique.</entry>
            </row>
            <row>
              <entry>Description</entry>
              <entry>No</entry>
              <entry/>
              <entry>Free text description.</entry>
            </row>
            <row>
              <entry>UUID</entry>
              <entry>No</entry>
              <entry/>
              <entry>UUID. Max 36 char.</entry>
            </row>
            <row>
              <entry>Opening date</entry>
              <entry>No</entry>
              <entry>1970-01-01</entry>
              <entry>Opening date of organisation unit in YYYY-MM-DD format.</entry>
            </row>
            <row>
              <entry>Closed date</entry>
              <entry>No</entry>
              <entry/>
              <entry>Closed date of organisation unit in YYYY-MM-DD format, skip if currently
                open.</entry>
            </row>
            <row>
              <entry>Comment</entry>
              <entry>No</entry>
              <entry/>
              <entry>Free text comment for organisation unit.</entry>
            </row>
            <row>
              <entry>Feature type</entry>
              <entry>No</entry>
              <entry>NONE | MULTI_POLYGON | POLYGON | POINT | SYMBOL</entry>
              <entry>Geospatial feature type.</entry>
            </row>
            <row>
              <entry>Coordinates</entry>
              <entry>No</entry>
              <entry/>
              <entry>Coordinates used for geospatial analysis in Geo JSON format.</entry>
            </row>
            <row>
              <entry>URL</entry>
              <entry>No</entry>
              <entry/>
              <entry>URL to organisation unit resource. Max 255 char.</entry>
            </row>
            <row>
              <entry>Contact person</entry>
              <entry>No</entry>
              <entry/>
              <entry>Contact person for organisation unit. Max 255 char.</entry>
            </row>
            <row>
              <entry>Address</entry>
              <entry>No</entry>
              <entry/>
              <entry>Address for organisation unit. Max 255 char.</entry>
            </row>
            <row>
              <entry>Email</entry>
              <entry>No</entry>
              <entry/>
              <entry>Email for organisation unit. Max 150 char.</entry>
            </row>
            <row>
              <entry>Phone number</entry>
              <entry>No</entry>
              <entry/>
              <entry>Phone number for organisation unit. Max 150 char.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>A minimal example for importing organisation units with a parent unit looks like
        this:</para>
      <screen>name,uid,code,parent
&quot;West province&quot;,,&quot;WESTP&quot;,&quot;ImspTQPwCqd&quot;
&quot;East province&quot;,,&quot;EASTP&quot;,&quot;ImspTQPwCqd&quot;</screen>
    </section>
    <section xml:id="webapi_csv_validation_rules">
      <title>Validation rules</title>
      <table frame="all">
        <title>Validation Rule CSV Format</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="2.37*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="3.84*"/>
          <colspec colnum="4" colname="c4" colwidth="6.29*"/>
          <thead>
            <row>
              <entry>Column</entry>
              <entry>Required</entry>
              <entry>Value (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Name</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Name. Max 230 characters. Unique.</entry>
            </row>
            <row>
              <entry>UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Max 11 char. Will be generated by system if not
                specified.</entry>
            </row>
            <row>
              <entry>Code</entry>
              <entry>No</entry>
              <entry/>
              <entry>Stable code. Max 50 </entry>
            </row>
            <row>
              <entry>Description</entry>
              <entry>No</entry>
              <entry/>
              <entry>Free text description.</entry>
            </row>
            <row>
              <entry>Instruction</entry>
              <entry>No</entry>
              <entry/>
              <entry>Free text instruction.</entry>
            </row>
            <row>
              <entry>Importance</entry>
              <entry>No</entry>
              <entry>MEDIUM | HIGH | LOW</entry>
              <entry/>
            </row>
            <row>
              <entry>Rule type</entry>
              <entry>No</entry>
              <entry>VALIDATION | SURVEILLANCE</entry>
              <entry/>
            </row>
            <row>
              <entry>Operator</entry>
              <entry>No</entry>
              <entry>equal_to | not_equal_to | greater_than | greater_than_or_equal_to | less_than |
                less_than_or_equal_to | compulsory_pair</entry>
              <entry/>
            </row>
            <row>
              <entry>Period type</entry>
              <entry>No</entry>
              <entry>Monthly | Daily | Weekly | Quarterly | SixMontly | Yearly</entry>
              <entry/>
            </row>
            <row>
              <entry>Left side expression</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Mathematical formula based on data element and option combo UIDs.</entry>
            </row>
            <row>
              <entry>Left side expression description</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Free text.</entry>
            </row>
            <row>
              <entry>Left side null if blank</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Boolean.</entry>
            </row>
            <row>
              <entry>Right side expression</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Mathematical formula based on data element and option combo UIDs.</entry>
            </row>
            <row>
              <entry>Right side expression description</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Free text.</entry>
            </row>
            <row>
              <entry>Right side null if blank</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Boolean.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="webapi_csv_option_sets">
      <title>Option sets</title>
      <table frame="all">
        <title>Option Set CSV Format</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.27*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="1.36*"/>
          <colspec colnum="4" colname="c4" colwidth="5.43*"/>
          <thead>
            <row>
              <entry>Column</entry>
              <entry>Required</entry>
              <entry>Value (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>OptionSetName</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Name. Max 230 characters. Unique. Should be repeated for each option.</entry>
            </row>
            <row>
              <entry>OptionSetUID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Max 11 char. Will be generated by system if not specified.
                Should be repeated for each option.</entry>
            </row>
            <row>
              <entry>OptionSetCode</entry>
              <entry>No</entry>
              <entry/>
              <entry>Stable code. Max 50 char. Should be repeated for each option.</entry>
            </row>
            <row>
              <entry>OptionName</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Option name. Max 230 characters. </entry>
            </row>
            <row>
              <entry>OptionUID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Max 11 char. Will be generated by system if not
                specified.</entry>
            </row>
            <row>
              <entry>OptionCode</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Stable code. Max 50 char.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The format for option sets is special. The three first values represent an option set.
        The three last values represent an option. The first three values representing the option
        set should be repeated for each option.</para>
      <screen>optionsetname,optionsetuid,optionsetcode,optionname,optionuid,optioncode
&quot;Color&quot;,,&quot;COLOR&quot;,&quot;Blue&quot;,,&quot;BLUE&quot;
&quot;Color&quot;,,&quot;COLOR&quot;,&quot;Green&quot;,,&quot;GREEN&quot;
&quot;Color&quot;,,&quot;COLOR&quot;,&quot;Yellow&quot;,,&quot;YELLOW&quot;
&quot;Sex&quot;,,,&quot;Male&quot;,,&quot;MALE&quot;
&quot;Sex&quot;,,,&quot;Female&quot;,,&quot;FEMALE&quot;
&quot;Sex&quot;,,,&quot;Uknown&quot;,,&quot;UNKNOWN&quot;
&quot;Result&quot;,,,&quot;High&quot;,,&quot;HIGH&quot;
&quot;Result&quot;,,,&quot;Medium&quot;,,&quot;MEDIUM&quot;
&quot;Result&quot;,,,&quot;Low&quot;,,&quot;LOW&quot;
&quot;Impact&quot;,&quot;cJ82jd8sd32&quot;,&quot;IMPACT&quot;,&quot;Great&quot;,,&quot;GREAT&quot;
&quot;Impact&quot;,&quot;cJ82jd8sd32&quot;,&quot;IMPACT&quot;,&quot;Medium&quot;,,&quot;MEDIUM&quot;
&quot;Impact&quot;,&quot;cJ82jd8sd32&quot;,&quot;IMPACT&quot;,&quot;Poor&quot;,,&quot;POOR&quot;</screen>
    </section>
    <section xml:id="webapi_csv_other_objects">
      <title>Other objects</title>
      <table frame="all">
        <title>Data Element Group, Category Option, Category Option Group, Organisation Unit Group
          CSV Format</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.35*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="1.12*"/>
          <colspec colnum="4" colname="c4" colwidth="4.35*"/>
          <thead>
            <row>
              <entry>Column</entry>
              <entry>Required</entry>
              <entry>Value (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Name</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Name. Max 230 characters. Unique.</entry>
            </row>
            <row>
              <entry>UID</entry>
              <entry>No</entry>
              <entry>UID</entry>
              <entry>Stable identifier. Max 11 char. Will be generated by system if not
                specified.</entry>
            </row>
            <row>
              <entry>Code</entry>
              <entry>No</entry>
              <entry/>
              <entry>Stable code. Max 50 char.</entry>
            </row>
            <row>
              <entry>Short name</entry>
              <entry>No</entry>
              <entry/>
              <entry>Short name. Max 50 characters.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>An example for category options looks like this:</para>
      <screen>name,uid,code,shortname
&quot;Male&quot;,,&quot;MALE&quot;
&quot;Female&quot;,,&quot;FEMALE&quot;</screen>
    </section>
  </section>
  <section xml:id="webapi_file_resources">
    <title>File resources</title>
    <para><emphasis role="italic">File resources</emphasis> are objects used to represent and store
      binary content. The <emphasis role="italic">FileResource</emphasis> object itself contains the
      file meta-data (name, Content-Type, size, etc) as well as a key allowing retrieval of the
      contents from a database-external file store. The <emphasis role="italic"
        >FileResource</emphasis> object is stored in the database like any other but the content
      (file) is stored elsewhere and is retrievable using the contained reference <emphasis
        role="italic">(storageKey)</emphasis>.<screen>/api/26/fileResources</screen></para>
    <para>The contents of a file resources is not directly accessible but is referenced from other
      objects (such as data values) to store binary content of virtually unlimited size.</para>
    <para>Creation of the file resource itself is done through the <emphasis role="italic"
        >api/fileResources</emphasis> endpoint as a multipart upload
      POST-request:<screen>curl -X POST -v -F &quot;file=@/Path/to/file;filename=name-of-file.png&quot; https://server/api/26/fileResources</screen></para>
    <para>The only form parameter required is the <emphasis role="italic">file</emphasis> which is
      the file to upload. The filename and content-type should also be included in the request (this
      is handled for you by any Web browser) but will be replaced by defaults when not
      supplied.</para>
    <para>On successfully creating a file resource the returned data will contain a <emphasis
        role="italic">response</emphasis> field which in turn contains the <emphasis role="italic"
        >fileResource</emphasis> like
      this:<screen>{
  "httpStatus&quot;: &quot;Accepted&quot;,
  "httpStatusCode&quot;: 202,
  "status&quot;: &quot;OK&quot;,
  "response&quot;: {
    "responseType&quot;: &quot;FileResource&quot;,
    &quot;fileResource&quot;: {
      &quot;name&quot;: &quot;name-of-file.png&quot;,
      &quot;created&quot;: &quot;2015-10-16T16:34:20.654+0000&quot;,
      &quot;lastUpdated&quot;: &quot;2015-10-16T16:34:20.667+0000&quot;,
      &quot;externalAccess&quot;: false,
      &quot;publicAccess&quot;: &quot;--------&quot;,
      &quot;user&quot;: { ... },
      &quot;displayName&quot;: &quot;name-of-file.png&quot;,
      &quot;contentType&quot;: &quot;image/png&quot;,
      &quot;contentLength&quot;: 512571,
      &quot;contentMd5&quot;: &quot;4e1fc1c3f999e5aa3228d531e4adde58&quot;,
      &quot;storageStatus&quot;: &quot;PENDING&quot;,
      &quot;id&quot;: &quot;xm4JwRwke0i&quot;
    }
  }
}</screen></para>
    <para>Note that the response is a <emphasis role="italic">202 Accepted</emphasis>, indicating
      that the returned resource has been submitted for background processing (persisting to the
      external file store in this case). Also note the <emphasis role="italic"
        >storageStatus</emphasis> field which indicates whether the contents have been stored or
      not. At this point the persistance to the external store is not yet finished (it is likely
      being uploaded to a cloud-based store somewhere) as seen by the <emphasis role="italic"
        >PENDING</emphasis> status.</para>
    <para>Even though the content has not been fully stored yet the file resource can now be used,
      for example as referenced content in a data value (see <xref linkend="datavalue_file"/>). If
      we need to check the updated <emphasis role="italic">storageStatus</emphasis> or otherwise
      retrieve the meta-data of the file, the <emphasis role="italic">fileResources</emphasis>
      endpoint can be
      queried.<screen>curl -v https://server/api/26/fileResources/xm4JwRwke0i -H &quot;Accept: application/json&quot;</screen></para>
    <para>This request will return the <emphasis role="italic">FileResource</emphasis> object as
      seen in the response of the above example.</para>
    <section xml:id="webapi_file_resources_constraints">
      <title>File resource constraints</title>
      <para>
        <itemizedlist>
          <listitem>
            <para>File resources <emphasis role="bold">must</emphasis> be referenced (assigned) from
              another object in order to be persisted in the long term. A file resource which is
              created but not referenced by another object such as a data value is considered to be
              in <emphasis role="italic">staging</emphasis>. Any file resources which are in this
              state and are older than <emphasis role="bold">two hours</emphasis> will be marked for
              deletion and will eventually be purged from the system. </para>
          </listitem>
          <listitem>
            <para>The ID returned by the initial creation of the file resource is not retrievable
              from any other location unless the file resource has been referenced (in which the ID
              will be stored as the reference), so losing it will require the POST request to be
              repeated and a new object to be created. The <emphasis role="italic"
                >orphaned</emphasis> file resource will be cleaned up automatically.</para>
          </listitem>
          <listitem>
            <para>File resource objects are <emphasis role="italic">immutable</emphasis>, meaning
              modification is not allowed and requires creating a completely new resource
              instead.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
  <section xml:id="webapi_metadata_versioning">
    <title>Metadata versioning</title>
    <para>This section explains the Metadata  Versioning APIs available starting 2.24</para>
    <itemizedlist>
      <listitem>
        <para>/api/metadata/version	 - This api will return the current metadata version of the system on which it
          is invoked.</para>
      </listitem>
    </itemizedlist>
      <table frame="all">
        <title>Query Parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.25*"/>
          <colspec colname="c3" colnum="3" colwidth="3*"/>
          <thead>
            <row>
              <entry>Name</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
          <row>
            <entry>versionName</entry>
            <entry>false</entry>
            <entry>If this parameter is not specified, it will return the current version of the system or
              otherwise it will return the details of the versionName passed as parameter. (versionName is
              of the syntax &quot;Version_&lt;id&gt;&quot;</entry>
          </row>
          </tbody>
        </tgroup>
      </table>
    <section xml:id="webapi_metadata_versioning_examples">
        <title>Get metadata version examples</title>
        <para><emphasis role="bold">Example: Get the current metadata version of this system</emphasis></para>
        <para><emphasis role="bold">Sample request:</emphasis>
          <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version"</screen></para>
        <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "name": "Version_4",
    "created": "2016-06-30T06:01:28.684+0000",
    "lastUpdated": "2016-06-30T06:01:28.685+0000",
    "externalAccess": false,
    "displayName": "Version_4",
    "type": "BEST_EFFORT",
    "hashCode": "848bf6edbaf4faeb7d1a1169445357b0",
    "id": "Ayz2AEMB6ry"
}</screen></para>
        <para><emphasis role="bold">Example: Get the details of version with name &quot;Version_2&quot;</emphasis></para>
        <para><emphasis role="bold">Sample request:</emphasis>
          <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version?versionName=Version_2"</screen></para>
        <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "name": "Version_2",
    "created": "2016-06-30T05:59:33.238+0000",
    "lastUpdated": "2016-06-30T05:59:33.239+0000",
    "externalAccess": false,
    "displayName": "Version_2",
    "type": "BEST_EFFORT",
    "hashCode": "8050fb1a604e29d5566675c86d02d10b",
    "id": "SaNyhusVxBG"
}</screen></para>
        <itemizedlist>
          <listitem>
      <para>/api/metadata/version/history - This api will return the list of all metadata
            versions of the system on which it is invoked.</para>
          </listitem>
        </itemizedlist>
      <table frame="all">
        <title>Query Parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.25*"/>
          <colspec colname="c3" colnum="3" colwidth="3*"/>
          <thead>
            <row>
              <entry>
                <para>Name</para>
              </entry>
              <entry>
                <para>Required</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>baseline</para>
              </entry>
              <entry>
                <para>false</para>
              </entry>
              <entry>
                <para>If this parameter is not specified, it will return list of all metadata
                  versions. Otherwise we need to pass a versionName parameter of the form
                  &quot;Version_&lt;id&gt;&quot;. It will then return the list of versions present
                  in the system which were created after the version name supplied as the query
                  parameter.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
        </section>
        <section xml:id="webapi_get_list_of_metadata_versions">
          <title>Get list of all metadata versions</title>
          <para><emphasis role="bold">Example: Get the list of all versions in this system</emphasis></para>
          <para><emphasis role="bold">Sample request:</emphasis>
            <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/history"</screen></para>
          <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "metadataversions": [{
        "name": "Version_1",
        "type": "BEST_EFFORT",
        "created": "2016-06-30T05:54:41.139+0000",
        "id": "SjnhUp6r4hG",
        "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798"
     }, {
         "name": "Version_2",
         "type": "BEST_EFFORT",
         "created": "2016-06-30T05:59:33.238+0000",
         "id": "SaNyhusVxBG",
         "hashCode": "8050fb1a604e29d5566675c86d02d10b"
     }, {
         "name": "Version_3",
         "type": "BEST_EFFORT",
         "created": "2016-06-30T06:01:23.680+0000",
         "id": "FVkGzSjAAYg",
         "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
     }]
}</screen></para>
          <para><emphasis role="bold">Example: Get the list of all versions in this system created after &quot;Version_2&quot;</emphasis></para>
          <para><emphasis role="bold">Sample request:</emphasis>
            <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/history?baseline=Version_2"</screen></para>
          <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "metadataversions": [{
        "name": "Version_3",
        "type": "BEST_EFFORT",
        "created": "2016-06-30T06:01:23.680+0000",
        "id": "FVkGzSjAAYg",
        "hashCode": "70b779ea448b0da23d8ae0bd59af6333"
    }, {
        "name": "Version_4",
        "type": "BEST_EFFORT",
        "created": "2016-06-30T06:01:28.684+0000",
        "id": "Ayz2AEMB6ry",
        "hashCode": "848bf6edbaf4faeb7d1a1169445357b0"
    }]
 }</screen></para>
      <itemizedlist>
        <listitem>
          <para>/api/metadata/version/create - This api will create the metadata version for the
            version type as specified in the parameter.</para>
        </listitem>
      </itemizedlist>
      <table frame="all">
        <title>Query Parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.25*"/>
          <colspec colname="c3" colnum="3" colwidth="3*"/>
          <thead>
            <row>
              <entry>
                <para>Name</para>
              </entry>
              <entry>
                <para>Required</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>type</para>
              </entry>
              <entry>
                <para>true</para>
              </entry>
              <entry>
                <para>The type of metadata version which needs to be created.<itemizedlist>
                    <listitem>
                      <para>BEST_EFFORT</para>
                    </listitem>
                    <listitem>
                      <para>ATOMIC</para>
                    </listitem>
                  </itemizedlist></para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Users can select the type of metadata which needs to be created. Metadata Version type
        governs how the importer should treat the given version. This type will be used while
        importing the metadata. There are two types of metadata.</para>
      <itemizedlist>
        <listitem>
          <para>BEST_EFFORT - This type suggests that missing references can be ignored and the
            importer can continue importing the metadata (e.g. missing data elements on a data
            element group import).</para>
        </listitem>
        <listitem>
          <para>ATOMIC - ensures a strict type checking of the metadata references and the metadata
            import will fail if any of the references do not exist.</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>It&apos;s recommended to have ATOMIC type of versions to ensure that all systems
          (central and local) have the same metadata. Any missing reference is caught in the
          validation phase itself. Please see the importer details for better understanding.</para>
      </note>
          </section>
        <section xml:id="webapi_create_metadata_version">
          <title>Create metadata version</title>
          <para><emphasis role="bold">Example: To create metadata version of type BEST_EFFORT</emphasis></para>
          <para><emphasis role="bold">Sample request:</emphasis>
            <screen>curl -X POST -u admin:district "https://play.dhis2.org/dev/api/metadata/version/create?type=BEST_EFFORT"</screen></para>
          <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "name": "Version_1",
    "created": "2016-06-30T05:54:41.139+0000",
    "lastUpdated": "2016-06-30T05:54:41.333+0000",
    "externalAccess": false,
    "publicAccess": "--------",
    "user": {
        "name": "John Traore",
        "created": "2013-04-18T17:15:08.407+0000",
        "lastUpdated": "2016-04-06T00:06:06.571+0000",
        "externalAccess": false,
        "displayName": "John Traore",
        "id": "xE7jOejl9FI"
    },
    "displayName": "Version_1",
    "type": "BEST_EFFORT",
    "hashCode": "fd1398ff7ec9fcfd5b59d523c8680798",
    "id": "SjnhUp6r4hG"
}</screen></para>
      <itemizedlist>
        <listitem>
          <para>/api/metadata/version/{versionName}/data - This api will download the actual
            metadata specific to the version name passed as path parameter.</para>
        </listitem>
        <listitem>
          <para>/api/metadata/version/{versionName}/data.gz - This api will download the actual
            metadata specific to the version name passed as path parameter in a compressed format
            (gzipped).</para>
        </listitem>
      </itemizedlist>
      <table frame="all">
        <title>Path parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="newCol3" colnum="3" colwidth="1*"/>
          <thead>
            <row>
              <entry>
                <para>Name</para>
              </entry>
              <entry>
                <para>Required</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>versionName</para>
              </entry>
              <entry>
                <para>true</para>
              </entry>
              <entry>
                <para>Path parameter of the form &quot;Version_&lt;id&gt;&quot; so that the api 
                  downloads the specific version</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
        </section>
        <section xml:id="webapi_download_version_metadata">
          <title>Download version metadata</title>
          <para><emphasis role="bold">Example: Get the actual metadata for &quot;Version_5&quot;</emphasis></para>
          <para><emphasis role="bold">Sample request:</emphasis>
            <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/version/Version_5/data"</screen></para>
          <para><emphasis role="bold">Sample response:</emphasis>
        <screen>{
    "date": "2016-06-30T06:10:23.120+0000",
    "dataElements": [{
        "code": "ANC 5th Visit",
        "created": "2016-06-30T06:10:09.870+0000",
        "lastUpdated": "2016-06-30T06:10:09.870+0000",
        "name": "ANC 5th Visit",
        "id": "sCuZKDsix7Y",
        "shortName": "ANC 5th Visit ",
        "aggregationType": "SUM",
        "domainType": "AGGREGATE",
        "zeroIsSignificant": false,
        "valueType": "NUMBER",
        "categoryCombo": {
            "id": "p0KPaWEg3cf"
        },
        "user": {
            "id": "xE7jOejl9FI"
        }
    }]
}            </screen></para>
        </section>
  </section>
  <section xml:id="webapi_metadata_synchronization">
    <title>Metadata Synchronization</title>
    <para>This section explains the Metadata Synchronization API available starting 2.24</para>
    <itemizedlist>
      <listitem>
        <para>/api/metadata/sync - This api performs a metadata sync of the version name passed in the query
          parameter by downloading and importing the specified version from the remote server as defined in the
          settings app.</para>
      </listitem>
    </itemizedlist>
    <table frame="all">
      <title>Query parameters</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="1.0*"/>
        <colspec colname="c2" colnum="2" colwidth="1.0*"/>
        <colspec colname="c3" colnum="3" colwidth="1.0*"/>
        <thead>
          <row>
            <entry>
              <para>Name</para>
            </entry>
            <entry>
              <para>Required</para>
            </entry>
            <entry>
              <para>Description</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>versionName</para>
            </entry>
            <entry>
              <para>true</para>
            </entry>
            <entry>
              <para>versionName query parameter of the form &quot;Version_&lt;id&gt;&quot; . The api
                downloads this version from the remote server and imports it in the local
                system.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <itemizedlist>
      <listitem>
        <para>This API should be used with utmost care. Please note that there is an alternate way to achieve sync in
          a completely automated manner by leveraging the Metadata Sync Task from the &quot;Data Administration&quot;
          app. See Chapter 22, Section 22.17 of User Manual for more details regarding Metadata Sync Task.</para>
      </listitem>
      <listitem>
        <para>This sync API can alternatively be used to sync metadata for the versions which have failed from the
          metadata sync scheduler.  Due to its dependence on the given metadata version number, care should be taken
          for the order in which this gets invoked. E.g. If this api is used to sync some higher version from central
          instance, then the sync might fail as the metadata dependencies are not present in the local instance.</para>
      </listitem>
      <listitem>
        <para>Assume the local instance is at Version_12 and if this api is used to sync Version_15 (of type
          BEST_EFFORT) from the central instance, the scheduler will start syncing metadata from Version_16. So the
          local instance will not have the metadata versions between Version_12 and Version_15. You need to manually
          sync the missing versions using this API only.</para>
      </listitem>
    </itemizedlist>
      <section xml:id="webapi_metadata_synchronization_version">
        <title>Sync metadata version</title>
        <para><emphasis role="bold">Example: Sync Version_6 from central system to this system</emphasis></para>
        <para><emphasis role="bold">Sample request:</emphasis>
          <screen>curl -u admin:district "https://play.dhis2.org/dev/api/metadata/sync?versionName=Version_6"</screen></para>
      </section>
  </section>
  <section xml:id="webapi_data_values">
    <title>Data values</title>
    <para>This section is about sending and reading data
      values.<screen>/api/26/dataValueSets</screen></para>
    <section xml:id="webapi_sending_data_values">
      <title>Sending data values</title>
      <para>A common use-case for system integration is the need to send a set of data values from a
        third-party system into DHIS. In this example we will use the DHIS2 demo on <link
          xl:href="http://play.dhis2.org/demo"/> as basis and we recommend that you follow the
        provided links with a web browser while reading (log in with <emphasis role="italic"
          >admin</emphasis><emphasis role="italic">/district</emphasis> as username/password). We
        assume that we have collected case-based data using a simple software client running on
        mobile phones for the <emphasis role="italic">Mortality &lt;5 years</emphasis> data set in
        the community of <emphasis role="italic">Ngelehun CHC</emphasis> (in <emphasis role="italic"
          >Badjia</emphasis> chiefdom, <emphasis role="italic">Bo</emphasis> district) for the month
        of January 2014. We have now aggregated our data into a statistical report and want to send
        that data to the national DHIS2 instance.</para>
      <para>The resource which is most appropriate for our purpose of sending data values is the
          <emphasis role="italic">dataValueSets</emphasis> resource. A data value set represents a
        set of data values which have a logical relationship, usually from being captured off the
        same data entry form. We follow the link to the HTML representation which will take us to
          <link xl:href="http://play.dhis2.org/demo/api/24/dataValueSets"/>. The format looks like
        this:</para>
      <screen language="xml">&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;dataSetID&quot;
  completeDate=&quot;date&quot; period=&quot;period&quot; orgUnit=&quot;orgUnitID&quot; attributeOptionCombo=&quot;aocID&quot;&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;1&quot; comment=&quot;comment1&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;2&quot; comment=&quot;comment2&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; categoryOptionCombo=&quot;cocID&quot; value=&quot;3&quot; comment=&quot;comment3&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>JSON is supported in this
        format:<screen>{
  &quot;dataSet&quot;: &quot;dataSetID&quot;,
  &quot;completeDate&quot;: &quot;date&quot;,
  &quot;period&quot;: &quot;period&quot;,
  &quot;orgUnit&quot;: &quot;orgUnitID&quot;,
  &quot;attributeOptionCombo&quot;, &quot;aocID&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;1&quot;, &quot;comment&quot;: &quot;comment1&quot; },
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;2&quot;, &quot;comment&quot;: &quot;comment2&quot; },
    { &quot;dataElement&quot;: &quot;dataElementID&quot;, &quot;categoryOptionCombo&quot;: &quot;cocID&quot;, &quot;value&quot;: &quot;3&quot;, &quot;comment&quot;: &quot;comment3&quot; }
  ]
}</screen></para>
      <para>CSV is supported in this
        format:<screen>&quot;dataelement&quot;,&quot;period&quot;,&quot;orgunit&quot;,&quot;catoptcombo&quot;,&quot;attroptcombo&quot;,&quot;value&quot;,&quot;storedby&quot;,&quot;lastupd&quot;,&quot;comment&quot;
&quot;dataElementID&quot;,&quot;period&quot;,&quot;orgUnitID&quot;,&quot;cocID&quot;,&quot;aocID&quot;,&quot;1&quot;,&quot;username&quot;,&quot;2015-04-01&quot;,&quot;comment1&quot;
&quot;dataElementID&quot;,&quot;period&quot;,&quot;orgUnitID&quot;,&quot;cocID&quot;,&quot;aocID&quot;,&quot;2&quot;,&quot;username&quot;,&quot;2015-04-01&quot;,&quot;comment2&quot;
&quot;dataElementID&quot;,&quot;period&quot;,&quot;orgUnitID&quot;,&quot;cocID&quot;,&quot;aocID&quot;,&quot;3&quot;,&quot;username&quot;,&quot;2015-04-01&quot;,&quot;comment3&quot;</screen></para>
      <para><emphasis role="italic">Note:</emphasis> Please refer to the date and period section
        above for time formats.</para>
      <para>From the example we can see that we need to identify the period, the data set, the org
        unit (facility) and the data elements for which to report.</para>
      <para>To obtain the identifier for the data set we return to the entry point at <link
          xl:href="http://play.dhis2.org/demo/api/24"/> and follow the embedded link pointing at the
          <emphasis role="italic">dataSets</emphasis> resource located at <link
          xl:href="http://play.dhis2.org/demo/api/24/dataSets"/>. From there we find and follow the
        link to the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set which leads
        us to <link xl:href="http://play.dhis2.org/demo/api/24/dataSets/pBOMPrpg1QX"/>. The resource
        representation for the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set
        conveniently advertises links to the data elements which are members of it. From here we can
        follow these links and obtain the identifiers of the data elements. For brevity we will only
        report on three data elements: <emphasis role="italic">Measles</emphasis> with id <emphasis
          role="italic">f7n9E0hX8qk</emphasis>, <emphasis role="italic">Dysentery</emphasis> with id
          <emphasis role="italic">Ix2HsbDMLea</emphasis> and <emphasis role="italic"
          >Cholera</emphasis> with id <emphasis role="italic">eY5ehpbEsB7</emphasis>.</para>
      <para>What remains is to get hold of the identifier of the facility (org unit). The <emphasis
          role="italic">dataSet</emphasis> representation conveniently provides link to org units
        which report on it so we search for<emphasis role="italic"> Ngelehun CHC</emphasis> and
        follow the link to the HTML representation at <link
          xl:href="http://play.dhis2.org/demo/api/24/organisationUnits/DiszpKrYNg8"/>, which tells
        us that the identifier of this org unit is <emphasis role="italic"
        >DiszpKrYNg8</emphasis>.</para>
      <para>From our case-based data we assume that we have 12 cases of measles, 14 cases of
        dysentery and 16 cases of cholera. We have now gathered enough information to be able to put
        together the XML data value set message:</para>
      <screen language="xml">&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2014-02-03&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; value=&quot;16&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>In JSON
        format:<screen language="json">{
  &quot;dataSet&quot;: &quot;pBOMPrpg1QX&quot;,
  &quot;completeData&quot;: &quot;2014-02-03&quot;,
  &quot;period&quot;: &quot;201401&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;value&quot;: &quot;1&quot; },
    { &quot;dataElement&quot;: &quot;Ix2HsbDMLea&quot;, &quot;value&quot;: &quot;2&quot; },
    { &quot;dataElement&quot;: &quot;eY5ehpbEsB7&quot;, &quot;value&quot;: &quot;3&quot; }
  ]
}</screen></para>
      <para>To perform functional testing we will use the cURL tool which provides an easy way of
        transferring data using HTTP. First we save the data value set XML content in a file called
          <emphasis role="italic">datavalueset.xml</emphasis> . From the directory where this file
        resides we invoke the following from the command line:</para>
      <screen>curl -d @datavalueset.xml &quot;https://play.dhis2.org/demo/api/26/dataValueSets&quot; 
  -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>For sending JSON content you must set the content-type header
        accordingly:<screen>curl -d @datavalueset.json &quot;https://play.dhis2.org/demo/api/26/dataValueSets&quot; 
  -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen></para>
      <para>The command will dispatch a request to the demo Web API, set <emphasis role="italic"
          >application/xml</emphasis> as the content-type and authenticate using admin/district as
        username/password. If all goes well this will return a <emphasis role="italic">200
          OK</emphasis> HTTP status code. You can verify that the data has been received by opening
        the data entry module in DHIS2 and select the org unit, data set and period used in this
        example.</para>
      <para>The API follows normal semantics for error handling and HTTP status codes. If you supply
        an invalid username or password, <emphasis role="italic">401 Unauthorized</emphasis> is
        returned. If you supply a content-type other than application/xml, <emphasis role="italic"
          >415 Unsupported Media Type</emphasis> is returned. If the XML content is invalid
        according to the DXF namespace, <emphasis role="italic">400 Bad Request</emphasis> is
        returned. If you provide an invalid identifier in the XML content, <emphasis role="italic"
          >409 Conflict</emphasis> is returned together with a descriptive message.</para>
    </section>
    <section xml:id="webapi_sending_bulks_data_values">
      <title>Sending bulks of data values</title>
      <para>The previous example showed us how to send a set of related data values sharing the same
        period and organisation unit. This example will show us how to send large bulks of data
        values which don&apos;t necessarily are logically related.</para>
      <para>Again we will interact with the with <link
          xl:href="http://play.dhis2.org/demo/api/24/dataValueSets"/> resource. This time we will
        not specify the dataSet and completeDate attributes. Also, we will specify the period and
        orgUnit attributes on the individual data value elements instead of on the outer data value
        set element. This will enable us to send data values for various periods and org
        units:</para>
      <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;FNnj3jKGS7i&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201402&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;16&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201402&quot; orgUnit=&quot;Jkhdsf8sdf4&quot; value=&quot;18&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>In JSON
        format:<screen>{
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201401&quot;, &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;12&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201401&quot;, &quot;orgUnit&quot;: &quot;FNnj3jKGS7i&quot;, &quot;value&quot;: &quot;14&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201402&quot;, &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;16&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;period&quot;: &quot;201402&quot;, &quot;orgUnit&quot;: &quot;Jkhdsf8sdf4&quot;, &quot;value&quot;: &quot;18&quot; }
  ]
}</screen></para>
      <para>In CSV
        format:<screen>&quot;dataelement&quot;,&quot;period&quot;,&quot;orgunit&quot;,&quot;categoryoptioncombo&quot;,&quot;attributeoptioncombo&quot;,&quot;value&quot;
&quot;f7n9E0hX8qk&quot;,&quot;201401&quot;,&quot;DiszpKrYNg8&quot;,&quot;bRowv6yZOF2&quot;,&quot;bRowv6yZOF2&quot;,&quot;1&quot;
&quot;Ix2HsbDMLea&quot;,&quot;201401&quot;,&quot;DiszpKrYNg8&quot;,&quot;bRowv6yZOF2&quot;,&quot;bRowv6yZOF2&quot;,&quot;2&quot;
&quot;eY5ehpbEsB7&quot;,&quot;201401&quot;,&quot;DiszpKrYNg8&quot;,&quot;bRowv6yZOF2&quot;,&quot;bRowv6yZOF2&quot;,&quot;3&quot;</screen></para>
      <para>We test by using cURL to send the data values in XML format:</para>
      <screen>curl -d @datavalueset.xml &quot;https://play.dhis2.org/demo/api/26/dataValueSets&quot; 
  -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>Note that when using CSV format you must use the binary data option to preserve the
        line-breaks in the CSV
        file:<screen>curl --data-binary @datavalueset.csv &quot;https://play.dhis2.org/demo/24/api/dataValueSets&quot; 
  -H &quot;Content-Type:application/csv&quot; -u admin:district -v</screen></para>
      <para>The data value set resource provides an XML response which is useful when you want to
        verify the impact your request had. The first time we send the data value set request above
        the server will respond with the following<emphasis role="italic"> import
        summary</emphasis>:</para>
      <screen>&lt;importSummary&gt;
  &lt;dataValueCount imported=&quot;2&quot; updated=&quot;1&quot; ignored=&quot;1&quot;/&gt;
  &lt;dataSetComplete&gt;false&lt;/dataSetComplete&gt;
&lt;/importSummary&gt;</screen>
      <para>This message tells us that 3 data values were imported, 1 data value was updated while
        zero data values were ignored. The single update comes as a result of us sending that data
        value in the previous example. A data value will be ignored if it references a non-existing
        data element, period, org unit or data set. In our case this single ignored value was caused
        by the last data value having an invalid reference to org unit. The data set complete
        element will display the date of which the data value set was completed, or false if no data
        element attribute was supplied.</para>
    </section>
    <section xml:id="webapi_data_values_import_parameters">
      <title>Import parameters</title>
      <para>The import process can be customized using a set of import parameters:</para>
      <table>
        <title>Import parameters</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Values (default first)</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>id | name | code |&#160;attribute:ID</entry>
              <entry>Property of the data element object to use to map the data values.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>id | name | code | attribute:ID</entry>
              <entry>Property of the org unit object to use to map the data values.</entry>
            </row>
            <row>
              <entry>idScheme</entry>
              <entry>id | name | code|&#160;attribute:ID</entry>
              <entry>Property of all objects including data elements, org units and category option
                combos, to use to map the data values.</entry>
            </row>
            <row>
              <entry>preheatCache</entry>
              <entry>false | true</entry>
              <entry>Indicates whether to preload metadata caches before starting to import data
                values, will speed up large import payloads with high metadata cardinality.</entry>
            </row>
            <row>
              <entry>dryRun</entry>
              <entry>false | true</entry>
              <entry>Whether to save changes on the server or just return the import
                summary.</entry>
            </row>
            <row>
              <entry>importStrategy</entry>
              <entry>CREATE |&#160;UPDATE |&#160;CREATE_AND_UPDATE |&#160;DELETE</entry>
              <entry>Save objects of all, new or update import status on the server.</entry>
            </row>
            <row>
              <entry>skipExistingCheck</entry>
              <entry>false | true</entry>
              <entry>Skip checks for existing data values. Improves performance. Only use for empty
                databases or when the data values to import do not exist already.</entry>
            </row>
            <row>
              <entry>async</entry>
              <entry>false | true</entry>
              <entry>Indicates whether the import should be done asynchronous or synchronous. The
                former is suitable for very large imports as it ensures that the request does not
                time out, although it has a significant performance overhead. The latter is faster
                but requires the connection to persist until the process is finished.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>All parameters are optional and can be supplied as query parameters in the request URL
        like this:</para>
      <screen>/api/26/dataValueSets?dataElementIdScheme=code&amp;orgUnitIdScheme=name&amp;dryRun=true&amp;importStrategy=CREATE</screen>
      <para>They can also be supplied as XML attributes on the data value set element like below.
        XML attributes will override query string parameters.</para>
      <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataElementIdScheme=&quot;code&quot;
  orgUnitIdScheme=&quot;name&quot; dryRun=&quot;true&quot; importStrategy=&quot;CREATE&quot;&gt;
  ..
&lt;/dataValueSet&gt;</screen>
      <para>Note that the <emphasis>preheatCache</emphasis> parameter can have huge impact for
        performance. For small import files, leaving it to false will be fast. For large import
        files which contain a large number of distint data elements and organisation units, setting
        it to true will be orders of magnitude faster.</para>
      <section xml:id="webapi_data_values_identifier_schemes">
        <title>Identifier schemes</title>
        <para>Regarding the id schemes, by default the identifiers used in the XML messages uses the
          DHIS2 stable object identifiers referred to as <emphasis role="italic">uid</emphasis>. In
          certain interoperability situations we might experience that external system decides the
          identifiers of the objects. In that case we can use the <emphasis role="italic"
            >code</emphasis> property of the organisation units and other objects to set fixed
          identifiers. When importing data values we hence need to reference the code property
          instead of the identfier property of these metadata objects. Identifier schemes can be
          specified in the XML message as well as in the request as query parameters. To specify it
          in the XML payload you can do this:</para>
        <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; 
  dataElementIdScheme=&quot;CODE&quot; orgUnitIdScheme=&quot;UID&quot; idScheme=&quot;CODE&quot;&gt;
  ..
&lt;/dataValueSet&gt;</screen>
        <para>The parameter table above explains how the id schemes can be specified as query
          parameters. The following rules apply for what takes precedence: <itemizedlist>
            <listitem>
              <para>Id schemes defined in the XML or JSON payload take precedence over id schemes
                defined as URL query parameters.</para>
            </listitem>
            <listitem>
              <para>Specific id schemes including dataElementIdScheme and orgUnitIdScheme take
                precedence over the general idScheme.</para>
            </listitem>
            <listitem>
              <para>The default id scheme is UID, which will be used if no explicit id scheme is
                defined.</para>
            </listitem>
          </itemizedlist></para>
        <para>The following identifier schemes are availabe.<itemizedlist>
            <listitem>
              <para>uid (default)</para>
            </listitem>
            <listitem>
              <para>code</para>
            </listitem>
            <listitem>
              <para>name</para>
            </listitem>
            <listitem>
              <para>attribute (followed by UID of attribute)</para>
            </listitem>
          </itemizedlist></para>
        <para>The attribute option is special and refers to meta-data attributes which have been
          marked as &quot;unique&quot;. When using this option, &quot;attribute&quot; must be
          immediately followed by the uid of the attribute, e.g.
          &quot;attributeDnrLSdo4hMl&quot;.</para>
      </section>
    </section>
    <section xml:id="webapi_data_values_csv">
      <title>CSV data value format</title>
      <para>The following section describes the CSV format used in DHIS2. The first row is assumed
        to be a header row and will be ignored during import.</para>
      <para>
        <table>
          <title>CSV format of DHIS2</title>
          <tgroup cols="3">
            <tbody>
              <row>
                <entry>Column</entry>
                <entry>Required</entry>
                <entry>Description</entry>
              </row>
              <row>
                <entry>Data element</entry>
                <entry>Yes</entry>
                <entry>Refers to ID by default, can also be name and code based on selected id
                  scheme</entry>
              </row>
              <row>
                <entry>Period</entry>
                <entry>Yes</entry>
                <entry>In ISO format</entry>
              </row>
              <row>
                <entry>Org unit</entry>
                <entry>Yes</entry>
                <entry>Refers to ID by default, can also be name and code based on selected id
                  scheme</entry>
              </row>
              <row>
                <entry>Category option combo</entry>
                <entry>No</entry>
                <entry>Refers to ID</entry>
              </row>
              <row>
                <entry>Attribute option combo</entry>
                <entry>No</entry>
                <entry>Refers to ID (from version 2.16)</entry>
              </row>
              <row>
                <entry>Value</entry>
                <entry>No</entry>
                <entry>Data value</entry>
              </row>
              <row>
                <entry>Stored by</entry>
                <entry>No</entry>
                <entry>Refers to username of user who entered the value</entry>
              </row>
              <row>
                <entry>Last updated</entry>
                <entry>No</entry>
                <entry>Date in ISO format</entry>
              </row>
              <row>
                <entry>Comment</entry>
                <entry>No</entry>
                <entry>Free text comment</entry>
              </row>
              <row>
                <entry>Follow up</entry>
                <entry>No</entry>
                <entry>true or false</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>An example of a CSV file which can be imported into DHIS2 is seen below.</para>
      <screen>&quot;dataelement&quot;,&quot;period&quot;,&quot;orgunit&quot;,&quot;categoryoptioncombo&quot;,&quot;attroptioncombo&quot;,&quot;value&quot;,&quot;storedby&quot;,&quot;timestamp&quot;
&quot;DUSpd8Jq3M7&quot;,&quot;201202&quot;,&quot;gP6hn503KUX&quot;,&quot;Prlt0C1RF0s&quot;,,&quot;7&quot;,&quot;bombali&quot;,&quot;2010-04-17&quot;
&quot;DUSpd8Jq3M7&quot;,&quot;201202&quot;,&quot;gP6hn503KUX&quot;,&quot;V6L425pT3A0&quot;,,&quot;10&quot;,&quot;bombali&quot;,&quot;2010-04-17&quot;
&quot;DUSpd8Jq3M7&quot;,&quot;201202&quot;,&quot;OjTS752GbZE&quot;,&quot;V6L425pT3A0&quot;,,&quot;9&quot;,&quot;bombali&quot;,&quot;2010-04-06&quot;</screen>
    </section>
    <section xml:id="webapi_data_values_template">
      <title>Generating data value set template</title>
      <para>To generate a data value set template for a certain data set you can use the <emphasis
          role="italic">/api/dataSets/&lt;id&gt;/dataValueSet</emphasis> resource. XML and JSON
        response formats are supported. Example:</para>
      <screen>/api/26/dataSets/BfMAe6Itzgt/dataValueSet.json</screen>
      <para>The parameters you can use to further adjust the output are described below:</para>
      <table frame="all">
        <title>Data values query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.23*"/>
          <colspec colnum="3" colname="c3" colwidth="4.08*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>period</entry>
              <entry>No</entry>
              <entry>Period to use, will be included without any checks.</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>No</entry>
              <entry>Organisation unit to use, supports multiple orgUnits, both id and code can be
                used.</entry>
            </row>
            <row>
              <entry>comment</entry>
              <entry>No</entry>
              <entry>Should comments be include, default: Yes.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>No</entry>
              <entry>Organisation unit scheme to use, supports id | code.</entry>
            </row>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>No</entry>
              <entry>Data-element scheme to use, supports id | code.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="webapi_reading_data_values">
      <title>Reading data values</title>
      <para>This section explains how to retrieve data values from the Web API by interacting with
        the <emphasis role="italic">dataValueSets</emphasis> resource. Data values can be retrieved
        in <emphasis role="italic">XML</emphasis>, <emphasis role="italic">JSON</emphasis> and
          <emphasis role="italic">CSV</emphasis> format. Since we want to read data we will use the
          <emphasis role="italic">GET</emphasis> HTTP verb. We will also specify that we are
        interested in the XML resource representation by including an <emphasis role="italic"
          >Accept</emphasis> HTTP header with our request. The following query parameters are
        required:</para>
      <table frame="all">
        <title>Data value set query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.69*"/>
          <thead>
            <row>
              <entry> Parameter </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataSet</entry>
              <entry>Data set identifier. Can be repeated any number of times.</entry>
            </row>
            <row>
              <entry>dataElementGroup</entry>
              <entry>Data element group identifier. Can be repeated any number of times.</entry>
            </row>
            <row>
              <entry>period</entry>
              <entry>Period identifier in ISO format. Can be repeated any number of times.</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>Start date for the time span of the values to export.</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>End date for the time span of the values to export.</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>Organisation unit identifier. Can be repeated any number of times.</entry>
            </row>
            <row>
              <entry>children</entry>
              <entry>Whether to include the children in the hierarchy of the organisation
                units.</entry>
            </row>
            <row>
              <entry>orgUnitGroup</entry>
              <entry>Organisation unit group identifier. Can be repeated any number of times.</entry>
            </row>
            <row>
              <entry>includeDeleted</entry>
              <entry>Whether to include deleted data values.</entry>
            </row>
            <row>
              <entry>lastUpdated</entry>
              <entry>Include only data values which are updated since the given time stamp.</entry>
            </row>
            <row>
              <entry>lastUpdatedDuration</entry>
              <entry>Include only data values which are updated within the given duration. The
                format is &lt;value>&lt;time-unit>, where the supported time units are "d" (days),
                "h" (hours), "m" (minutes) and "s" (seconds).</entry>
            </row>
            <row>
              <entry>limit</entry>
              <entry>The max number of results in the response.</entry>
            </row>
            <row>
              <entry>idScheme</entry>
              <entry>Property of meta data objects to use for data values in response.</entry>
            </row>
            <row>
              <entry>dataElementIdScheme</entry>
              <entry>Property of the data element object to use for data values in response.</entry>
            </row>
            <row>
              <entry>orgUnitIdScheme</entry>
              <entry>Property of the org unit object to use for data values in response.</entry>
            </row>
            <row>
              <entry>categoryOptionComboIdScheme</entry>
              <entry>Property of the category option combo object to use for data values in
                response.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The following response formats are supported:</para>
      <itemizedlist>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>adx (application/xml+adx)</para>
        </listitem>
      </itemizedlist>
      <para>Assuming that we have posted data values to DHIS2 according to the previous section
        called &quot;Sending data values&quot; we can now put together our request for a single data
        value set and request it using cURL:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8&quot;
  -H &quot;Accept:application/xml&quot; -u admin:district -v</screen>
      <para>We can also use the start and end dates query parameters to request a larger bulk of
        data values. I.e. you can also request data values for multiple data sets and org units and
        a time span in order to export larger chunks of data. Note that the period query parameter
        takes presedence over the start and end date parameters. An exampe looks like this:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&amp;dataSet=BfMAe6Itzgt
  &amp;startDate=2013-01-01&amp;endDate=2013-01-31&amp;orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true&quot; 
  -H &quot;Accept:application/xml&quot; -u admin:district -v</screen>
      <para>To retrieve data values which have been created or updated within the last 10 days you
        can make a request like this:</para>
      <screen>https://play.dhis2.org/demo/api/26/dataValueSets?dataSet=pBOMPrpg1QX&amp;orgUnit=DiszpKrYNg8&amp;lastUpdatedDuration=10d</screen>
      <para>The response will look like this:</para>
      <screen>&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2014-01-02&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
&lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10003&quot;/&gt;
&lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10002&quot;/&gt;
&lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201401&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10001&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
      <para>You can request the data in JSON format like
        this:<screen>https://play.dhis2.org/demo/api/26/dataValueSets.json?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8</screen></para>
      <para>The response will look something like
        this:<screen>{
  &quot;dataSet&quot;: &quot;pBOMPrpg1QX&quot;,
  &quot;completeData&quot;: &quot;2014-02-03&quot;,
  &quot;period&quot;: &quot;201401&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;eY5ehpbEsB7&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10003&quot; },
    { &quot;dataElement&quot;: &quot;Ix2HsbDMLea&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10002&quot; },
    { &quot;dataElement&quot;: &quot;f7n9E0hX8qk&quot;, &quot;categoryOptionCombo&quot;: &quot;bRowv6yZOF2&quot;, &quot;period&quot;: &quot;201401&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;, &quot;value&quot;: &quot;10001&quot; }
  ]
}</screen></para>
      <para>Note that data values are softly deleted, i.e. a deleted value has the
          <emphasis>deleted</emphasis> property set to true instead of being permanently deleted.
        This is useful when integrating multiple systems in order to communicate deletions. You can
        include deleted values in the response like
        this:<screen>/api/26/dataValueSets.json?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8&amp;includeDeleted=true</screen></para>
      <para>You can also request data in CSV format like
        this:<screen>https://play.dhis2.org/demo/api/26/dataValueSets.csv?dataSet=pBOMPrpg1QX&amp;period=201401&amp;orgUnit=DiszpKrYNg8</screen></para>
      <para>The response will look like
        this:<screen>dataelement,period,orgunit,categoryoptioncombo,attributeoptioncombo,value,storedby,lastupdated,comment,followup
f7n9E0hX8qk,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,system,2015-04-05T19:58:12.000,comment1,false
Ix2HsbDMLea,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,14,system,2015-04-05T19:58:12.000,comment2,false
eY5ehpbEsB7,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,16,system,2015-04-05T19:58:12.000,comment3,false
FTRrcoaog83,201401,DiszpKrYNg8,bRowv6yZOF2,bRowv6yZOF2,12,system,2014-03-02T21:45:05.519,comment4,false</screen></para>
      <para>The following constraints apply to the data value sets resource:<itemizedlist>
          <listitem>
            <para>At least one data set must be specified.</para>
          </listitem>
          <listitem>
            <para>Either at least one period or a start date and end date must be specified.</para>
          </listitem>
          <listitem>
            <para>At least one organisation unit must be specified.</para>
          </listitem>
          <listitem>
            <para>Organisation units must be within the hierarchy of the organisation units of the
              authenticated user.</para>
          </listitem>
          <listitem>
            <para>Limit cannot be less than zero.</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section xml:id="webapi_sending_individual_data_values">
      <title>Sending, reading and deleting individual data values</title>
      <para>This example will show how to send individual data values to be saved in a request. This
        can be achieved by sending a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">dataValues</emphasis> resource:</para>
      <screen>https://play.dhis2.org/demo/api/26/dataValues</screen>
      <para>The following query parameters are supported for this resource:</para>
      <table frame="all">
        <title>Data values query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.23*"/>
          <colspec colnum="3" colname="c3" colwidth="4.08*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>de</entry>
              <entry>Yes</entry>
              <entry>Data element identifier</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Yes</entry>
              <entry>Period identifier</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Yes</entry>
              <entry>Organisation unit identifier</entry>
            </row>
            <row>
              <entry>co</entry>
              <entry>No</entry>
              <entry>Category option combo identifier, default will be used if omitted</entry>
            </row>
            <row>
              <entry>cc</entry>
              <entry>No (must combine with cp)</entry>
              <entry>Attribute combo identifier</entry>
            </row>
            <row>
              <entry>cp</entry>
              <entry>No (must combine with cc)</entry>
              <entry>Attribute option identifiers, separated with ; for multiple values</entry>
            </row>
            <row>
              <entry>value</entry>
              <entry>No</entry>
              <entry>Data value</entry>
            </row>
            <row>
              <entry>comment</entry>
              <entry>No</entry>
              <entry>Data comment</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>No</entry>
              <entry>Follow up on data value, will toggle the current boolean value</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>If any of the identifiers given are invalid, if the data value or comment are invalid or
        if the data is locked, the response will contain the <emphasis role="italic">409
          Conflict</emphasis> status code and descriptive text message. If the operation lead to a
        saved or updated value, <emphasis role="italic">200 OK</emphasis> will be returned. An
        example of a request looks like this:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu
  &amp;pe=201301&amp;ou=DiszpKrYNg8&amp;co=Prlt0C1RF0s&amp;value=12&quot;
  -X POST -u admin:district -v</screen>
      <para>This resource also allows a special syntax for associating the value to an attribute
        option combination. This can be done by sending the identifier of the attribute combination,
        together with the identifier(s) of the attribute option(s) which the value represents within
        the combination. An example looks like this:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu&amp;ou=DiszpKrYNg8
  &amp;pe=201308&amp;cc=dzjKKQq0cSO&amp;cp=wbrDrL2aYEc;btOyqprQ9e8&amp;value=26&quot;
  -X POST -u admin:district -v</screen>
      <para>You can retrieve a data value with a request using the <emphasis role="italic"
          >GET</emphasis> method. The value, comment and followUp params are not applicable in this
        regard:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/dataValues?de=s46m5MS0hxu
  &amp;pe=201301&amp;ou=DiszpKrYNg8&amp;co=Prlt0C1RF0s&quot;
  -X GET -u admin:district -v</screen>
      <para>You can delete a data value with a request using the <emphasis role="italic"
          >DELETE</emphasis> method. </para>
      <section xml:id="datavalue_file">
        <title>Working with file data values</title>
        <para>When dealing with data values which have a data element of type <emphasis
            role="italic">file</emphasis> there is some deviation from the method described above.
          These data values are special in that the contents of the value is a UID reference to a
            <emphasis role="italic">FileResource</emphasis> object instead of a self-contained
          constant. These data values will behave just like other data values which store text
          content, but should be handled differently in order to produce meaningful input and
          output.</para>
        <para>The process of storing one of these data values roughly goes like this:<orderedlist>
            <listitem>
              <para>Upload the file to the <emphasis role="italic">/api/26/fileResources</emphasis>
                endpoint as described in the file resource section.</para>
            </listitem>
            <listitem>
              <para>Retrieve the &apos;id&apos; property of the returned <emphasis role="italic"
                  >FileResource</emphasis>.</para>
            </listitem>
            <listitem>
              <para>Store the retrieved id <emphasis role="bold">as the value</emphasis> to the data
                value using any of the methods described above.</para>
            </listitem>
          </orderedlist></para>
        <para>Only one-to-one relationships between data values and file resources are allowed. This
          is enforced internally so that saving a file resource id in several data values is not
          allowed and will return an error. Deleting the data value will delete the referenced file
          resource. Direct deletion of file resources are not possible.</para>
        <para>The data value can now be retrieved as any other but the returned data will be the UID
          of the file resource. In order to retrieve the actual contents (meaning the file which is
          stored in the file resource mapped to the data value) a GET request must be made to
            <emphasis role="italic">api/dataValues/files</emphasis> mirroring the query parameters
          as they would be for the data value itself. The <emphasis role="italic"
            >dataValues/files</emphasis> endpoint only supports GET requests.</para>
        <para>It is worth noting that due to the underlying storage mechanism working asynchronously
          the file content might not be immediately ready for download from the <emphasis
            role="italic">dataValues/files</emphasis> endpoint. This is especially true for large
          files which might require time consuming uploads happening in the background to a an
          external file store (depending on the system configuration). Retrieving the file resource
          meta-data from the <emphasis role="italic">api/fileResources/&lt;id&gt;</emphasis>
          endpoint allows checking the <emphasis role="italic">storageStatus</emphasis> of the
          content before attempting to download it.</para>
      </section>
    </section>
  </section>
  <section xml:id="webapi_adx_data_format">
    <title>ADX data format</title>
    <para>From version 2.20 we have included support for an international standard for aggregate
      data exchange called ADX. ADX is developed and maintained by the Quality Research and Public
      Health committee of the IHE (Integerating the HealthCare Enterprise). The wiki page detailing
      QRPH activity can be found at <link
        xl:href="http://wiki.ihe.net/index.php?title=Quality,_Research_and_Public_Health#Current_Domain_Activities"
        >wiki.ihe.net</link>. ADX is still under active development and has now been published for
      trial implementation. Note that what is implemented currently in DHIS2 is the functionality
      to read and write adx formatted data, i.e. what is described as Content Consumer and Content
      Producer actors in the ADX profile.</para>
    <para>The structure of an ADX data message is quite similar to what you might already be
      familiar with from DXF 2 data described earlier. There are a few important differences. We
      will describe these differences with reference to a small example:
      <screen>&lt;adx xmlns=&quot;urn:ihe:qrph:adx:2015&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;urn:ihe:qrph:adx:2015 ../schema/adx_loose.xsd&quot; exported=&quot;2015-02-08T19:30:00Z&quot;&gt;

  &lt;group orgUnit=&quot;OU_559&quot; period=&quot;2015-06-01/P1M&quot; completeDate=&quot;2015-07-01&quot; dataSet=&quot;(TB/HIV)VCCT&quot;&gt;

    &lt;dataValue dataElement=&quot;VCCT_0&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;32&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_1&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;20&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_2&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_0&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_1&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;

    &lt;dataValue dataElement=&quot;VCCT_0&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;32&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_1&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;20&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_2&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_0&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_1&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE0-14&quot; value=&quot;10&quot;/&gt;

    &lt;dataValue dataElement=&quot;VCCT_0&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;32&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_1&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;20&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_2&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_0&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_1&quot; GENDER=&quot;FMLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;

    &lt;dataValue dataElement=&quot;VCCT_0&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;32&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_1&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;20&quot;/&gt;
    &lt;dataValue dataElement=&quot;VCCT_2&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_0&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;
    &lt;dataValue dataElement=&quot;PLHIV_TB_1&quot; GENDER=&quot;MLE&quot; HIV_AGE=&quot;AGE15-24&quot; value=&quot;10&quot;/&gt;

  &lt;/group&gt;
&lt;/adx&gt;</screen>
    </para>
    <section>
      <title>The adx root element</title>
      <para>The adx root element has only one manadatory attribute, which is the
          <emphasis>exported</emphasis> timestamp. In common with other adx elements, the schema is
        extensible in that it does not restrict additional application specific attributes.</para>
    </section>
    <section>
      <title>The group element</title>
      <para>Unlike dxf2, adx requires that the datavalues are grouped according to orgUnit, period
        and dataSet. The example above shows a data report for the &quot;(TB/HIV) VCCT&quot; dataset
        from the online demo database. This example is using codes as identifiers instead of dhis2
        uids. Codes are the preferred form of identifiier when using adx.</para>
      <para>The orgUnit, period and dataSet attributes are mandatory in adx. The group element may
        contain additional attributes. In our DHIS2 implementation any additional attributes are
        simply passed through to the underlying importer. This means that all attributes which
        currently have meaning in dxf2 (such as completeDate in the example above) can continue be
        used in adx and they will be processed in the same way.</para>
      <para>A significant difference between adx and dxf2 is in the way that periods are encoded.
        Adx makes strict use of ISO8601 and encodes the reporting period as
        (date|datetime)/(duration). So the period in the example above is a period of 1 month (P1M)
        starting on 2015-06-01. So it is the data for June 2015. The notation is a bit more verbose,
        but it is very flexible and allows us to support all existing period types in DHIS2</para>
    </section>
    <section>
      <title>Data values</title>
      <para>The dataValue element in adx is very similar to its equivalent in DXF. The mandatory
        attributes are <emphasis>dataElement</emphasis> and <emphasis>value</emphasis>.
          <emphasis>orgUnit</emphasis> and <emphasis>period</emphasis> attributes don&apos;t appear
        in the dataValue as they are required at the <emphasis>group</emphasis> level.</para>
      <para>The most significant difference is the way that disaggregation is represented. DXF uses
        the categoryOptionCombo to indicate disaggregation of data. In adx the disaggregations (eg
        AGE_GROUP and SEX) are expressed explicitly as attributes. One important constraint on using
        adx is that the categories used for dataElements in the dataSet MUST have a code assigned to
        them, and further, that code must be of a form which is suitable for use as an XML
        attribute. The exact constraint on an XML attribute name is described in the W3C XML
        standard - in practice this means no spaces, no non-alphanumeric chracters other than
        &apos;_&apos; and it may not start with a letter. The example above shows examples of
        &apos;good&apos; category codes (&apos;GENDER&apos; and &apos;HIV_AGE&apos;).</para>
      <para>This restriction on the form of codes applies only to categories. Currently the
        convention is not enforced by DHIS2 when you are assigning codes, but you will get an
        informative error message if you try to import adx data and the category codes are either
        not assigned or not suitable.</para>
      <para>The main benefits of using explicit dimensions of disaggregated data are that <itemizedlist>
          <listitem>
            <para>The system producing the data does not have to be synched with the
              categoryOptionCombo within DHIS2.</para>
          </listitem>
          <listitem>
            <para>The producer and consumer can match their codes to a 3rd party authoritative
              source, such as a vterminology service. Note that in the example above the Gender and
              AgeGroup codes are using code lists from the <link
                xl:href="http://apps.who.int/gho/data/node.resources.api">WHO Global Health
                Observatory</link>.</para>
          </listitem>
        </itemizedlist></para>
      <para>Note that this feature may be extremely useful, for example when producing disaggregated
        data from an EMR system, but there may be cases where a
          <emphasis>categoryOptionCombo</emphasis> mapping is easier or more desirable. The DHIS2
        implementation of adx will check for the existence of a
          <emphasis>categoryOptionCombo</emphasis> attribute and, if it exists, it will use that it
        preference to exploded dimension attributes. Similarly, an
          <emphasis>attributeOptionCombo</emphasis> attribute on the <emphasis>group</emphasis>
        element will be processed in the legacy way. Otherwise the attributeOptionCombo can be
        treated as exploded categories just as on the <emphasis>dataValue</emphasis>.</para>
      <para>In the simple example above, each of the dataElements in the dataSet have the same
        dimensionality (categorycombo) so the data is neatly rectangular. This need not be the case.
        dataSets may contain dataElements with different categoryCombos, resulting in a
          <emphasis>ragged-right</emphasis> adx data message.</para>
    </section>
    <section>
      <title>Importing data - HTTP POST</title>
      <para>DHIS2 exposes an endpoint for POST adx data at <emphasis>/api/dataValueSets</emphasis>
        using <emphasis role="italic">application/xml+adx</emphasis> as content type. So, for
        example, the following curl command can be used to POST the example data above to the DHIS2
        demo server:
        <screen>curl -u admin:district -X POST -H &quot;Content-Type: application/xml+adx&quot;
-d @data.xml &quot;https://play.dhis2.org/demo/api/26/dataValueSets?dataElementIdScheme=code&amp;orgUnitIdScheme=code&quot;</screen>
        Note the query parameters are the same as are used with DXF data. The adx endpoint should
        interpret all the existing DXF parameters with the same semantics as DXF.</para>
    </section>
    <section>
      <title>Exporting data - HTTP GET</title>
      <para>DHIS2 exposes an endpoint to GET adx data sets at
          <emphasis>/api/dataValueSets</emphasis> using <emphasis role="italic"
          >application/xml+adx</emphasis> as the accepted content type. So, for example, the
        following curl command can be used to retrieve the adx data:
        <screen>curl -u admin:district -X POST -H &quot;Accept: application/xml+adx&quot;
 &quot;https://play.dhis2.org/demo/api/26/dataValueSets?dataValueSets?orgUnit=M_CLINIC&amp;dataSet=MALARIA&amp;period=201501&quot;</screen>
        Note the query parameters are the same as are used with DXF data. An important difference is
        that the identifiers for dataSet and orgUnit are assumed to be codes rather than
        uids.</para>
    </section>
  </section>
  <section xml:id="webapi_events">
    <title>Events</title>
    <para>This section is about sending and reading events.<screen>/api/26/events</screen></para>
    <section xml:id="webapi_sending_events">
      <title>Sending events</title>
      <para>DHIS2 supports three kinds of events: single events with no registration (also referred
        to as anonymous events), single event with registration and multiple events with
        registration. Registration implies that the data is linked to a tracked entity instance
        which is identified using some sort of identifier.</para>
      <para>To send events to DHIS2 you must interact with the <emphasis role="italic"
          >events</emphasis> resource. The approach to sending events is similar to sending
        aggregate data values. You will need a <emphasis role="italic">program</emphasis> which can
        be looked up using the <emphasis role="italic">programs</emphasis> resource, an <emphasis
          role="italic">orgUnit</emphasis> which can be looked up using the <emphasis role="italic"
          >organisationUnits</emphasis> resource, and a list of valid data element identifiers which
        can be looked up using the <emphasis role="italic">dataElements</emphasis> resource. For
        events with registration, a <emphasis role="italic">tracked entity instance</emphasis>
        identifier is required, read about how to get this in the section about the <emphasis
          role="italic">trackedEntityInstances</emphasis> resource. For sending events to programs
        with multiple stages, you will need to also include the <emphasis role="italic"
          >programStage</emphasis> identifier, the identifiers for programStages can be found in the
          <emphasis role="italic">programStages</emphasis> resource.</para>
      <para>A simple single event with no registration example payload in XML format where we send
        events from the &quot;Inpatient morbidity and mortality&quot; program for the &quot;Ngelehun
        CHC&quot; facility in the demo database can be seen below:</para>
      <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
  eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
  &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
  &lt;dataValues&gt;
    &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;22&quot; /&gt;
    &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Male&quot; /&gt;
    &lt;dataValue dataElement=&quot;msodh3rEMJa&quot; value=&quot;2013-05-18&quot; /&gt;
  &lt;/dataValues&gt;
&lt;/event&gt;</screen>
      <para>To perform some testing we can save the XML payload as a file called<emphasis
          role="italic"> event.xml</emphasis> and send it as a POST request to the events resource
        in the API using curl with the following command:</para>
      <screen>curl -d @event.xml &quot;https://play.dhis2.org/demo/api/26/events&quot; 
  -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
      <para>The same payload in JSON format looks like this:</para>
      <screen>{
  &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;eventDate&quot;: &quot;2013-05-17&quot;,
  &quot;status&quot;: &quot;COMPLETED&quot;,
  &quot;storedBy&quot;: &quot;admin&quot;,
  &quot;coordinate&quot;: {
    &quot;latitude&quot;: 59.8,
    &quot;longitude&quot;: 10.9
  },
  &quot;dataValues&quot;: [
    { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;22&quot; },
    { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Male&quot; },
    { &quot;dataElement&quot;: &quot;msodh3rEMJa&quot;, &quot;value&quot;: &quot;2013-05-18&quot; }
  ]
}</screen>
      <para>To send this you can save it to a file called <emphasis role="italic"
          >event.json</emphasis> and use curl like this:</para>
      <screen>curl -d @event.json &quot;localhost/api/26/events&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
      <para>We also support sending multiple events at the same time. A payload in XML format might
        look like this: </para>
      <screen>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;events&gt;
    &lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
      eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
      &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
      &lt;dataValues&gt;
        &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;22&quot; /&gt;
        &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Male&quot; /&gt;
      &lt;/dataValues&gt;
    &lt;/event&gt;
    &lt;event program=&quot;eBAyeGv0exc&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
      eventDate=&quot;2013-05-17&quot; status=&quot;COMPLETED&quot; storedBy=&quot;admin&quot;&gt;
      &lt;coordinate latitude=&quot;59.8&quot; longitude=&quot;10.9&quot; /&gt;
      &lt;dataValues&gt;
        &lt;dataValue dataElement=&quot;qrur9Dvnyt5&quot; value=&quot;26&quot; /&gt;
        &lt;dataValue dataElement=&quot;oZg33kd9taw&quot; value=&quot;Female&quot; /&gt;
      &lt;/dataValues&gt;
    &lt;/event&gt;
&lt;/events&gt;</screen>
      <para>You will receive an import summary with the response which can be inspected in order to
        get information about the outcome of the request, like how many values were imported
        successfully. The payload in JSON format looks like this:</para>
      <screen>{
  &quot;events&quot;: [
  {
    &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
    &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
    &quot;eventDate&quot;: &quot;2013-05-17&quot;,
    &quot;status&quot;: &quot;COMPLETED&quot;,
    &quot;storedBy&quot;: &quot;admin&quot;,
    &quot;coordinate&quot;: {
      &quot;latitude&quot;: &quot;59.8&quot;,
      &quot;longitude&quot;: &quot;10.9&quot;
    },
    &quot;dataValues&quot;: [
      { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;22&quot; },
      { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Male&quot; }
    ] },
  {
    &quot;program&quot;: &quot;eBAyeGv0exc&quot;,
    &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
    &quot;eventDate&quot;: &quot;2013-05-17&quot;,
    &quot;status&quot;: &quot;COMPLETED&quot;,
    &quot;storedBy&quot;: &quot;admin&quot;,
    &quot;coordinate&quot;: {
      &quot;latitude&quot;: &quot;59.8&quot;,
      &quot;longitude&quot;: &quot;10.9&quot;
    },
    &quot;dataValues&quot;: [
      { &quot;dataElement&quot;: &quot;qrur9Dvnyt5&quot;, &quot;value&quot;: &quot;26&quot; },
      { &quot;dataElement&quot;: &quot;oZg33kd9taw&quot;, &quot;value&quot;: &quot;Female&quot; }
    ] }
  ]
}</screen>
      <para>As part of the import summary you will also get the identifier <emphasis role="italic"
          >reference</emphasis> to the event you just sent, together with a <emphasis role="italic"
          >href</emphasis> element which points to the server location of this event. The table
        below describes the meaning of each element.</para>
      <table>
        <title>Events resource format</title>
        <tgroup cols="5">
          <colspec colnum="1" colname="c1" colwidth="140pt"/>
          <colspec colnum="2" colname="c2" colwidth="88pt"/>
          <colspec colnum="3" colname="c3" colwidth="84pt"/>
          <colspec colnum="4" colname="c4" colwidth="315pt"/>
          <colspec colnum="5" colname="c5" colwidth="394pt"/>
          <thead>
            <row>
              <entry> Parameter </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first)</entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>program</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of the single event with no registration program</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of the organisation unit where the event took place</entry>
            </row>
            <row>
              <entry>eventDate</entry>
              <entry>date</entry>
              <entry>true</entry>
              <entry/>
              <entry>The date of when the event occured</entry>
            </row>
            <row>
              <entry>status</entry>
              <entry>enum</entry>
              <entry>false</entry>
              <entry>ACTIVE |&#160;COMPLETED |&#160;VISITED | SCHEDULE |&#160;OVERDUE
                |&#160;SKIPPED</entry>
              <entry>Whether the event is complete or not</entry>
            </row>
            <row>
              <entry>storedBy</entry>
              <entry>string</entry>
              <entry>false</entry>
              <entry>Defaults to current user</entry>
              <entry>Who stored this event (can be username, system-name etc)</entry>
            </row>
            <row>
              <entry>coordinate</entry>
              <entry>double</entry>
              <entry>false</entry>
              <entry/>
              <entry>Refers to wher the event took place geographically (latitude and
                longitude)</entry>
            </row>
            <row>
              <entry>dataElement</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of data element</entry>
            </row>
            <row>
              <entry>value</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Data value or measure for this event</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para><emphasis role="bold">OrgUnit matching</emphasis>: By default the orgUnit parameter will
        match on the ID, you can also select the orgUnit id matching scheme by using the parameter
        orgUnitIdScheme=SCHEME, where the options are: <emphasis role="italic">ID</emphasis>,
          <emphasis role="italic">UID</emphasis>, <emphasis role="italic">UUID</emphasis>, <emphasis
          role="italic">CODE</emphasis>, and <emphasis role="italic">NAME</emphasis>. There is also
        the <emphasis role="italic">ATTRIBUTE:</emphasis> scheme, which matches on a <emphasis
          role="italic">unique</emphasis> metadata attribute value.</para>
      <para><emphasis role="bold">Update</emphasis>: To update an existing event, the format of the
        payload is the same, but the URL you are posting to must add the identifier to the end of
        the URL string and the request must be PUT.
        <screen>curl -X PUT -d @updated_event.xml &quot;localhost/api/26/events/ID&quot; 
  -H &quot;Content-Type: application/xml&quot; -u admin:district</screen><screen>curl -X PUT -d @updated_event.json &quot;localhost/api/26/events/ID&quot; 
  -H &quot;Content-Type: application/json&quot; -u admin:district</screen></para>
      <para><emphasis role="bold">Delete</emphasis>: To delete an existing event, all you need is to
        send a DELETE request with a identifier reference to the server you are
        using.<screen>curl -X DELETE &quot;localhost/api/26/events/ID&quot; -u admin:district</screen></para>
      <para><emphasis role="bold">Get</emphasis>: To get an existing event you can issue a GET
        request including the identifier like
        this:<screen>curl &quot;localhost/api/26/events/ID&quot; -H &quot;Content-Type: application/xml&quot; -u admin:district</screen></para>
      <section>
        <title>Import parameters</title>
        <para>The import process can be customized using a set of import parameters:</para>
        <table>
          <title>Import parameters</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry> Parameter </entry>
                <entry> Values (default first) </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>dataElementIdScheme</entry>
                <entry>id | name | code |&#160;attribute:ID</entry>
                <entry>Property of the data element object to use to map the data values.</entry>
              </row>
              <row>
                <entry>orgUnitIdScheme</entry>
                <entry>id | name | code | attribute:ID</entry>
                <entry>Property of the org unit object to use to map the data values.</entry>
              </row>
              <row>
                <entry>idScheme</entry>
                <entry>id | name | code|&#160;attribute:ID</entry>
                <entry>Property of all objects including data elements, org units and category
                  option combos, to use to map the data values.</entry>
              </row>
              <row>
                <entry>dryRun</entry>
                <entry>false | true</entry>
                <entry>Whether to save changes on the server or just return the import
                  summary.</entry>
              </row>
              <row>
                <entry>importStrategy</entry>
                <entry>CREATE |&#160;UPDATE |&#160;CREATE_AND_UPDATE |&#160;DELETE</entry>
                <entry>Save objects of all, new or update import status on the server.</entry>
              </row>
              <row>
                <entry>skipNotifications</entry>
                <entry>true | false</entry>
                <entry>Indicates whether to send notifications for completed events.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
    <section xml:id="webapi_events_csv_import_export">
      <title>CSV Import / Export</title>
      <para>In addition to XML and JSON for event import/export, in DHIS2.17 we introduced support
        for the CSV format. Support for this format builds on what was described in the last
        section, so here we will only write about what the CSV specific parts are.</para>
      <para>To use the CSV format you must either use the <emphasis role="italic"
          >/api/events.csv</emphasis> endpoint, or add <emphasis role="italic">content-type:
          text/csv</emphasis> for import, and <emphasis role="italic">accept: text/csv</emphasis>
        for export when using the <emphasis role="italic">/api/events</emphasis> endpoint.</para>
      <para>The order of column in the CSV which are used for both export and import is as
        follows:</para>
      <para>
        <table>
          <title>CSV column</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Index</entry>
                <entry> Key</entry>
                <entry> Type </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>1</entry>
                <entry>event</entry>
                <entry>identifier</entry>
                <entry>Identifier of event</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>status</entry>
                <entry>enum</entry>
                <entry>Status of event, can be ACTIVE | COMPLETED | VISITED | SCHEDULED | OVERDUE
                  |&#160;SKIPPED</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>program</entry>
                <entry>identifier</entry>
                <entry>Identifier of program</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>programStage</entry>
                <entry>identifier</entry>
                <entry>Identifier of program stage</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>enrollment</entry>
                <entry>identifier</entry>
                <entry>Identifier of enrollment (program stage instance)</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>orgUnit</entry>
                <entry>identifier</entry>
                <entry>Identifier of organisation unit</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>eventDate</entry>
                <entry>date</entry>
                <entry>Event date</entry>
              </row>
              <row>
                <entry>8</entry>
                <entry>dueDate</entry>
                <entry>date</entry>
                <entry>Due Date</entry>
              </row>
              <row>
                <entry>9</entry>
                <entry>latitude</entry>
                <entry>double</entry>
                <entry>Latitude where event happened</entry>
              </row>
              <row>
                <entry>10</entry>
                <entry>longitude</entry>
                <entry>double</entry>
                <entry>Longitude where event happened</entry>
              </row>
              <row>
                <entry>11</entry>
                <entry>dataElement</entry>
                <entry>identifier</entry>
                <entry>Identifier of data element</entry>
              </row>
              <row>
                <entry>12</entry>
                <entry>value</entry>
                <entry>string</entry>
                <entry>Value / measure of event</entry>
              </row>
              <row>
                <entry>13</entry>
                <entry>storedBy</entry>
                <entry>string</entry>
                <entry>Event was stored by (defaults to current user)</entry>
              </row>
              <row>
                <entry>14</entry>
                <entry>providedElsewhere</entry>
                <entry>boolean</entry>
                <entry>Was this value collected somewhere else</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para><emphasis role="italic">Example of 2 events with 2 different data value
        each:</emphasis></para>
      <screen>EJNxP3WreNP,COMPLETED,&lt;pid>,&lt;psid>,&lt;enrollment-id>,&lt;ou>,2016-01-01,2016-01-01,,,&lt;de>,1,,
EJNxP3WreNP,COMPLETED,&lt;pid>,&lt;psid>,&lt;enrollment-id>,&lt;ou>,2016-01-01,2016-01-01,,,&lt;de>,2,,
qPEdI1xn7k0,COMPLETED,&lt;pid>,&lt;psid>,&lt;enrollment-id>,&lt;ou>,2016-01-01,2016-01-01,,,&lt;de>,3,,
qPEdI1xn7k0,COMPLETED,&lt;pid>,&lt;psid>,&lt;enrollment-id>,&lt;ou>,2016-01-01,2016-01-01,,,&lt;de>,4,,</screen>
    </section>
    <section xml:id="webapi_querying_reading_events">
      <title>Querying and reading events</title>
      <para>This section explains how to read out the events that have been stored in the DHIS2
        instance. For more advanced uses of the event data, please see the section on event
        analytics. The output format from the <emphasis role="italic">/api/events</emphasis>
        endpoint will match the format that is used to send events to it (which the analytics event
        api does not support). Both XML and JSON are supported, either through adding .json/.xml or
        by setting the appropriate <emphasis role="italic">Accept</emphasis> header. The query is
        paged by default and the default page size is 50 events, <emphasis role="italic"
          >field</emphasis> filtering works as it does for metadata, add the <emphasis role="italic"
          >fields</emphasis> parameter and include your wanted properties, i.e. <emphasis
          role="italic">?fields=program,status</emphasis>.</para>
      <para>
        <table>
          <title>Events resource query parameters</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry> Key </entry>
                <entry> Type </entry>
                <entry> Required </entry>
                <entry> Description </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>program</entry>
                <entry>identifier</entry>
                <entry>true (if not programStage is provided)</entry>
                <entry>Identifier of program</entry>
              </row>
              <row>
                <entry>programStage</entry>
                <entry>identifier</entry>
                <entry>false</entry>
                <entry>Identifier of program stage</entry>
              </row>
              <row>
                <entry>programStatus</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Status of event in program, ca be ACTIVE | COMPLETED | CANCELLED</entry>
              </row>
              <row>
                <entry>followUp</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Whether event is considered for follow up in program, can be true | false or
                  omitted.</entry>
              </row>
              <row>
                <entry>trackedEntityInstance</entry>
                <entry>identifier</entry>
                <entry>false</entry>
                <entry>Identifier of tracked entity instance</entry>
              </row>
              <row>
                <entry>orgUnit</entry>
                <entry>identifier</entry>
                <entry>true</entry>
                <entry>Identifier of organisation unit</entry>
              </row>
              <row>
                <entry>ouMode</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Org unit selection mode, can be SELECTED | CHILDREN | DESCENDANTS </entry>
              </row>
              <row>
                <entry>startDate</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Only events newer than this date</entry>
              </row>
              <row>
                <entry>endDate</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Only events older than this date</entry>
              </row>
              <row>
                <entry>status</entry>
                <entry>enum</entry>
                <entry>false</entry>
                <entry>Status of event, can be ACTIVE | COMPLETED | VISITED | SCHEDULED | OVERDUE
                  |&#160;SKIPPED</entry>
              </row>
              <row>
                <entry>lastUpdated</entry>
                <entry>date</entry>
                <entry>false</entry>
                <entry>Filter for events which were updated after this date.</entry>
              </row>
              <row>
                <entry>skipMeta</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Exclude the meta data part of response (improves performance)</entry>
              </row>
              <row>
                <entry>page</entry>
                <entry>integer</entry>
                <entry>false</entry>
                <entry>Page number</entry>
              </row>
              <row>
                <entry>pageSize</entry>
                <entry>integer</entry>
                <entry>falase</entry>
                <entry>Number of items in each page</entry>
              </row>
              <row>
                <entry>totalPages</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Indicates whether to include the total number of pages in the paging
                  response.</entry>
              </row>
              <row>
                <entry>skipPaging</entry>
                <entry>boolean</entry>
                <entry>false</entry>
                <entry>Indicates whether to skip paging in the query and return all events.</entry>
              </row>
              <row>
                <entry>dataElementIdScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Data element ID scheme to use for export, valid options are UID and
                  CODE</entry>
              </row>
              <row>
                <entry>categoryOptionComboIdScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Category Option Combo ID scheme to use for export, valid options are UID and
                  CODE</entry>
              </row>
              <row>
                <entry>orgUnitIdScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Organisation Unit ID scheme to use for export, valid options are UID and
                  CODE</entry>
              </row>
              <row>
                <entry>programIdScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Program ID scheme to use for export, valid options are UID and CODE</entry>
              </row>
              <row>
                <entry>programStageIdScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Program Stage ID scheme to use for export, valid options are UID and
                  CODE</entry>
              </row>
              <row>
                <entry>idScheme</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>Allows to set id scheme for data element, category option combo, orgUnit,
                  program and program stage at once.</entry>
              </row>
              <row>
                <entry>order</entry>
                <entry>string</entry>
                <entry>false</entry>
                <entry>The order of which to retreive the events from the API. Usage:
                  order=(property):asc/desc - Ascending order is default. Properties: event |
                  program | programStage | enrollment | enrollmentStatus | orgUnit | orgUnitName |
                  trackedEntityInstance | eventDate | followup | status | dueDate | storedBy |
                  created | lastUpdated | completedBy | completedDate </entry>
              </row>
              <row>
                <entry>event</entry>
                <entry>comma delimited strings</entry>
                <entry>false</entry>
                <entry>Filter the result down to a limited set of IDs by using <emphasis
                    role="italic">event=id1;id2</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <section>
        <title>Examples</title>
        <para>Query for all events with children of a certain organisation unit:
          <screen>/api/26/events.json?orgUnit=YuQRtpLP10I&amp;ouMode=CHILDREN</screen></para>
        <para>Query for all events with all descendants of a certain organisation unit, implying all
          organisation units in the
          sub-hierarchy:<screen>/api/26/events.json?orgUnit=O6uvpzGd5pu&amp;ouMode=DESCENDANTS</screen></para>
        <para>Query for all events with a certain program and organisation unit:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc</screen></para>
        <para>Query for all events with a certain program and organisation unit, sorting by due date
          ascending:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc&amp;order=dueDate</screen></para>
        <para>Query for the 10 events with the newest event date in a certain program and
          organisation unit - by paging and ordering by due date descending:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc
  &amp;order=eventDate:desc&amp;pageSize=10&amp;page=1</screen></para>
        <para>Query for all events with a certain program and organisation unit for a specific
          tracked entity instance:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8
  &amp;program=eBAyeGv0exc&amp;trackedEntityInstance=gfVxE3ALA9m</screen></para>
        <para>Query for all events with a certain program and organisation unit older or equal to
          2014-02-03:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc&amp;endDate=2014-02-03</screen></para>
        <para>Query for all events with a certain program stage, organisation unit and tracked
          entity instance in the year 2014:
          <screen>/api/26/events.json?orgUnit=DiszpKrYNg8&amp;program=eBAyeGv0exc
  &amp;trackedEntityInstance=gfVxE3ALA9m&amp;startDate=2014-01-01&amp;endDate=2014-12-31</screen></para>
      </section>
    </section>
  </section>
  <section xml:id="webapi_program_rules">
    <title>Program rules</title>
    <para>This section is about sending and reading program rules, and explains the program rules
      data model. The program rules gives functionality to configure dynamic behavior in the
      programs in DHIS.</para>
    <section xml:id="webapi_program_rule_model">
      <title>Program rule model</title>
      <para>The program rules data model consists of programRuleVariables, programRules and
        programRuleActions. The programRule contains an expression - when this expression is true,
        the child programRuleActions is triggered. The programRuleVariables is used to address data
        elements, tracked entity data values and other data values needed to run the expressions.
        All programRules in a program share the same library of programRuleVariables, and one
        programRuleVariable can be used in several programRules&apos; expressions. </para>
      <screenshot>
        <title>DHIS2 Login screen</title>
        <mediaobject>
          <imageobject>
            <imagedata width="80%" fileref="resources/images/program_rules/program-rule-model.jpg"
              format="JPG"/>
          </imageobject>
        </mediaobject>
      </screenshot>
      <!-- original google drawing: https://docs.google.com/drawings/d/1q2Fb5DyknrgkHm6mveSyclokJTSGRuCfo4VMRauJnlU/edit?usp=sharing -->
      <section>
        <title>Program rule model details</title>
        <para>The following table gives a detailed overview over the programRule model.</para>
        <table frame="all">
          <title> programRule </title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="4*"/>
            <colspec colnum="3" colname="c3" colwidth="1*"/>
            <thead>
              <row>
                <entry>name</entry>
                <entry>description</entry>
                <entry>Compulsory</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>program</entry>
                <entry>The program of which the programRule is executed in.</entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>name</entry>
                <entry>The name with which the program rule will be displayed to dhis configurators.
                  Not visisble to the end user of the program.</entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>description</entry>
                <entry>The description of the program rule, can be used by configurators to describe
                  the rule. Not visisble to the end user of the program.</entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>programStage</entry>
                <entry>If a programStage is set for a program rule, the rule will only be evaluated
                  inside the specified program stage.</entry>
                <entry>optional</entry>
              </row>
              <row>
                <entry>condition</entry>
                <entry>The expression that needs to be evaluated to true in order for the program
                  rule to trigger its child actions. The expression is written using operators,
                  function calls, hard coded values, constants and program rule variables.
                  <screen>d2:hasValue(&apos;hemoglobin&apos;) &amp;&amp; #{hemoglobin} &lt;= 7</screen></entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>priority</entry>
                <entry>The priority to run the rule in cases where the order of the rules matters.
                  In most cases the rules does not depend on being run before or after other rules,
                  and in these cases the priority can be omitted. If no priority is set, the rule
                  will be run after any rules that has a priority defined. If a priority(integer) is
                  set, the rule with the lowest priority will be run before rules with higher
                  priority.</entry>
                <entry>optional</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section>
        <title>Program rule action model details</title>
        <para>The following table gives a detailed overview over the programRuleAction model.</para>
        <table frame="all">
          <title> programRuleAction </title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="4*"/>
            <colspec colnum="3" colname="c3" colwidth="1*"/>
            <thead>
              <row>
                <entry>name</entry>
                <entry>description</entry>
                <entry>Compulsory</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>programRule</entry>
                <entry>The programRule that is the parent of this action.</entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>programRule- ActionType</entry>
                <entry>The type of action that is to be performed. <itemizedlist>
                    <listitem>
                      <para><emphasis role="bold">DISPLAYTEXT</emphasis> - Displays a text in a
                        given widget.</para>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">DISPLAYKEYVALUEPAIR</emphasis> - Displays a key
                        and value pair(like a program indicator) in a given widget.</para>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">HIDEFIELD</emphasis> - Hide a specified
                        dataElement or trackedEntityAttribute.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined, the text in
                              <emphasis role="italic">content</emphasis> will be displayed to the
                            end user in the instance where a value is previously entered into a
                            field that is now about to be hidden (and therefore blanked). If
                              <emphasis role="italic">content</emphasis> is not defined, a standard
                            message will be shown to the user in this instance. </para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined*, the
                            HIDEFIELD action will hide this dataElement when the rule is
                            effective.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">trackedEntityDataValue</emphasis> - if
                            defined*, the HIDEFIELD action will hide this trackedEntityDataValue
                            when the rule is effective. </para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">HIDESECTION</emphasis> - Hide a specified
                        section.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">programStageSection</emphasis> - must be
                            defined. This is the programStageSection that will be hidden in case the
                            parent rule is effective.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">ASSIGN</emphasis> - Assign a dataElement a
                        value(help the user calculate something or fill in an obvious value
                        somewhere)</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined*, the value
                            in <emphasis role="italic">data</emphasis> is assigned to this variable.
                            If content id defined, and thus a variable is assigned for use in other
                            rules, it is important to also assign a <emphasis role="italic">
                              programRule.priority</emphasis> to make sure the rule with an ASSIGN
                            action runs before the rule that will in turn evaluate the assigned
                            variable.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - must be defined, data
                            forms an expression that is evaluated and assigned to either a
                            variable(#{myVariable}), a dataElement, or both.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined*, the
                            value in <emphasis role="italic">data</emphasis> is assigned to this
                            data element.</para>
                        </listitem>
                      </itemizedlist>
                      <para>* Either the content or dataElement must be defined for the ASSIGN
                        action to be effective.</para>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">SHOWWARNING</emphasis> - Show a warning to the
                        user, not blocking the user from completing the event or
                        registration.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined, content is
                            a static part that is displayed at the end of the error message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - if defined, data forms an
                            expression that is evaluated and added to the end of the warning
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined*, the
                            warning message is displayed next to this data element.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">trackedEntityAttribute</emphasis> - if
                            defined*, the warning message is displayed next to this tracked entity
                            attribute.</para>
                        </listitem>
                      </itemizedlist>
                      <para>*Either dataElement or trackedEntityAttribute must be specified.</para>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">SHOWERROR</emphasis> - Show an error to the user,
                        blocking the user from completing the event or registration.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined, content is
                            a static part that is displayed in the start of the error
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - if defined, data forms an
                            expression that is evaluated and added to the end of the error
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined*, the
                            error message is linked to this data element.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">trackedEntityAttribute</emphasis> - if
                            defined*, the error message is linked to this tracked entity
                            attribute.</para>
                        </listitem>
                      </itemizedlist>
                      <para>*Either dataElement or trackedEntityAttribute must be specified.</para>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">WARNINGONCOMPLETINON</emphasis> - Show a warning
                        to the user on the "Complete form" dialog, but allowing the user to complete
                        the event.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined, content is
                            a static part that is displayed at the end of the error message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - if defined, data forms an
                            expression that is evaluated and added to the end of the warning
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined, the
                            warning message prefixed with the name/formName of the data
                            element.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">ERRORONCOMPLETION</emphasis> - Show an error to
                        the user on in a modal window when the user tries to complete the event. The
                        user is prevented from completing the event.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis> - if defined, content is
                            a static part that is displayed in the start of the error
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - if defined, data forms an
                            expression that is evaluated and added to the end of the error
                            message.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined, the
                            error message is linked to this data element.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">CREATEEVENT</emphasis> - Create an event within
                        the same enrollment.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">content</emphasis></para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">data</emphasis> - if defined, contains data
                            values to assign the created event. The format is &lt;uid&gt;:&lt;data
                            value&gt;. Where several values is specified, these are separated with
                            comma.
                            <screen>AcMrnleqHqc:100,AqK1IHqCkEE:&apos;Polyhydramnios&apos;</screen></para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">programStage</emphasis> - must be defined,
                            and designates the program stage that the rule shall create an event
                            of.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                    <listitem>
                      <para><emphasis role="bold">SETMANDATORYFIELD</emphasis> - Set a field to be
                        mandatory.</para>
                      <itemizedlist>
                        <listitem>
                          <para><emphasis role="italic">dataElement</emphasis> - if defined, this
                            data element will be set to be mandatory in the data entry form.</para>
                        </listitem>
                        <listitem>
                          <para><emphasis role="italic">trackedEntityAttribute</emphasis> - if
                            defined, this tracked entity attribute will be set to mandatory in the
                            registration form or profile.</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist></entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>location</entry>
                <entry>Used for actionType DISPLAYKEYVALUEPAIR and DISPLAYTEXT to designate which
                  widget to display the text or keyvalyepair in. Compulsory for DISPLAYKEYVALUEPAIR
                  and DISPLAYTEXT.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>content</entry>
                <entry>Used for user messages in the different actions. See the actionType overview
                  for a detailed explanation for how it is used in each of the action types.
                  Compulsory for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION,
                  DISPLAYTEXT and DISPLAYKEYVALUEPAIR. Optional for HIDEFIELD and ASSIGN.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>data</entry>
                <entry>Used for expressions in the different actions. See the actionType overview
                  for a detailed explanation for how it is used in each of the action types.
                  Compulsory for ASSIGN. Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION,
                  ERRORONCOMPLETION, DISPLAYTEXT, CREATEEVENT and DISPLAYKEYVALUEPAIR</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>dataElement</entry>
                <entry>Used for linking rule actions to dataElements. See the actionType overview
                  for a detailed explanation for how it is used in each of the action types.
                  Optional for SHOWWARNING, SHOWERROR, WARNINGONCOMPLETION, ERRORONCOMPLETION,
                  ASSIGN and HIDEFIELD</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>trackedEntity- Attribute</entry>
                <entry>Used for linking rule actions to trackedEntityAttributes. See the actionType
                  overview for a detailed explanation for how it is used in each of the action
                  types. Optional for SHOWWARNING, SHOWERROR and HIDEFIELD.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>programStage</entry>
                <entry>Only used for CREATEEVENT rule actions. Compulsory for CREATEEEVENT.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>programStage- Section</entry>
                <entry>Only used for HIDESECTION rule actions. Compulsory for HIDESECTION</entry>
                <entry>See description</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section>
        <title>Program rule variable model details</title>
        <para>The following table gives a detailed overview over the programRuleVariable
          model.</para>
        <table frame="all">
          <title> programRuleVariable </title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="4*"/>
            <colspec colnum="3" colname="c3" colwidth="1*"/>
            <thead>
              <row>
                <entry>name</entry>
                <entry>description</entry>
                <entry>Compulsory</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>name</entry>
                <entry>the name for the programRuleVariable - this name is used in expressions.
                  <screen>#{myVariable} &gt; 5</screen></entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>sourceType</entry>
                <entry>Defines how this variable is populated with data from the enrollment and
                  events. <itemizedlist>
                    <listitem>
                      <para>DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE - In tracker capture, gets the
                        newest value that exists for a dataelement, within the events of a given
                        program stage in the current enrollment. In event capture, gets the newest
                        value among the 10 newest events on the organisation unit.</para>
                    </listitem>
                    <listitem>
                      <para>DATAELEMENT_NEWEST_EVENT_PROGRAM - In tracker capture, get the newest
                        value that exists for a dataelement across the whole enrollment. In event
                        capture, gets the newest value among the 10 newest events on the
                        organisation unit. </para>
                    </listitem>
                    <listitem>
                      <para>DATAELEMENT_CURRENT_EVENT - Gets the value of the given dataelement in
                        the current event only.</para>
                    </listitem>
                    <listitem>
                      <para>DATAELEMENT_PREVIOUS_EVENT - In tracker capture, gets the newest value
                        that exists among events in the program that precedes the current event. In
                        event capture, gets the newvest value among the 10 preceeding events
                        registered on the organisation unit.</para>
                    </listitem>
                    <listitem>
                      <para>CALCULATED_VALUE - Used to reserve a variable name that will be assigned
                        by a ASSIGN program rule action</para>
                    </listitem>
                    <listitem>
                      <para>TEI_ATTRIBUTE - Gets the value of a given tracked entity
                        attribute</para>
                    </listitem>
                  </itemizedlist></entry>
                <entry>Compulsory</entry>
              </row>
              <row>
                <entry>dataElement</entry>
                <entry>Used for linking the programRuleVariable to a dataElement. Compulsory for all
                  sourceTypes that starts with DATAELEMENT_.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>trackedEntity- Attribute</entry>
                <entry>Used for linking the programRuleVariable to a trackedEntityAttribute.
                  Compulsory for sourceType TEI_ATTRIBUTE.</entry>
                <entry>See description</entry>
              </row>
              <row>
                <entry>useCodeFor- OptionSet</entry>
                <entry>If checked, the variable will be populated with the code - not the name -
                  from any linked option set. Default is unchecked, meaning that the name of the
                  option is populated.</entry>
                <entry/>
              </row>
              <row>
                <entry>programStage</entry>
                <entry>Used for specifying a specific program stage to retreive the
                  programRuleVariable value from. Compulsory for
                  DATAELEMENT_NEWEST_EVENT_PROGRAM_STAGE.</entry>
                <entry>See description</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
    <section xml:id="webapi_creating_program_rules">
      <title>Creating program rules</title>
      <para>-coming-</para>
    </section>
  </section>
  <section xml:id="webapi_forms">
    <title>Forms</title>
    <para>To retrieve information about a form (which corresponds to a data set and its sections)
      you can interact with the <emphasis role="italic">form</emphasis> resource. The form response
      is accessible as XML and JSON and will provide information about each section (group) in the
      form as well as each field in the sections, including label and identifiers. By supplying
      period and organisation unit identifiers the form response will be populated with data values. </para>
    <table frame="all">
      <title>Form query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="newCol2" colwidth="1*"/>
        <colspec colnum="3" colname="c2" colwidth="5.9*"/>
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Option</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>pe</entry>
            <entry>ISO period</entry>
            <entry>Period for which to populate form data values.</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>UID</entry>
            <entry>Organisation unit for which to populate form data values.</entry>
          </row>
          <row>
            <entry>metaData</entry>
            <entry>false | true</entry>
            <entry>Whether to include metadata about each data element of form sections.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>To retrieve the form for a data set you can do a GET request like this:</para>
    <screen>/api/26/dataSets/&lt;dataset-id&gt;/form.json</screen>
    <para>To retrieve the form for the data set with identifier &quot;BfMAe6Itzgt&quot; in
      XML:</para>
    <screen>/api/26/dataSets/BfMAe6Itzgt/form</screen>
    <para>To retrieve the form including metadata in JSON:</para>
    <screen>/api/26/dataSets/BfMAe6Itzgt/form.json?metaData=true</screen>
    <para>To retrieve the form filled with data values for a specific period and organisation unit
      in XML:</para>
    <screen>/api/26/dataSets/BfMAe6Itzgt/form.xml?ou=DiszpKrYNg8&amp;pe=201401</screen>
    <para>When it comes to custom data entry forms, this resource also allows for creating such
      forms directly for a data set. This can be done through a POST or PUT request with content
      type text/html where the payload is the custom form markup such as:</para>
    <screen>curl -d @form.html &quot;localhost/api/26/dataSets/BfMAe6Itzgt/form&quot; 
  -H &quot;Content-Type:text/html&quot; -u admin:district -X PUT -v</screen>
  </section>
  <section xml:id="webapi_validation">
    <title>Validation</title>
    <para>To generate a data validation summary you can interact with the validation resource. The
      dataSet resource is optimized for data entry clients for validating a data set / form, and can
      be accessed like
      this:<screen>/api/26/validation/dataSet/QX4ZTUbOt3a.json?pe=201501&amp;ou=DiszpKrYNg8</screen></para>
    <para>The first path variable is an identifier referring to the data set to validate. XML and
      JSON resource representations are supported. The response contains violations to validation
      rules. This will be extended with more validation types in coming versions.</para>
    <para>To retrieve validation rules which are relevant for a specific data set, meaning
      validation rules with formulas where all data elements are part of the specific data set, you
      can make a GET request to to <emphasis role="italic">validationRules</emphasis> resource like
      this:<screen>/api/26/validationRules?dataSet=&lt;dataset-id&gt;</screen></para>
    <para>The validation rules have a left side and a right side, which is compared for validity
      according to an operator. The valid operator values are found in the table below.</para>
    <para>
      <table frame="all">
        <title>Operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.45*"/>
          <thead>
            <row>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>equal_to</entry>
              <entry>Equal to</entry>
            </row>
            <row>
              <entry>not_equal_to</entry>
              <entry>Not equal to</entry>
            </row>
            <row>
              <entry>greater_than</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>greater_than_or_equal_to</entry>
              <entry>Greater than or equal to</entry>
            </row>
            <row>
              <entry>less_than</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>less_than_or_equal_to</entry>
              <entry>Less than or equal to</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>The left side and right side expressions are mathematical expressions which can contain
      references to data elements and category option combinations on the following
      format:<screen>${&lt;dataelement-id&gt;.&lt;catoptcombo-id&gt;}</screen></para>
    <para>The left side and right side expressions have a <emphasis role="italic">missing value
        strategy</emphasis>. This refers to how the system should treat data values which are
      missing for data elements / category option combination references in the formula in terms of
      whether the validation rule should be checked for validity or skipped. The valid missing value
      strategies are found in the table below.</para>
    <para>
      <table frame="all">
        <title>Missing value strategies</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.57*"/>
          <thead>
            <row>
              <entry>Value</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>SKIP_IF_ANY_VALUE_MISSING</entry>
              <entry>Skip validation rule if any data value is missing</entry>
            </row>
            <row>
              <entry>SKIP_IF_ALL_VALUES_MISSING</entry>
              <entry>Skip validation rule if all data values are missing</entry>
            </row>
            <row>
              <entry>NEVER_SKIP</entry>
              <entry>Never skip validation rule irrespective of missing data values</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
  </section>
  <section xml:id="webapi_data_integrity">
    <title>Data integrity</title>
    <para>The data integrity capabilities of the data administration module are available through
      the web API. This section describes how to run the data integrity process as well as
      retrieving the result. The details of the analysis performed are described in the user
      manual.</para>
    <section>
      <title>Running data integrity</title>
      <para>The operation of measuring data integrity is a fairly resource (and time) demanding
        task. It is therefore run as an asynchronous process and only when explicitly requested.
        Starting the task is done by forming an empty POST request to the <emphasis role="italic"
          >dataIntegrity</emphasis> endpoint like so (demonstrated in curl
        syntax):<screen>curl -X POST https://dhis.domain/api/26/dataIntegrity</screen></para>
      <para>If successful the request will return HTTP 202 immediately. The location header of the
        response points to the resource used to check the status of the request. Forming a GET
        request to the given location yields an empty JSON response if the task has not yet
        completed and a JSON taskSummary object when the task is done. Polling (conservatively) to
        this resource can hence be used to wait for the task to finish.</para>
    </section>
    <section>
      <title>Fetching the result</title>
      <para>Once data integrity is finished running the result can be fetched from the <emphasis
          role="italic">system/taskSummaries</emphasis> resource like
        so:<screen>curl -X GET https://dhis.domain/api/26/system/taskSummaries/DATAINTEGRITY</screen></para>
      <para>The returned object contains a summary for each point of analysis, listing the names of
        the relevant integrity violations. As stated in the leading paragraph for this section the
        details of the analysis (and the resulting data) can be found in the user manual chapter on
        Data Administration.</para>
    </section>
  </section>
  <section xml:id="webapi_indicators">
    <title>Indicators</title>
    <para>This section describes indicators and indicator expressions.</para>
    <section>
      <title>Aggregate indicators</title>
      <para>To retrieve indicators you can make a GET request to the indicators resource like
        this:<screen>/api/26/indicators</screen></para>
      <para>Indicators represent expressions which can be calculated and presented as a result. The
        indicator expressions are split into a numerator and denominator. The numerators and
        denominators are mathematical expressions which can contain references to data elements,
        constants and organisation unit groups. The variables will be substituted with data values
        when used e.g. in reports. Variables which are allowed in expressions are described in the
        following table.</para>
      <para>
        <table frame="all">
          <title>Indicator variables</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1.74*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="1.62*"/>
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Object</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>#{&lt;dataelement-id&gt;.&lt;catoptcombo-id&gt;}</entry>
                <entry>Data element operand</entry>
                <entry>Refers to a combination of an aggregate data element and a category option
                  combination.</entry>
              </row>
              <row>
                <entry>#{&lt;dataelement-id&gt;}</entry>
                <entry>Aggregate data element</entry>
                <entry>Refers to the total value of an aggregate data element across all category
                  option combinations.</entry>
              </row>
              <row>
                <entry>D{&lt;program-id&gt;.&lt;dataelement-id&gt;</entry>
                <entry>Program data element</entry>
                <entry>Refers to the value of a tracker data element within a program.</entry>
              </row>
              <row>
                <entry>A{&lt;program-id&gt;.&lt;attribute-id&gt;</entry>
                <entry>Program tracked entity attribute</entry>
                <entry>Refers to the value of a tracked entity attribute within a program.</entry>
              </row>
              <row>
                <entry>I{program-indicator-id&gt;</entry>
                <entry>Program indicator</entry>
                <entry>Refers to the value of a program indicator.</entry>
              </row>
              <row>
                <entry>C{&lt;constant-id&gt;}</entry>
                <entry>Constant</entry>
                <entry>Refers to a constant value.</entry>
              </row>
              <row>
                <entry>OUG{&lt;orgunitgroup-id&gt;}</entry>
                <entry>Organisation unit group</entry>
                <entry>Refers to the count of organisation units within an organisation unit
                  group.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>The syntax looks like
        this:<screen>#{&lt;dataelement-id&gt;.&lt;catoptcombo-id&gt;} + C{&lt;constant-id&gt;} + OUG{&lt;orgunitgroup-id&gt;}</screen></para>
      <para>A corresponding example looks like
        this:<screen>#{P3jJH5Tu5VC.S34ULMcHMca} + C{Gfd3ppDfq8E} + OUG{CXw2yu5fodb}</screen></para>
      <para>Note that for data element variables the category option combo identifier can be
        omitted. The variable will then represent the total for the data element, e.g. across all
        category option combos. Example:<screen>#{P3jJH5Tu5VC} + 2</screen></para>
      <para>An example which use a program data element and a program
        attribute:<screen>( D{eBAyeGv0exc.vV9UWAZohSf} * A{IpHINAT79UW.cejWyOfXge6} ) / D{eBAyeGv0exc.GieVkTxp4HH}</screen></para>
      <para>An example which combines program indicators and aggregate
        indicators:<screen>I{EMOt6Fwhs1n} * 1000 / #{WUg3MYWQ7pt}</screen></para>
      <para>Expressions can be any kind of valid mathematical expression, as an
        example:<screen>( 2 * #{P3jJH5Tu5VC.S34ULMcHMca} ) / ( #{FQ2o8UBlcrS.S34ULMcHMca} - 200 ) * 25</screen></para>
    </section>
    <section xml:id="webapi_program_indicators">
      <title>Program indicators</title>
      <para>To retrieve program indicators you can make a GET request to the program indicators
        resource like this:<screen>/api/26/programIndicators</screen></para>
      <para>Program indicators can contain information collected in a program. Indicators have an
        expression which can contain references to data elements, attributes, constants and program
        variables. Variables which are allowed in expressions are described in the following
        table.</para>
      <para>
        <table frame="all">
          <title>Program indicator variables</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="2.22*"/>
            <thead>
              <row>
                <entry>Variable</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>#{&lt;programstage-id&gt;.&lt;dataelement-id&gt;}</entry>
                <entry>Refers to a combination of program stage and data element id.</entry>
              </row>
              <row>
                <entry>#{&lt;attribute-id&gt;}</entry>
                <entry>Refers to a tracked entity attribute.</entry>
              </row>
              <row>
                <entry>V{&lt;varible-id&gt;}</entry>
                <entry>Refers to a program variable.</entry>
              </row>
              <row>
                <entry>C{&lt;constant-id&gt;}</entry>
                <entry>Refers to a constant.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>The syntax looks like
        this:<screen>#{&lt;programstage-id&gt;.&lt;dataelement-id&gt;} + #{&lt;attribute-id&gt;} + V{&lt;varible-id&gt;} + C{&lt;constant-id&gt;}</screen></para>
      <para>A corresponding example looks like this:
        <screen>#{A03MvHHogjR.a3kGcGDCuk6} + A{OvY4VVhSDeJ} + V{incident_date} + C{bCqvfPR02Im}</screen></para>
    </section>
    <section xml:id="webapi_expressions">
      <title>Expressions</title>
      <para>Expressions are mathematical formulas which can contain references to data elements,
        constants and organisation unit groups. To validate and get the textual description of an
        expression you can make a GET request to the expressions
        resource:<screen>/api/26/expressions/description?expression=&lt;expression-string&gt;</screen></para>
      <para>The response follows the standard JSON web message format. The <emphasis role="italic"
          >status</emphasis> property indicates the outcome of the validation and will be
        &quot;OK&quot; if successful and &quot;ERROR&quot; if failed. The <emphasis role="italic"
          >message</emphasis> property will be &quot;Valid&quot; if successful and provide a textual
        description of the reason why the validation failed if not. The <emphasis role="italic"
          >description</emphasis> provides a textual description of the
        expression.<screen>{
    &quot;httpStatus&quot;: &quot;OK&quot;,
    &quot;httpStatusCode&quot;: 200,
    &quot;status&quot;: &quot;OK&quot;,
    &quot;message&quot;: &quot;Valid&quot;,
    &quot;description&quot;: &quot;Acute Flaccid Paralysis&quot;
}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_complete_data_set_registrations">
    <title>Complete data set registrations</title>
    <para>This section is about complete data set registrations for data sets. A registration marks
      as a data set as completely captured.</para>
    <section>
      <title>Completing and un-completing data sets</title>
      <para>This section explains how you can register and un-register a data set as complete. To
        complete or un-complete a data set you will interact with the completeDataSetRegistrations
        resource:</para>
      <screen>/api/26/completeDataSetRegistrations</screen>
      <para>This resource supports the methods <emphasis role="italic">POST</emphasis> for
        registration and <emphasis role="italic">DELETE</emphasis> for un-registration. The
        following query parameters are supported:</para>
      <table frame="all">
        <title>Complete data set registrations query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.16*"/>
          <colspec colnum="3" colname="c3" colwidth="3.96*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ds</entry>
              <entry>Yes</entry>
              <entry>Data set identifier</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Yes</entry>
              <entry>Period identifier</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Yes</entry>
              <entry>Organisation unit identifier</entry>
            </row>
            <row>
              <entry>cc</entry>
              <entry>No (must combine with cp)</entry>
              <entry>Attribute combo identifier (for locking check)</entry>
            </row>
            <row>
              <entry>cp</entry>
              <entry>No (must combine with cp)</entry>
              <entry>Attribute option identifiers, separated with ; for multiple values (for locking
                check)</entry>
            </row>
            <row>
              <entry>multiOu</entry>
              <entry>No (default false)</entry>
              <entry>Whether registration applies to sub units</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Reading complete data set registrations</title>
      <para>This section explains how to retrieve data set completeness registrations. We will be
        using the <emphasis role="italic">completeDataSetRegistrations</emphasis> resource. The
        query parameters to use are these:</para>
      <table frame="all">
        <title>Data value set query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="95pt"/>
          <colspec colnum="2" colname="c2" colwidth="425pt"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dataSet</entry>
              <entry>Data set identifier, can be specified multiple times</entry>
            </row>
            <row>
              <entry>period</entry>
              <entry>PeriodType</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>Start date for the time span of the values to export</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>End date for the time span of the values to export</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>Organisation unit identifier, can be specified multiple times</entry>
            </row>
            <row>
              <entry>children</entry>
              <entry>Whether to include the children in the hierarchy of the organisation
                units</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The dataSet and orgUnit parameters can be repeated in order to include multiple data
        sets and organisation units. An example request looks like
        this:<screen>curl &quot;https://play.dhis2.org/demo/api/26/completeDataSetRegistrations?dataSet=pBOMPrpg1QX&amp;dataSet=pBOMPrpg1QX
  &amp;startDate=2014-01-01&amp;endDate=2014-01-31&amp;orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true&quot;
  -H &quot;Accept:application/xml&quot; -u admin:district -v</screen></para>
      <para>You can get the response in <emphasis role="italic">xml</emphasis> and <emphasis
          role="italic">json</emphasis> format. You can indicate which response format you prefer
        through the <emphasis role="italic">Accept</emphasis> HTTP header like in the example above.
        For xml you use <emphasis role="italic">application/xml</emphasis>; for json you use
          <emphasis role="italic">application/json</emphasis>.</para>
    </section>
  </section>
  <section xml:id="webapi_data_approval">
    <title>Data approval</title>
    <para>This section explains how to approve, unapprove and check approval status using the
        <emphasis role="italic">dataApprovals</emphasis> resource. Approval is done per data set,
      period, organisation unit and attribute option
      combo.<screen>/api/26/dataApprovals</screen></para>
    <section>
      <title>Get approval status</title>
      <para>To get approval information for a data set you can issue a GET request similar to
        this:</para>
      <screen>GET http://server.com/api/dataApprovals?ds=aLpVgfXiz0f&amp;pe=2013&amp;ou=DiszpKrYNg8</screen>
      <table frame="all">
        <title>Data approval query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.15*"/>
          <colspec colnum="3" colname="c3" colwidth="3.92*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ds</entry>
              <entry>Yes</entry>
              <entry>Data set identifier</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Yes</entry>
              <entry>Period identifier</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Yes</entry>
              <entry>Organisation unit identifier</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This will give you a response something like this:</para>
      <screen>{
  &quot;mayApprove&quot;: false,
  &quot;mayUnapprove&quot;: false,
  &quot;mayAccept&quot;: false,
  &quot;mayUnaccept&quot;: false,
  &quot;state&quot;: &quot;UNAPPROVED_ELSEWHERE&quot;
}</screen>
      <para>The returned parameters are:</para>
      <table frame="all">
        <title>Data approval query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3*"/>
          <thead>
            <row>
              <entry>Return Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>mayApprove</entry>
              <entry>Whether the current user may approve this data selection.</entry>
            </row>
            <row>
              <entry>mayUnapprove</entry>
              <entry>Whether the current user may unapprove this data selection.</entry>
            </row>
            <row>
              <entry>mayAccept</entry>
              <entry>Whether the current user may accept this data selection.</entry>
            </row>
            <row>
              <entry>mayUnaccept</entry>
              <entry>Whether the current user may unaccept this data selection.</entry>
            </row>
            <row>
              <entry>state</entry>
              <entry>One of the data approval states from the table below.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Data approval states</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.5*"/>
          <colspec colnum="2" colname="c2" colwidth="3*"/>
          <thead>
            <row>
              <entry>State</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>UNAPPROVABLE</entry>
              <entry>Data approval does not apply to this selection. (Data is neither
                &quot;approved&quot; nor &quot;unapproved&quot;.)</entry>
            </row>
            <row>
              <entry>UNAPPROVED_WAITING</entry>
              <entry>Data could be approved for this selection, but is waiting for some lower-level
                approval before it is ready to be approved.</entry>
            </row>
            <row>
              <entry>UNAPPROVED_ELSEWHERE</entry>
              <entry>Data is unapproved, and is waiting for approval somewhere else (not approvable
                here.)</entry>
            </row>
            <row>
              <entry>UNAPPROVED_READY</entry>
              <entry>Data is unapproved, and is ready to be approved for this selection.</entry>
            </row>
            <row>
              <entry>APPROVED_HERE</entry>
              <entry>Data is approved, and was approved here (so could be unapproved here.)</entry>
            </row>
            <row>
              <entry>APPROVED_ELSEWHERE</entry>
              <entry>Data is approved, but was not approved here (so cannot be unapproved here.)
                This covers the following cases: <itemizedlist>
                  <listitem>
                    <para>Data is approved at a higher level.</para>
                  </listitem>
                  <listitem>
                    <para>Data is approved for wider scope of category options.</para>
                  </listitem>
                  <listitem>
                    <para>Data is approved for all sub-periods in selected period.</para>
                  </listitem>
                </itemizedlist> In the first two cases, there is a single data approval object that
                covers the selection. In the third case there is not. </entry>
            </row>
            <row>
              <entry>ACCEPTED_HERE</entry>
              <entry>Data is approved and accepted here (so could be unapproved here.)</entry>
            </row>
            <row>
              <entry>ACCEPTED_ELSEWHERE</entry>
              <entry>Data is approved and accepted, but elsewhere.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Note that when querying for the status of data approval, you may specify any combination
        of the query parameters. The combination you specify does not need to describe the place
        where data is to be approved at one of the approval levels. For example:</para>
      <itemizedlist>
        <listitem>
          <para>The organisation unit might not be at an approval level. The approval status is
            determined by whether data is approved at an approval level for an ancestor of the
            organisation unit.</para>
        </listitem>
        <listitem>
          <para>You may specify individual attribute category options. The approval status is
            determined by whether data is approved for an attribute category option combination that
            includes one or more of these options.</para>
        </listitem>
        <listitem>
          <para>You may specify a time period that is longer than the period for the data set at
            which the data is entered and approvede. The approval status is determined by whether
            the data is approved for all the data set periods within the period you specify.</para>
        </listitem>
      </itemizedlist>
      <para>For data sets which are associated with a category combo you might want to fetch data
        approval records for individual attribute option combos from the following
        resource:<screen>GET api/dataApprovals/categoryOptionCombos?ds=aLpVgfXiz0f&amp;pe=2013&amp;ou=DiszpKrYNg8</screen></para>
    </section>
    <section>
      <title>Approve data</title>
      <para>To approve data you can issue a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">dataApprovals</emphasis> resource. To un-approve data you can
        issue a <emphasis role="italic">DELETE</emphasis> request to the dataApprovals
        resource.</para>
      <screen>POST DELETE /api/26/dataApprovals</screen>
      <para>To accept data you can issue a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">dataApprovals/acceptances</emphasis> resource. To un-accept data
        you can issue a <emphasis role="italic">DELETE</emphasis> request to the <emphasis
          role="italic">dataApprovals/acceptances</emphasis> resource.</para>
      <screen>POST DELETE /api/26/dataApprovals/acceptances</screen>
      <para>These requests contain the following parameters:</para>
      <table frame="all">
        <title>Data approval action parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.15*"/>
          <colspec colnum="3" colname="c3" colwidth="3.92*"/>
          <thead>
            <row>
              <entry>Action parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ds</entry>
              <entry>Yes</entry>
              <entry>Data set identifier</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Yes</entry>
              <entry>Period identifier</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Yes</entry>
              <entry>Organisation unit identifier</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Note that, unlike querying the data approval status, you must specify parameters that
        correspond to a selection of data that could be approved. In particular, all of the
        following must be true:</para>
      <itemizedlist>
        <listitem>
          <para>The organisation unit&apos;s level must be specified by an approval level.</para>
        </listitem>
        <listitem>
          <para>The time period specified must match the period type of the data set.</para>
        </listitem>
        <listitem>
          <para>The data set must specify that data can be approved for this data set.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Bulk approve data</title>
      <para>You can approve a bulk of data records by posting to the<emphasis role="italic">
          api/dataApprovals/approvals</emphasis>
        resource.<screen>POST /api/26/dataApprovals/approvals</screen></para>
      <para>You can unapprove a bulk of data records by posting to the <emphasis role="italic"
          >api/dataApprovals/unapprovals</emphasis>
        resource.<screen>POST /api/26/dataApprovals/unapprovals</screen></para>
      <para>You can accept a bulk of records by posting to the <emphasis role="italic"
          >api/dataAcceptances/acceptances</emphasis>
        resource.<screen>POST /api/26/dataAcceptances/acceptances</screen></para>
      <para>You can unaccept a bulk of records by posting to the <emphasis role="italic"
          >api/dataAcceptances/unacceptances</emphasis>
        resource.<screen>POST /api/26/dataAcceptances/unacceptances</screen></para>
      <para>The approval payload is supported as JSON and looks like
        this:<screen>{
  &quot;ds&quot;: [
    &quot;pBOMPrpg1QX&quot;, &quot;lyLU2wR22tC&quot;
  ],
  &quot;pe&quot;: [
    &quot;201601&quot;, &quot;201602&quot;
  ],
  &quot;approvals&quot;: [{
      &quot;ou&quot;: &quot;cDw53Ej8rju&quot;,
      &quot;aoc&quot;: &quot;ranftQIH5M9&quot;
    }, {
      &quot;ou&quot;: &quot;cDw53Ej8rju&quot;,
      &quot;aoc&quot;: &quot;fC3z1lcAW5x&quot;
    }]
}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_auditing">
    <title>Auditing</title>
    <para>DHIS2 does automatic auditing on all update and deletions of aggregate data values,
      tracked entity data values, tracked entity attribute values, and this chapter will explain the
      web-api available for fetching this data back out again.</para>
    <section>
      <title>Aggregate data value audits</title>
      <para>The endpoint for aggregate data value audits is located at <emphasis role="italic"
          >/api/audits/dataValue</emphasis>, and the available parameters are displayed in the table
        below.</para>
      <para>
        <table frame="all">
          <title>Aggregate data value query parameters</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1.18*"/>
            <colspec colnum="3" colname="c2" colwidth="5.71*"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Option</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>ds</entry>
                <entry>Data Set</entry>
                <entry>One or more data set identifiers to get data elements from.</entry>
              </row>
              <row>
                <entry>de</entry>
                <entry>Data Element</entry>
                <entry>One or more data element identifiers.</entry>
              </row>
              <row>
                <entry>pe</entry>
                <entry>ISO Period</entry>
                <entry>One or more period ISO identifiers.</entry>
              </row>
              <row>
                <entry>ou</entry>
                <entry>Organisation Unit</entry>
                <entry>One or more org unit identifiers.</entry>
              </row>
              <row>
                <entry>auditType</entry>
                <entry>UPDATE | DELETE</entry>
                <entry>Filter by audit type.</entry>
              </row>
              <row>
                <entry>skipPaging</entry>
                <entry>false | true</entry>
                <entry>Turn paging on / off</entry>
              </row>
              <row>
                <entry>page</entry>
                <entry>1 (default)</entry>
                <entry>If paging is enabled, this parameter decides which page to show</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>Get all audits for data set with ID
        &quot;lyLU2wR22tC&quot;:<screen>/api/26/audits/dataValue?ds=lyLU2wR22tC</screen></para>
    </section>
    <section xml:id="webapi_tracked_entity_data_value_audits">
      <title>Tracked entity data value audits</title>
      <para>The endpoint for tracked entity data value audits is located at <emphasis role="italic"
          >/api/audits/trackedEntityDataValue</emphasis>, and the available parameters are displayed
        in the table below.</para>
      <table frame="all">
        <title>Tracked entity data value query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="newCol2" colwidth="1.29*"/>
          <colspec colnum="3" colname="c2" colwidth="5.61*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>de</entry>
              <entry>Data Element</entry>
              <entry>One or more data element identifiers.</entry>
            </row>
            <row>
              <entry>ps</entry>
              <entry>Program Stage Entity</entry>
              <entry>One or more program stage instance identifiers.</entry>
            </row>
            <row>
              <entry>auditType</entry>
              <entry>UPDATE | DELETE</entry>
              <entry>Filter by audit type.</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>false | true</entry>
              <entry>Turn paging on / off</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>1 (default)</entry>
              <entry>If paging is enabled, this parameter decides which page to show</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Get all audits which have data element ID eMyVanycQSC or
        qrur9Dvnyt5:<screen>/api/26/audits/trackedEntityDataValue?de=eMyVanycQSC&amp;de=qrur9Dvnyt5</screen></para>
    </section>
    <section xml:id="webapi_tracked_entity_attribute_value_audits">
      <title>Tracked entity attribute value audits</title>
      <para>The endpoint for tracked entity attribute value audits is located at <emphasis
          role="italic">/api/audits/trackedEntityAttributeValue</emphasis>, and the available
        parameters are displayed in the table below.</para>
      <table frame="all">
        <title>Tracked entity attribute value query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="newCol2" colwidth="1.34*"/>
          <colspec colnum="3" colname="c2" colwidth="5.55*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>tea</entry>
              <entry>Tracked Entity Attributes</entry>
              <entry>One or more tracked entity attribute identifiers.</entry>
            </row>
            <row>
              <entry>te</entry>
              <entry>Tracked Entity Instances</entry>
              <entry>One or more tracked entity instance identifiers.</entry>
            </row>
            <row>
              <entry>auditType</entry>
              <entry>UPDATE | DELETE</entry>
              <entry>Filter by audit type.</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>false | true</entry>
              <entry>Turn paging on / off</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>1 (default)</entry>
              <entry>If paging is enabled, this parameter decides which page to show</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Get all audits which have attribute with ID
        VqEFza8wbwA:<screen>/api/26/audits/trackedEntityAttributeValue?tea=VqEFza8wbwA</screen></para>
    </section>
  </section>
  <section xml:id="webapi_message_conversations">
    <title>Message conversations</title>
    <para>DHIS2 features a mechanism for sending messages for purposes such as user feedback,
      notifications and general information to users. Messages are grouped into conversations. To
      interact with message conversations you can send POST and GET request to the <emphasis
        role="italic">messageConversations</emphasis>
      resource.<screen>/api/26/messageConversations</screen>Messages are delivered to the DHIS2
      message inbox but can also be sent to the user&apos;s email addresses and mobile phones as
      SMS. In this example we will see how we can utilize the Web API to send, read and manage
      messages. We will pretend to be the <emphasis role="italic">DHIS2 Administrator</emphasis>
      user and send a message to the <emphasis role="italic">Mobile</emphasis> user. We will then
      pretend to be the mobile user and read our new message. Following this we will manage the
      admin user inbox by marking and removing messages.</para>
    <section>
      <title>Writing and reading messages</title>
      <para>The resource we need to interact with when sending and reading messages is the <emphasis
          role="italic">messageConversations</emphasis> resource. We start by visiting the Web API
        entry point at <link xl:href="http://play.dhis2.org/demo/api"/> where we find and follow the
        link to the <emphasis role="italic">messageConversations</emphasis> resource at <link
          xl:href="http://play.dhis2.org/demo/api/messageConversations"/>. The description tells us
        that we can use a POST request to create a new message using the following XML format for
        sending to multiple users:</para>
      <para>
        <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;user1ID&quot; /&gt;
    &lt;user id=&quot;user2ID&quot; /&gt;
    &lt;user id=&quot;user3ID&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen>
      </para>
      <para>For sending to all users contained in one or more user groups, we can use:</para>
      <para>
        <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;userGroups&gt;
    &lt;userGroup id=&quot;userGroup1ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup2ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup3ID&quot; /&gt;
  &lt;/userGroups&gt;
&lt;/message&gt;</screen>
      </para>
      <para>For sending to all users connected to one or more organisation units, we can use:</para>
      <para>
        <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;organisationUnits&gt;
    &lt;organisationUnit id=&quot;ou1ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou2ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou3ID&quot; /&gt;
  &lt;/organisationUnits&gt;
&lt;/message&gt;</screen>
      </para>
      <para>Since we want to send a message to our friend the mobile user we need to look up her
        identifier. We do so by going to the Web API entry point and follow the link to the
          <emphasis role="italic">users</emphasis> resource at <link
          xl:href="http://play.dhis2.org/demo/api/24/users"/>. We continue by following link to the
        mobile user at <link xl:href="http://play.dhis2.org/demo/api/24/users/PhzytPW3g2J"/> where
        we learn that her identifier is <emphasis role="italic">PhzytPW3g2J</emphasis>. We are now
        ready to put our XML message together to form a message where we want to ask the mobile user
        whether she has reported data for January 2014:</para>
      <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;Mortality data reporting&lt;/subject&gt;
  &lt;text&gt;Have you reported data for the Mortality data set for January 2014?&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;PhzytPW3g2J&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen>
      <para>To test this we save the XML content into a file called <emphasis role="italic"
          >message.xml</emphasis>. We use cURL to dispatch the message the the DHIS2 demo instance
        where we indicate that the content-type is XML and authenticate as the <emphasis
          role="italic">admin</emphasis> user:</para>
      <screen>curl -d @message.xml &quot;https://play.dhis2.org/demo/api/26/messageConversations&quot; 
  -H &quot;Content-Type:application/xml&quot; -u admin:district -X POST -v</screen>
      <para>A corresponding payload in JSON and POST command look like this:</para>
      <screen>{
  &quot;subject&quot;: &quot;Hey&quot;,
  &quot;text&quot;: &quot;How are you?&quot;,
  &quot;users&quot;: [
    {
      &quot;id&quot;: &quot;OYLGMiazHtW&quot;
    },
    {
      &quot;id&quot;: &quot;N3PZBUlN8vq&quot;
    }
  ],
  &quot;userGroups&quot;: [
    {
      &quot;id&quot;: &quot;ZoHNWQajIoe&quot;
    }
  ],
  &quot;organisationUnits&quot;: [
    {
      &quot;id&quot;: &quot;DiszpKrYNg8&quot;
    }
  ]
}      </screen>
      <screen>curl -d @message.json &quot;https://play.dhis2.org/demo/api/26/messageConversations&quot;
  -H &quot;Content-Type:application/json&quot; -u admin:district -X POST -v</screen>
      <para>If all is well we receive a <emphasis role="italic">201 Created</emphasis> HTTP status
        code. Also note that we receive a <emphasis role="italic">Location </emphasis>HTTP header
        which value informs us of the URL of the newly created message conversation resource - this
        can be used by a consumer to perform further action.</para>
      <para>We will now pretend to be the mobile user and read te message which was just sent by
        dispatching a GET request to the <emphasis role="italic">messageConversations</emphasis>
        resource. We supply an <emphasis role="italic">Accept</emphasis> header with <emphasis
          role="italic">application/xml</emphasis> as the value to indicate that we are interested
        in the XML resource representation and we authenticate as the <emphasis role="italic"
          >mobile</emphasis> user:</para>
      <screen>curl &quot;https://play.dhis2.org/demo/api/26/messageConversations&quot; 
  -H &quot;Accept:application/xml&quot; -u mobile:district -X GET -v</screen>
      <para>In response we get the following XML:</para>
      <screen>&lt;messageConversations xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;
  link=&quot;https://play.dhis2.org/demo/api/messageConversations&quot;&gt;
  &lt;messageConversation name=&quot;Mortality data reporting&quot; id=&quot;ZjHHSjyyeJ2&quot;
    link=&quot;https://play.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot;/&gt;
  &lt;messageConversation name=&quot;DHIS2 version 2.7 is deployed&quot; id=&quot;GDBqVfkmnp2&quot;
    link=&quot;https://play.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2&quot;/&gt;
&lt;/messageConversations&gt;</screen>
      <para>From the response we are able to read the identifier of the newly sent message which is
          <emphasis role="italic">ZjHHSjyyeJ2</emphasis>. Note that the link to the specific
        resource is embedded and can be followed in order to read the full message. From the
        description at <link xl:href="http://play.dhis2.org/demo/api/24/messageConversations"/> we
        learned that we can reply directly to an existing message conversation once we know the URL
        by including the message text as the request payload (body). We are now able to construct a
        URL for sending our reply:</para>
      <screen>curl -d &quot;Yes the Mortality data set has been reported&quot; 
  &quot;https://play.dhis2.org/demo/api/26/messageConversations/ZjHHSjyyeJ2&quot; 
  -H &quot;Content-Type:text/plain&quot; -u mobile:district -X POST -v</screen>
      <para>If all went according to plan you will receive a <emphasis role="italic">200
          OK</emphasis> status code.</para>
    </section>
    <section>
      <title>Managing messages</title>
      <para><emphasis>Note: the Web-API calls discussed in this section were introduced in DHIS
          2.17</emphasis></para>
      <para>As users receive and send messages, conversations will start to pile up in their
        inboxes, eventually becoming laborious to track. We will now have a look at managing a users
        message inbox by removing and marking conversations through the Web-API. We will do so by
        performing some maintenance in the inbox of the <emphasis role="italic">DHIS
          Administrator</emphasis> user.</para>
      <para>First, let&apos;s have a look at removing a few messages from the inbox. Be sure to note
        that all removal operations described here only remove the relation between a user and a
        message conversation. In practical terms this means that we are not deleting the messages
        themselves (or any content for that matter) but are simply removing the message thread from
        the user such that it is not longer listed in the <emphasis role="italic"
          >/api/messageConversations</emphasis> resource.</para>
      <para>To remove a message conversation from a users inbox we need to issue a <emphasis
          role="italic">DELETE</emphasis> request to the resource identified by the id of the
        message conversation and the participating user. For example, to remove the user with id
          <emphasis role="italic">xE7jOejl9FI</emphasis> from the conversation with id <emphasis
          role="italic"
        >jMe43trzrdi</emphasis>:<screen>curl https://play.dhis2.org/demo/api/26/messageConversations/jMe43</screen></para>
      <para>If the request was successful the server will reply with a <emphasis role="italic">200
          OK</emphasis>. The response body contains an XML or JSON object (according to the accept
        header of the request) containing the id of the removed
        user.<screen>{ &quot;removed&quot; : [&quot;xE7jOejl9FI&quot;] }</screen></para>
      <para>On failure the returned object will contain a message payload which describes the
        error.<screen>{ &quot;message&quot; : &quot;No user with uid: dMV6G0tPAEa&quot; }</screen></para>
      <para><?oxy_comment_start author="cecilia" timestamp="20160628T110014+0200" comment="At next release: rewrite section and remove expressions like the observant reader." flag="done"?>The
        observant reader will alread<?oxy_comment_end?>y have noticed that the object returned on
        success in our example is actually a list of ids (containing a single entry). This is due to
        the endpoint also supporting batch removals. The request is made to the same <emphasis
          role="italic">messageConversations</emphasis> resource but follows slightly different
        semantics. For batch operations the conversation ids are given as query string parameters.
        The following example removes two separate message conversations for the current
        user:<screen>curl &quot;https://play.dhis2.org/demo/api/26/messageConversations?mc=WzMRrCosqc0&amp;mc=lxCjiigqrJm&quot; 
  -X DELETE -u admin:district</screen></para>
      <para>If you have sufficient permissions, conversations can be removed on behalf of another
        user by giving an optional user id
        parameter.<screen>curl &quot;https://play.dhis2.org/demo/api/26/messageConversations?mc=WzMRrCosqc0&amp;mc=lxCjiigqrJm&amp;user=PhzytPW3g2J&quot; 
  -X DELETE -u admin:district</screen></para>
      <para>As indicated, batch removals will return the same message format as for single
        operations. The list of removed objects will reflect successful removals performed.
        Partially errorenous requests (i.e. non-existing id) will therefore not cancel the entire
        batch operation.</para>
      <para>Messages carry a boolean <emphasis role="italic">read</emphasis> property. This allows
        tracking whether a user has seen (opened) a message or not. In a typical application
        scenario (e.g. the DHIS2 web portal) a message will be marked read as soon as the user
        opens it for the first time. However, users might want to manage the read or unread status
        of their messages in order to keep track of certain conversations.</para>
      <para>Marking messages read or unread follows similar semantics as batch removals, and also
        supports batch operations. To mark messages as read we issue a <emphasis role="italic"
          >POST</emphasis> to the <emphasis role="italic">messageConversations/read</emphasis>
        resource with a request body containing one or more message ids. To mark messages as unread
        we issue an identical request to the <emphasis role="italic"
          >messageConversations/unread</emphasis> resource. As is the case for removals, an optional
          <emphasis role="italic">user</emphasis> request parameter can be given.</para>
      <para>Let&apos;s mark a couple of messages as read by the current
        user:<screen>curl &quot;https://play.dhis2.org/dev/api/messageConversations/read&quot; 
-d &apos;[&quot;ZrKML5WiyFm&quot;,&quot;Gc03smoTm6q&quot;]&apos;  -X POST 
-H &quot;Content-Type: application/json&quot; -u admin:district -v</screen></para>
      <para>The response is a <emphasis role="italic">200 OK</emphasis> with the following JSON
        body:<screen>{ &quot;markedRead&quot; : [ &quot;ZrKML5WiyFm&quot;, &quot;Gc03smoTm6q&quot; ] }</screen></para>
    </section>
    <section>
      <title>Tickets</title>
      <para>You can use the "write feedback" tool to create tickets and messages. The only
        difference between a ticket and a message is that you can give a status and a priority to a
        ticket. To do this, use these
        API<screen>POST https://play.dhis2.org/demo/api/26/messageConversations/&lt;uid>/status</screen><screen>POST https://play.dhis2.org/demo/api/26/messageConversations/&lt;uid>/priority</screen></para>
      <para>
        <table frame="all">
          <title>A list of valid status and priority values</title>
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Status</entry>
                <entry>Priority</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>OPEN</entry>
                <entry>LOW</entry>
              </row>
              <row>
                <entry>PENDING</entry>
                <entry>MEDIUM</entry>
              </row>
              <row>
                <entry>INVALID</entry>
                <entry>HIGH</entry>
              </row>
              <row>
                <entry>SOLVED</entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>You can also add an internal message to a ticket, which can only be seen by users who
        have "Manage tickets" permissions. To create an internal reply, include the "internal"
        parameter, and set it
        to<screen>curl -d &quot;This is an internal message&quot;
  &quot;https://play.dhis2.org/demo/api/26/messageConversations/ZjHHSjyyeJ2?internal=true&quot; 
  -H &quot;Content-Type:text/plain&quot; -u admin:district -X POST -v</screen></para>
    </section>
  </section>
  <section xml:id="webapi_interpretations">
    <title>Interpretations</title>
    <para>For resources related to data analysis in DHIS 2, such as pivot tables, charts, maps,
      event reports and event charts, you can write and share data interpretations. An
      interpretation can be a comment, question, observation or interpretation about a data report
      or visualization.<screen>/api/26/interpretations</screen></para>
    <section xml:id="webapi_reading_interpretations">
      <title>Reading interpretations</title>
      <para>To read interpretations we will interact with the <emphasis role="italic"
          >/api/26/interpretations</emphasis> resource. A typical GET request using field filtering
        can look like
        this:<screen>GET /api/26/interpretations?fields=*,comments[id,text,user]</screen></para>
      <para>The output in JSON response format could look like below (additional fields omitted for
        brevity):</para>
      <screen>{
    &quot;interpretations&quot;: [{
        &quot;id&quot;: &quot;XSHiFlHAhhh&quot;,
        &quot;created&quot;: &quot;2013-05-30T10:24:06.181+0000&quot;,
        "text": "Data looks suspicious, could be a data entry mistake.",
        &quot;type&quot;: &quot;REPORT_TABLE&quot;,
        "likes": 2,
        "user": {
          "id": "uk7diLujYif"
        },
        "reportTable": {
          "id": "LcSxnfeBxyi"
        }
    }, {
        &quot;id&quot;: &quot;kr4AnZmYL43&quot;,
        &quot;created&quot;: &quot;2013-05-29T14:47:13.081+0000&quot;,
        "text": "Delivery rates in Bo looks high.",
        &quot;type&quot;: &quot;CHART&quot;,
        "likes": 3,
        "user": {
          "id": "uk7diLujYif"
        },
        "chart": {
          "id": "HDEDqV3yv3H"
        },
        &quot;comments&quot;: [{
            "id": "iB4Etq8yTE6",
            "text": "This report indicates a surge",
            "user": {
                "id": "B4XIfwOcGyI"
            }, {
            "id": "iB4Etq8yTE6",
            "text": "Likely caused by heavy rainfall",
            "user": {
                "id": "B4XIfwOcGyI"
            }]
        }
    }]
}</screen>
      <table frame="all">
        <title>Interpretation fields</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="3*"/>
          <thead>
            <row>
              <entry>Field</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>id</entry>
              <entry>The interpretation identifier.</entry>
            </row>
            <row>
              <entry>created</entry>
              <entry>The time of when the interpretation was created.</entry>
            </row>
            <row>
              <entry>type</entry>
              <entry>The type of analytical object being interpreted. Valid options: REPORT_TABLE,
                CHART, MAP, EVENT_REPORT, EVENT_CHART, DATASET_REPORT.</entry>
            </row>
            <row>
              <entry>user</entry>
              <entry>Association to the user creating the interpretation.</entry>
            </row>
            <row>
              <entry>reportTable</entry>
              <entry>Association to the report table if type is REPORT_TABLE.</entry>
            </row>
            <row>
              <entry>chart</entry>
              <entry>Association to the chart if type is CHART.</entry>
            </row>
            <row>
              <entry>map</entry>
              <entry>Association to the map if type is MAP.</entry>
            </row>
            <row>
              <entry>eventReport</entry>
              <entry>Association to the event report is type is EVENT_REPORT.</entry>
            </row>
            <row>
              <entry>eventChart</entry>
              <entry>Association to the event chart if type is EVENT_CHART.</entry>
            </row>
            <row>
              <entry>dataSet</entry>
              <entry>Association to the data set if type is DATASET_REPORT.</entry>
            </row>
            <row>
              <entry>comments</entry>
              <entry>Array of comments for the interpretation. The text field holds the actual
                comment.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>For all analytical objects you can append <emphasis role="italic">/data</emphasis> to
        the URL to retrieve the data associated with the resource (as apposed to the metadata). As
        an example, by following the map link and appending /data one can retrieve a PNG (image)
        representation of the thematic map through the following URL:</para>
      <screen>https://play.dhis2.org/demo/api/26/maps/bhmHJ4ZCdCd/data</screen>
    </section>
    <section xml:id="webapi_writing_interpretations">
      <title>Writing interpretations</title>
      <para>When writing interpretations you will supply the interpretation text as the request body
        using a POST request with content type "text/plain". The URL pattern looks like the below,
        where {object-type} refers to the type of the object being interpreted, and {object-id}
        refers to the identifier of the obejct being
        interpreted.<screen>/api/26/interpretations/{object-type}/{object-id}</screen></para>
      <para>Valid options for object type are <emphasis>reportTable</emphasis>,
          <emphasis>chart</emphasis>, <emphasis>map</emphasis>, <emphasis>eventReport</emphasis>,
          <emphasis>eventChart</emphasis> and <emphasis>dataSetReport</emphasis>.</para>
      <para>Some valid examples for interpretations are listed
        below.<screen>/api/26/interpretations/reportTable/yC86zJxU1i1
/api/26/interpretations/chart/ZMuYVhtIceD
/api/26/interpretations/map/FwLHSMCejFu
/api/26/interpretations/eventReport/xJmPLGP3Cde
/api/26/interpretations/eventChart/nEzXB2M9YBz
/api/26/interpretations/dataSetReport/tL7eCjmDIgM</screen>As
        an example we will start by writing an interpretation for the chart with identifier
          <emphasis>EbRN2VIbPdV</emphasis>. To write chart interpretations we will interact with the
          <emphasis>/api/26/interpretations/chart/{chartId}</emphasis> resource. The interpretation
        will be the request body. Based on this we can put together the following request using
        cURL:</para>
      <screen>curl -d &quot;This chart shows a significant ANC 1-3 dropout&quot; -X POST
  &quot;https://play.dhis2.org/demo/api/26/interpretations/chart/EbRN2VIbPdV&quot;
  -H &quot;Content-Type:text/plain&quot; -u admin:district</screen>
      <para>Notice that the response provides a Location header with a value indicating the location
        of the created interpretation. This is useful from a client perspective when you would like
        to add a comment to the interpretation.</para>
    </section>
    <section xml:id="webapi_updating_removing_interpretations">
      <title>Updating and removing interpretations</title>
      <para>To update an existing interpretation you can use a PUT request where the interpretation
        text is the request body using the following URL pattern, where {id} refers to the
        interpretation identifier:<screen>/api/26/interpretations/{id}</screen></para>
      <para>Based on this we can use curl to update the
        interpretation:<screen>curl -d "This charts shows a high dropout" -X PUT
  &quot;https://play.dhis2.org/demo/api/26/interpretations/chart/EV08iI1cJRA&quot;
  -H "Content-Type:text/plain" -u admin:district</screen></para>
      <para>You can use the same URL pattern as above using a DELETE request to remove the
        interpretation.</para>
    </section>
    <section xml:id="webapi_creating_interpretation_comments">
      <title>Creating interpretation comments</title>
      <para>When writing comments to interpretations you will supply the comment text as the request
        body using a POST request with content type "text/plain". The URL pattern looks like the
        below, where {interpretation-id} refers to the interpretation
        identifier.<screen>/api/26/interpretations/{interpretation-id}/comments</screen></para>
      <para>Second, we will write a comment to the interpretation we wrote in the example above. By
        looking at the interpretation response you will see that a <emphasis role="italic"
          >Location</emphasis> header is returned. This header tells us the URL of the newly created
        interpretation and from that we can read its identifier. This identifier is randomly
        generated so you will have to replace the one in the command below with your own. To write a
        comment we can interact with the <emphasis>/api/26/interpretations/{id}/comments"</emphasis>
        resource like this:</para>
      <screen>curl -d &quot;An intervention is needed&quot; -X POST
  &quot;https://play.dhis2.org/demo/api/26/interpretations/j8sjHLkK8uY/comments&quot;
  -H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
    </section>
    <section xml:id="webapi_updating_removing_interpretation_comments">
      <title>Updating and removing interpretation comments</title>
      <para>To updating an interpretation comment you can use a PUT request where the comment text
        is the request body using the following URL
        pattern:<screen>/api/26/interpretations/{interpretation-id}/comments/{comment-id}</screen></para>
      <para>Based on this we can use curl to update the
        comment:<screen>curl -d "I agree with that." -X PUT
  https://play.dhis2.org/demo/api/26/interpretations/j8sjHLkK8uY/comments/idAzzhVWvh2"
  -H "Content-Type:text/plain" -u admin:district -v</screen></para>
      <para>You can use the same URL pattern as above using a DELETE request to the remove the
        interpretation comment.</para>
    </section>
    <section xml:id="webapi_liking_interpretations">
      <title>Liking interpretations</title>
      <para>To like an interpretation you can use an empty POST request to the
          <emphasis>like</emphasis>
        resource:<screen>POST /api/26/interpretations/{id}/like</screen></para>
      <para>A like will be added for the currently authenticated user. A user can only like an
        interpretation once.</para>
      <para>To remove a like for an interpretation you can use a DELETE request to the same resource
        as for the like operation.</para>
      <para>The like status of an intepretation can be viewed by looking at the regular Web API
        representation:<screen>GET /api/26/interpretations/{id}</screen></para>
      <para>The like information is found in the <emphasis>likes</emphasis> field, which represents
        the number of likes, and the <emphasis>likedBy</emphasis> array, which enumerates the users
        who have liked the interpretation.</para>
      <para>
        <screen>{
    &quot;id&quot;: &quot;XSHiFlHAhhh&quot;,
    "text": "Data looks suspicious, could be a data entry mistake.",
    &quot;type&quot;: &quot;REPORT_TABLE&quot;,
    "likes": 2,
    "likedBy": [{
        "id": "k7Hg12fJ2f1"
    }, {
        "id: "gYhf26fFkjFS"
    }]
}</screen>
      </para>
    </section>
  </section>
  <section xml:id="webapi_viewing_analytical_resource_representations">
    <title>Viewing analytical resource representations</title>
    <para>DHIS2 has several resources for data analysis. These resources include <emphasis
        role="italic">charts</emphasis>, <emphasis role="italic">maps</emphasis>, <emphasis
        role="italic">reportTables</emphasis>, <emphasis role="italic">reports</emphasis> and
        <emphasis>documents</emphasis>. By visiting these resources you will retrieve
      information about the resource. For instance, by navigating to <emphasis role="italic"
        >api/charts/R0DVGvXDUNP</emphasis> the response will contain the name, last date of
      modication and so on for the chart. To retrieve the analytical representation, for instance a
      PNG representation of the chart, you can append <emphasis role="italic">/data</emphasis> to
      all these resources. For instance, by visiting <emphasis role="italic"
        >api/charts/R0DVGvXDUNP/data</emphasis> the system will return a PNG image of the
      chart.</para>
    <table frame="all">
      <title>Analytical resources</title>
      <tgroup cols="4">
        <colspec colnum="1" colname="c1" colwidth="1.01*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="1.93*"/>
        <colspec colnum="4" colname="newCol4" colwidth="1.91*"/>
        <thead>
          <row>
            <entry>Resource</entry>
            <entry>Description</entry>
            <entry>Data URL</entry>
            <entry>Resource representations</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>charts</entry>
            <entry>Charts</entry>
            <entry>api/charts/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>eventCharts</entry>
            <entry>Event charts</entry>
            <entry>api/eventCharts/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>maps</entry>
            <entry>Maps</entry>
            <entry>api/maps/&lt;identifier&gt;/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>reportTables</entry>
            <entry>Pivot tables</entry>
            <entry>api/reportTables/&lt;identifier&gt;/data</entry>
            <entry>json | jsonp | html | xml | pdf | xls | csv</entry>
          </row>
          <row>
            <entry>reports</entry>
            <entry>Standard reports</entry>
            <entry>api/reports/&lt;identifier&gt;/data</entry>
            <entry>pdf | xls | html</entry>
          </row>
          <row>
            <entry>documents</entry>
            <entry>Resources</entry>
            <entry>api/documents/&lt;identifier&gt;/data</entry>
            <entry>&lt;follows document&gt;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The data content of the analytical representations can be modified by providing a
        <emphasis role="italic">date</emphasis> query parameter. This requires that the analytical
      resource is set up for relative periods for the period dimension.</para>
    <table frame="all">
      <title>Data query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="1.31*"/>
        <colspec colnum="3" colname="c3" colwidth="2.34*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Value</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>date</entry>
            <entry>Date in yyyy-MM-dd format</entry>
            <entry>Basis for relative periods in report (requires relative periods)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <table frame="all">
      <title>Query parameters for png / image types (charts, maps)</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="3.65*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>width</entry>
            <entry>Width of image in pixels</entry>
          </row>
          <row>
            <entry>height</entry>
            <entry>Height of image in pixels</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Some examples of valid URLs for retrieving various analytical representations are listed
      below.</para>
    <screen>/api/26/charts/R0DVGvXDUNP/data
/api/26/charts/R0DVGvXDUNP/data?date=2013-06-01

/api/26/reportTables/jIISuEWxmoI/data.html
/api/26/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
/api/26/reportTables/FPmvWs7bn2P/data.xls
/api/26/reportTables/FPmvWs7bn2P/data.pdf

/api/26/maps/DHE98Gsynpr/data
/api/26/maps/DHE98Gsynpr/data?date=2013-07-01

/api/26/reports/OeJsA6K1Otx/data.pdf
/api/26/reports/OeJsA6K1Otx/data.pdf?date=2014-01-01</screen>
  </section>
  <section xml:id="webapi_plugins">
    <title>Plugins</title>
    <para>DHIS2 comes with plugins which enables you to embed live data directly in your web portal
      or web site. Currently, plugins exist for charts, maps and pivot tables.</para>
    <section>
      <title>Embedding pivot tables with the Pivot Table plug-in</title>
      <para>In this example we will see how we can embed good-looking, light-weight html pivot
        tables with data served from a DHIS2 back-end into a Web page. To accomplish this we will use
        the Pivot table plug-in. The plug-in is written in Javascript and depends on the Ext JS
        library only. A complete working example can be found at <link
          xl:href="http://play.dhis2.org/portal/table.html"/>. Open the page in a web browser and
        view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup
        puts two tables in our web page. The first one is referring to an existing table. The second
        is configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;https://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://dhis2-cdn.org/v215/plugin/table.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://play.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {

      // Referring to an existing table through the id parameter, render to &quot;table1&quot; div

      DHIS.getTable({ url: base, el: &quot;table1&quot;, id: &quot;R0DVGvXDUNP&quot; });

      // Full table configuration, render to &quot;table2&quot; div

      DHIS.getTable({
        url: base,
        el: &quot;table2&quot;,
        columns: [
          {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
        ],
        rows: [
          {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
        ],
        filters: [
          {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
        ],
        // All following options are optional
        showTotals: false,
        showSubTotals: false,
        hideEmptyRows: true,
        showHierarchy: true,
        displayDensity: &quot;comfortable&quot;,
        fontSize: &quot;large&quot;,
        digitGroupSeparator: &quot;comma&quot;,
        legendSet: {id: &quot;BtxOoQuLyg1&quot;}
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;table1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;table2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen>
      </para>
      <para>Three files are included in the header section of the HTML document. The first two files
        are the Ext JS javascript library (we use the DHIS2 content delivery network in this case)
        and its css stylesheet. The third file is the Pivot table plug-in. Make sure the path is
        pointing to your DHIS2 server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/table.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS2 server we use the same approach as in the previous
        section. In the header of the HTML document we include the following Javascript inside a
        script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented
        later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your
        DHIS2 installation.</para>
      <screen>var base = &quot;https://play.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
      success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the Pivot table plug-in. Two properies
        are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic"
          >url</emphasis> (please refer to the table below). Now, if you want to refer to
        pre-defined tables already made inside DHIS2 it is sufficient to provide the additional
          <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a pivot
        table dynamically you shoud omit the id parameter and provide data dimensions inside a
          <emphasis role="italic">columns</emphasis> array, a <emphasis role="italic"
          >rows</emphasis> array and optionally a <emphasis role="italic">filters</emphasis> array
        instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis
          role="italic">dimension</emphasis>. This property accepts the following values: <emphasis
          role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data
        element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic"
          >dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period),
          <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation
        unit group set or data element group set (can be found in the web api). The data dimension
        also has an array property called <emphasis role="italic">items</emphasis> which accepts
        objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2
        Coverage&quot; and &quot;ANC 3 Coverage&quot; on the columns in your table you can make the
        following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [
    {id: &quot;Uvn6LCg7dVU&quot;}, // the id of ANC 1 Coverage
    {id: &quot;OdiHJayrsKo&quot;}, // the id of ANC 2 Coverage
    {id: &quot;sB79w2hiLp8&quot;}  // the id of ANC 3 Coverage
  ]
}]</screen>
      <table>
        <title>Pivot table plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the table in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS2 server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined table (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in table as columns</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in table as rows</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Data dimensions to include in table as filters</entry>
            </row>
            <row>
              <entry>showTotals</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>true | false</entry>
              <entry>Whether to display totals for columns and rows</entry>
            </row>
            <row>
              <entry>showSubTotals</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>true | false</entry>
              <entry>Whether to display sub-totals for columns and rows</entry>
            </row>
            <row>
              <entry>hideEmptyRows</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide rows with no data</entry>
            </row>
            <row>
              <entry>showHierarchy</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to extend orgunit names with the name of all anchestors</entry>
            </row>
            <row>
              <entry>displayDensity</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;normal&quot; | &quot;comfortable&quot; | &quot;compact&quot;</entry>
              <entry>The amount of space inside table cells</entry>
            </row>
            <row>
              <entry>fontSize</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;normal&quot; | &quot;large&quot; | &quot;small&quot;</entry>
              <entry>Table font size</entry>
            </row>
            <row>
              <entry>digitGroupSeparator</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;space&quot; | &quot;comma&quot; | &quot;none&quot;</entry>
              <entry>How values are formatted: 1 000 | 1,000 | 1000</entry>
            </row>
            <row>
              <entry>legendSet</entry>
              <entry>object</entry>
              <entry>No</entry>
              <entry/>
              <entry>Show a color indicator next to the values (currently reusing legend sets from
                GIS)</entry>
            </row>
            <row>
              <entry>userOrgUnit</entry>
              <entry>string / array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Organisation unit identifiers, overrides organisation units associated with
                curretn user, single or array</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by adding one pre-defined and one dynamic pivot table to our HTML document.
        You can browse the list of available pivot tables using the Web API here: <link
          xl:href="http://play.dhis2.org/demo/api/24/reportTables"/>.</para>
      <screen>function setLinks() {
  DHIS.getTable({ url: base, el: &quot;table1&quot;, id: &quot;R0DVGvXDUNP&quot; });

  DHIS.getTable({
 url: base,
 el: &quot;table2&quot;,
 columns: [
   {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
 ],
 rows: [
   {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
 ],
 filters: [
   {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
 ],
 // All following options are optional
 showTotals: false,
 showSubTotals: false,
 hideEmptyRows: true,
 showHierarchy: true,
 displayDensity: &quot;comfortable&quot;,
 fontSize: &quot;large&quot;,
 digitGroupSeparator: &quot;comma&quot;,
 legendSet: {id: &quot;BtxOoQuLyg1&quot;}
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body
        section of the HTML document with the identifiers referred to in the plug-in
        Javascript.</para>
      <screen>&lt;div id=&quot;table1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;table2&quot;&gt;&lt;/div&gt;</screen>
      <para>To see a complete working example please visit <link
          xl:href="http://play.dhis2.org/portal/table.html"/>.</para>
    </section>
    <section>
      <title>Embedding charts with the Visualizer chart plug-in</title>
      <para>In this example we will see how we can embed good-looking Ext JS charts (<link
          xl:href="http://www.sencha.com/products/extjs"/>) with data served from a DHIS2 back-end
        into a Web page. To accomplish this we will use the DHIS2 Visualizer plug-in. The plug-in is
        written in Javascript and depends on the Ext JS library only. A complete working example can
        be found at <link xl:href="http://play.dhis2.org/portal/chart.html"/>. Open the page in a
        web browser and view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup
        puts two charts in our web page. The first one is referring to an existing chart. The second
        is configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/chart.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://play.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {

      // Referring to an existing chart through the id parameter, render to &quot;chart1&quot; div

      DHIS.getChart({ url: base, el: &quot;chart1&quot;, id: &quot;R0DVGvXDUNP&quot; });

      // Full chart configuration, render to &quot;chart2&quot; div

      DHIS.getChart({
        url: base,
        el: &quot;chart2&quot;,
        type: &quot;stackedBar&quot;,
        columns: [ // Chart series
          {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
        ],
        rows: [ // Chart categories
          {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
        ],
        filters: [
          {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
        ],
        // All following options are optional
        showData: false,
        targetLineValue: 70,
        baseLineValue: 20,
        showTrendLine: true,
        hideLegend: true,
        title: &quot;My chart title&quot;,
        domainAxisTitle: &quot;Periods&quot;,
        rangeAxisTitle: &quot;Percent&quot;
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;chart1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;chart2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen>
      </para>
      <para>Three files are included in the header section of the HTML document. The first two files
        are the Ext JS javascript library (we use the DHIS2 content delivery network in this case)
        and its stylesheet. The third file is the Visualizer plug-in. Make sure the path is pointing
        to your DHIS2 server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/chart.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS2 server we use the same approach as in the previous
        section. In the header of the HTML document we include the following Javascript inside a
        script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented
        later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your
        DHIS2 installation.</para>
      <screen>var base = &quot;https://play.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the Visualizer plug-in. Two properies
        are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic"
          >url</emphasis> (please refer to the table below). Now, if you want to refer to
        pre-defined charts already made inside DHIS2 it is sufficient to provide the additional
          <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a chart
        dynamically you shoud omit the id parameter and provide data dimensions inside a <emphasis
          role="italic">columns</emphasis> array (chart series), a <emphasis role="italic"
          >rows</emphasis> array (chart categories) and optionally a <emphasis role="italic"
          >filters</emphasis> array instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis
          role="italic">dimension</emphasis>. This property accepts the following values: <emphasis
          role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data
        element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic"
          >dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period),
          <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation
        unit group set or data element group set (can be found in the web api). The data dimension
        also has an array property called <emphasis role="italic">items</emphasis> which accepts
        objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2
        Coverage&quot; and &quot;ANC 3 Coverage&quot; as series in your chart you can make the
        following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // could be &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [
    {id: &quot;Uvn6LCg7dVU&quot;}, // the id of ANC 1 Coverage
    {id: &quot;OdiHJayrsKo&quot;}, // the id of ANC 2 Coverage
    {id: &quot;sB79w2hiLp8&quot;}  // the id of ANC 3 Coverage
  ]
}]</screen>
      <table>
        <title>Visualizer chart plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the chart in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS2 server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined chart (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>type</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>column | stackedcolumn | bar | stackedbar | line | area | pie</entry>
              <entry>Chart type</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in chart as series</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Data dimensions to include in chart as category</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Data dimensions to include in chart as filters</entry>
            </row>
            <row>
              <entry>showData</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to display data on the chart</entry>
            </row>
            <row>
              <entry>showTrendLine</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to display trend line(s) on the chart</entry>
            </row>
            <row>
              <entry>hideLegend</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide the chart legend</entry>
            </row>
            <row>
              <entry>hideTitle</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Whether to hide the chart title</entry>
            </row>
            <row>
              <entry>targetLineValue</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry/>
              <entry>Value of target line to display on the chart</entry>
            </row>
            <row>
              <entry>targetLineLabel</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Label for target line</entry>
            </row>
            <row>
              <entry>baseLineValue</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry/>
              <entry>Value of baseline to display on the chart</entry>
            </row>
            <row>
              <entry>baseLineLabel</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Label for baseline</entry>
            </row>
            <row>
              <entry>domainAxisTitle</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Title for the domain axis</entry>
            </row>
            <row>
              <entry>rangeAxisTitle</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Title for the range axis</entry>
            </row>
            <row>
              <entry>width</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Width of chart</entry>
            </row>
            <row>
              <entry>height</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Height of chart</entry>
            </row>
            <row>
              <entry>userOrgUnit</entry>
              <entry>string / array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Organisation unit identifiers, overrides organisation units associated with
                curretn user, single or array</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by including two pre-defined charts and to dynamic charts to our HTML
        document. You can browse the list of available charts using the Web API here: <link
          xl:href="http://play.dhis2.org/demo/api/24/charts"/>.</para>
      <screen>function setLinks() {
  DHIS.getChart({ url: base, el: &quot;chart1&quot;, id: &quot;R0DVGvXDUNP&quot; });

  DHIS.getChart({
 url: base,
 el: &quot;chart2&quot;,
 type: &quot;stackedBar&quot;,
 columns: [ // Chart series
   {dimension: &quot;de&quot;, items: [{id: &quot;YtbsuPPo010&quot;}, {id: &quot;l6byfWFUGaP&quot;}]}
 ],
 rows: [ // Chart categories
   {dimension: &quot;pe&quot;, items: [{id: &quot;LAST_12_MONTHS&quot;}]}
 ],
 filters: [
   {dimension: &quot;ou&quot;, items: [{id: &quot;USER_ORGUNIT&quot;}]}
 ],
 // All following options are optional
 showData: false,
 targetLineValue: 70,
 baseLineValue: 20,
 showTrendLine: true,
 hideLegend: true,
 title: &quot;My chart title&quot;,
 domainAxisTitle: &quot;Periods&quot;,
 rangeAxisTitle: &quot;Percent&quot;
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body
        section of the HTML document with the identifiers referred to in the plug-in
        Javascript.</para>
      <screen>&lt;div id=&quot;chart1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chart2&quot;&gt;&lt;/div&gt;
</screen>
      <para>To see a complete working example please visit <link
          xl:href="http://play.dhis2.org/portal/chart.html"/>.</para>
    </section>
    <section>
      <title>Embedding maps with the GIS map plug-in</title>
      <para>In this example we will see how we can embed maps with data served from a DHIS2 back-end
        into a Web page. To accomplish this we will use the GIS map plug-in. The plug-in is written
        in Javascript and depends on the Ext JS library only. A complete working example can be
        found at <link xl:href="http://play.dhis2.org/portal/map.html"/>. Open the page in a web
        browser and view the source to see how it is set up.</para>
      <para>We start by having a look at what the complete html file could look like. This setup
        puts two maps in our web page. The first one is referring to an existing map. The second is
        configured inline.
        <screen>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/openlayers/OpenLayers.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/map.js&quot;&gt;&lt;/script&gt;

  &lt;script&gt;
    var base = &quot;https://play.dhis2.org/demo&quot;;

    // Login - if OK, call the setLinks function

    Ext.onReady( function() {
      Ext.Ajax.request({
        url: base + &quot;dhis-web-commons-security/login.action&quot;,
        method: &quot;POST&quot;,
        params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
        success: setLinks
      });
    });

    function setLinks() {
      DHIS.getMap({ url: base, el: &quot;map1&quot;, id: &quot;ytkZY3ChM6J&quot; });

      DHIS.getMap({
        url: base,
        el: &quot;map2&quot;,
        mapViews: [{
          columns: [{dimension: &quot;in&quot;, items: [{id: &quot;Uvn6LCg7dVU&quot;}]}], // data
          rows: [{dimension: &quot;ou&quot;, items: [{id: &quot;LEVEL-3&quot;}, {id: &quot;ImspTQPwCqd&quot;}]}], // organisation units,
          filters: [{dimension: &quot;pe&quot;, items: [{id: &quot;LAST_3_MONTHS&quot;}]}], // period
          // All following options are optional
          classes: 7,
          colorLow: &quot;02079c&quot;,
          colorHigh: &quot;e5ecff&quot;,
          opacity: 0.9,
          legendSet: {id: &quot;fqs276KXCXi&quot;}
        }]
      });
    }
  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;map1&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;map2&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</screen></para>
      <para>Four files and Google Maps are included in the header section of the HTML document. The
        first two files are the Ext JS javascript library (we use the DHIS2 content delivery
        network in this case) and its stylesheet. The third file is the OpenLayers javascript
        mapping framework (<link xl:href="http://openlayers.org"/>) and finally we include the GIS
        map plug-in. Make sure the path is pointing to your DHIS2 server installation.</para>
      <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v215/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/openlayers/OpenLayers.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v215/plugin/map.js&quot;&gt;&lt;/script&gt;</screen>
      <para>To authenticate with the DHIS2 server we use the same approach as in the previous
        section. In the header of the HTML document we include the following Javascript inside a
        script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented
        later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your
        DHIS2 installation.</para>
      <screen>Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
      <para>Now let us have a look at the various options for the GIS plug-in. Two properies are
        required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis>
        (please refer to the table below). Now, if you want to refer to pre-defined maps already
        made in the DHIS2 GIS it is sufficient to provide the additional <emphasis role="italic"
          >id</emphasis> parameter. If you instead want to configure a map dynamically you shoud
        omit the id parameter and provide <emphasis role="italic">mapViews</emphasis> (layers)
        instead. They should be configured with data dimensions inside a <emphasis role="italic"
          >columns</emphasis> array, a <emphasis role="italic">rows</emphasis> array and optionally
        a <emphasis role="italic">filters</emphasis> array instead.</para>
      <para>A data dimension is defined as an object with a text property called <emphasis
          role="italic">dimension</emphasis>. This property accepts the following values: <emphasis
          role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data
        element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic"
          >dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period),
          <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation
        unit group set or data element group set (can be found in the web api). The data dimension
        also has an array property called <emphasis role="italic">items</emphasis> which accepts
        objects with an <emphasis role="italic">id</emphasis> property.</para>
      <para>To sum up, if you want to have a layer with e.g. &quot;ANC 1 Coverage&quot; in your map
        you can make the following <emphasis role="italic">columns</emphasis> config:</para>
      <screen>columns: [{
  dimension: &quot;in&quot;, // could be &quot;in&quot;, &quot;de&quot;, &quot;ds&quot;, &quot;dc&quot;, &quot;pe&quot;, &quot;ou&quot; or any dimension id
  items: [{id: &quot;Uvn6LCg7dVU&quot;}], // the id of ANC 1 Coverage
}]</screen>
      <table>
        <title>GIS map plug-in configuration</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry> Param </entry>
              <entry> Type </entry>
              <entry> Required </entry>
              <entry> Options (default first) </entry>
              <entry> Description </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>el</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Identifier of the HTML element to render the map in your web page</entry>
            </row>
            <row>
              <entry>url</entry>
              <entry>string</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Base URL of the DHIS2 server</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry/>
              <entry>Identifier of a pre-defined map (favorite) in DHIS</entry>
            </row>
            <row>
              <entry>baseLayer</entry>
              <entry>string/boolean</entry>
              <entry>No</entry>
              <entry>&apos;gs&apos;, &apos;googlestreets&apos; | &apos;gh&apos;,
                &apos;googlehybrid&apos; | &apos;osm&apos;, &apos;openstreetmap&apos; | false, null,
                &apos;none&apos;, &apos;off&apos;</entry>
              <entry>Show background map</entry>
            </row>
            <row>
              <entry>hideLegend</entry>
              <entry>boolean</entry>
              <entry>No</entry>
              <entry>false | true</entry>
              <entry>Hide legend panel</entry>
            </row>
            <row>
              <entry>mapViews</entry>
              <entry>array</entry>
              <entry>Yes (if no id provided)</entry>
              <entry/>
              <entry>Array of layers</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>If no id is provided you must add map view objects with the following config
        options:</para>
      <table>
        <title>Map plug-in configuration</title>
        <tgroup cols="5">
          <tbody>
            <row>
              <entry>layer</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;thematic1&quot; | &quot;thematic2&quot; | &quot;thematic3&quot; |
                &quot;thematic4&quot; | &quot;boundary&quot; | &quot;facility&quot; | </entry>
              <entry>The layer to which the map view content should be added</entry>
            </row>
            <row>
              <entry>columns</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Indicator, data element, data operand or data set (only one will be
                used)</entry>
            </row>
            <row>
              <entry>rows</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Organisation units (multiple allowed)</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>array</entry>
              <entry>Yes</entry>
              <entry/>
              <entry>Period (only one will be used)</entry>
            </row>
            <row>
              <entry>classes</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>5 | 1-7</entry>
              <entry>The number of automatic legend classes</entry>
            </row>
            <row>
              <entry>method</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>2 | 3</entry>
              <entry>Legend calculation method where 2 = equal intervals and 3 = equal
                counts</entry>
            </row>
            <row>
              <entry>colorLow</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;ff0000&quot; (red) | Any hex color</entry>
              <entry>The color representing the first automatic legend class</entry>
            </row>
            <row>
              <entry>colorHigh</entry>
              <entry>string</entry>
              <entry>No</entry>
              <entry>&quot;00ff00&quot; (green) | Any hex color</entry>
              <entry>The color representing the last automatic legend class</entry>
            </row>
            <row>
              <entry>radiusLow</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>5 | Any integer</entry>
              <entry>Only applies for facilities (points) - radius of the point with lowest
                value</entry>
            </row>
            <row>
              <entry>radiusHigh</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry>15 | Any integer</entry>
              <entry>Only applies for facilities (points) - radius of the point with highest
                value</entry>
            </row>
            <row>
              <entry>opacity</entry>
              <entry>double</entry>
              <entry>No</entry>
              <entry>0.8 | 0 - 1</entry>
              <entry>Opacity/transparency of the layer content</entry>
            </row>
            <row>
              <entry>legendSet</entry>
              <entry>object</entry>
              <entry>No</entry>
              <entry/>
              <entry>Pre-defined legend set. Will override the automatic legend set.</entry>
            </row>
            <row>
              <entry>labels</entry>
              <entry>boolean/object</entry>
              <entry>No</entry>
              <entry>false | true | object properties: fontSize (integer), color (hex string),
                strong (boolean), italic (boolean)</entry>
              <entry>Show labels on the map</entry>
            </row>
            <row>
              <entry>width</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Width of map</entry>
            </row>
            <row>
              <entry>height</entry>
              <entry>integer</entry>
              <entry>No</entry>
              <entry/>
              <entry>Height of map</entry>
            </row>
            <row>
              <entry>userOrgUnit</entry>
              <entry>string / array</entry>
              <entry>No</entry>
              <entry/>
              <entry>Organisation unit identifiers, overrides organisation units associated with
                curretn user, single or array</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>We continue by adding one pre-defined and one dynamically configured map to our HTML
        document. You can browse the list of available maps using the Web API here: <link
          xl:href="http://play.dhis2.org/demo/api/24/maps"/>.</para>
      <screen>function setLinks() {
  DHIS.getMap({ url: base, el: &quot;map1&quot;, id: &quot;ytkZY3ChM6J&quot; });

  DHIS.getMap({
 url: base,
 el: &quot;map2&quot;,
 mapViews: [
   columns: [ // Chart series
  columns: [{dimension: &quot;in&quot;, items: [{id: &quot;Uvn6LCg7dVU&quot;}]}], // data
   ],
   rows: [ // Chart categories
  rows: [{dimension: &quot;ou&quot;, items: [{id: &quot;LEVEL-3&quot;}, {id: &quot;ImspTQPwCqd&quot;}]}], // organisation units
   ],
   filters: [
  filters: [{dimension: &quot;pe&quot;, items: [{id: &quot;LAST_3_MONTHS&quot;}]}], // period
   ],
   // All following options are optional
   classes: 7,
   colorLow: &quot;02079c&quot;,
   colorHigh: &quot;e5ecff&quot;,
   opacity: 0.9,
   legendSet: {id: &quot;fqs276KXCXi&quot;}
 ]
  });
}</screen>
      <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body
        section of the HTML document with the identifiers referred to in the plug-in
        Javascript.</para>
      <screen>&lt;div id=&quot;map1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;map2&quot;&gt;&lt;/div&gt;</screen>
      <para>To see a complete working example please visit <link
          xl:href="http://play.dhis2.org/portal/map.html"/>.</para>
    </section>
    <section>
      <title>Creating a chart carousel with the carousel plug-in</title>
      <para>The chart plug-in also makes it possible to create a chart carousel which for instance
        can be used to create an attractive front page on a Web portal. To use the carousel we need
        to import a few files in the head section of our HTML page:</para>
      <screen>
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/css/carousel.css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://play.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/Carousel.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://play.dhis2.org/demo/dhis-web-commons/javascripts/plugin/plugin.js&quot;&gt;&lt;/script&gt;</screen>
      <para>The first file is the CSS stylesheet for the chart plug-in. The second file is the CSS
        stylesheet for the carousel widget. The third file is the Ext JavaScript framework which
        this plug-in depends on. The fourth file is the carousel plug-in JavaScript file. The fifth
        file is the chart plug-in JavaScript file. The paths in this example points at the DHIS2
        demo site, make sure you update them to point to your own DHIS2 installation.</para>
      <para>Please refer to the section about the chart plug-in on how to do authentication.</para>
      <para>To create a chart carousel we will first render the charts we want to include in the
        carousel using the method described in the chart plug-in section. Then we create the chart
        carousel itself. The charts will be rendered into <emphasis role="italic">div</emphasis>
        elements which all have a CSS class called <emphasis role="italic">chart</emphasis>. In the
        carousel configuration we can then define a <emphasis role="italic">selector</emphasis>
        expression which refers to those div elements like this:</para>
      <screen>DHIS.getChart({ uid: &apos;R0DVGvXDUNP&apos;, el: &apos;chartA1&apos;, url: base });
DHIS.getChart({ uid: &apos;X0CPnV6uLjR&apos;, el: &apos;chartA2&apos;, url: base });
DHIS.getChart({ uid: &apos;j1gNXBgwKVm&apos;, el: &apos;chartA3&apos;, url: base });
DHIS.getChart({ uid: &apos;X7PqaXfevnL&apos;, el: &apos;chartA4&apos;, url: base });

new Ext.ux.carousel.Carousel( &apos;chartCarousel&apos;, {
  autoPlay: true,
  itemSelector: &apos;div.chart&apos;,
  interval: 5,
  showPlayButton: true
});</screen>
      <para>The first argument in the configuration is the id of the div element in which you want
        to render the carousel. The <emphasis role="italic">autoPlay</emphasis> configuration option
        refers to whether we want the carousel to start when the user loads the Web page. The
          <emphasis role="italic">interval</emphasis> option defines how many seconds each chart
        should be displayed. The <emphasis role="italic">showPlayButton</emphasis> defines whether
        we want to render a button for the user to start and stop the carousel. Finally we need to
        insert the div elements in the body of the HTML document:</para>
      <screen>&lt;div id=&quot;chartCarousel&quot;&gt;

&lt;div id=&quot;chartA1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA2&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA3&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA4&quot;&gt;&lt;/div&gt;</screen>
      <para>To see a complete working example please visit <link
          xl:href="http://play.dhis2.org/portal/carousel.html"/>.</para>
    </section>
  </section>
  <section xml:id="webapi_sql_views">
    <title>SQL views</title>
    <para>The SQL views resource allows you to create and retrieve the result set of SQL views. The
      SQL views can be executed directly against the database and render the result set through the
      Web API resource.<screen>/api/26/sqlViews</screen></para>
    <para>SQL views are useful for creating data views which may be more easily constructed with SQL
      compared combining the multiple objects of the Web API. As an example, lets assume we have
      been asked to provide a view of all organization units with their names, parent names,
      organization unit level and name, and the coordinates listed in the database. The view might
      look something like this: </para>
    <screen>SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name</screen>
    <para>We will use <emphasis role="italic">curl</emphasis> to first execute the view on the DHIS
      2 server. This is essentially a materialization process, and ensures that we have the most
      recent data available through the SQL view when it is retrieved from the server. You can first
      look up the SQL view from the api/sqlViews resource, then POST using the following
      command:</para>
    <screen>curl &quot;https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/execute&quot; -X POST -u admin:district -v</screen>
    <para>The next step in the process is the retrieval of the data.The basic structure of the URL
      is as follows</para>
    <screen>http://{server}/api/26/sqlViews/{id}/data(.csv)</screen>
    <para>The <parameter>{server}</parameter> parameter should be replaced with your own server. The
      next part of the URL <parameter>/api/sqlViews/</parameter> should be appended with the
      specific SQL view identifier. Append either <parameter>data</parameter> for XML data or
        <parameter>data.csv</parameter> for comma delimited values. Support response formats are
      json, xml, csv, xls, html and html+css. As an example, the following command would retrieve
      XML data for the SQL view defined
      above.<screen>curl &quot;https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/data.csv&quot; -u admin:district -v</screen></para>
    <para>There are three types of SQL views:<itemizedlist>
        <listitem>
          <para><emphasis role="italic">SQL view:</emphasis> Standard SQL views.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Materialized SQL view:</emphasis> SQL views which are
            materialized, meaning written to disk. Needs to be updated to reflect changes in
            underlying tables. Supports criteria to filter result set.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">SQL queries:</emphasis> Plain SQL queries. Support inline
            variables for customized queries.</para>
        </listitem>
      </itemizedlist></para>
    <section>
      <title>Criteria</title>
      <para>You can do simple filtering on the columns in the result set by appending <emphasis
          role="italic">criteria</emphasis> query parameters to the URL, using the column names and
        filter values separated by columns as parameter values, on the following format:</para>
      <screen>/api/26/sqlViews/{id}/data?criteria=col1:value1&amp;criteria=col2:value2</screen>
      <para>As an example, to filter the SQL view result set above to only return organisation units
        at level 4 you can use the following URL:</para>
      <screen>https://play.dhis2.org/demo/api/26/sqlViews/dI68mLkP1wN/data.csv?criteria=level:4</screen>
    </section>
    <section>
      <title>Variables</title>
      <para>SQL views support variable subsitution. Variable subsitition is only available for SQL
        view of type <emphasis role="italic">query</emphasis>, meaning SQL views which are not
        created in the database but simply executed as regular SQL queries. Variables can be
        inserted directly into the SQL query and must be on this
        format:<screen>${variable-key}</screen></para>
      <para>As an example, an SQL query that retrieves all data elements of a given value type where
        the value type is defined through a variable can look like
        this:<screen>select * from dataelement where valuetype = &apos;${valueType}&apos;;</screen></para>
      <para>These variables can then be supplied as part of the URL when requested through the
          <emphasis role="italic">sqlViews</emphasis> Web API resource. Variables can be supplied on
        the following
        format:<screen>/api/sqlViews/{id}/data?var=key1:value1&amp;var=key2:value2</screen></para>
      <para>An example query corresponding to the example above can look like
        this:<screen>/api/26/sqlViews/dI68mLkP1wN/data.json?var=valueType:int</screen></para>
      <para>The <emphasis role="italic">valueType</emphasis> variable will be subsituted with the
          <emphasis role="italic">int</emphasis> value, and the query will return data elements with
        int value type.</para>
      <para>The variable parameter must contain alphanumeric characters only. The variables must
        contain alphanumeric, dash, underscore and whitespace characters only.</para>
    </section>
  </section>
  <section xml:id="webapi_dashboard">
    <title>Dashboard</title>
    <para>The dashboard is designed to give you an overview of multiple analytical items like maps,
      charts, pivot tables and reports which together can provide a comprehensive overview of your
      data. Dashboards are available in the Web API through the <emphasis role="italic"
        >dashboards</emphasis> resource. A dashboard contains a list of dashboard <emphasis
        role="italic">items</emphasis>. An item can represent a single resource, like a chart, map
      or report table, or represent a list of links to analytical resources, like reports,
      resources, tabular reports and users. A dashboard item can contain up to eight links.
      Typically, a dashboard client could choose to visualize the single-object items directly in a
      user interface, while rendering the multi-object items as clickable
      links.<screen>/api/26/dashboards</screen></para>
    <section xml:id="webapi_browsing_dashboards">
      <title>Browsing dashboards</title>
      <para>To get a list of your dashboards with basic information including identifier, name and
        link in JSON format you can make a <emphasis role="italic">GET</emphasis> request to the
        following URL:</para>
      <screen>/api/26/dashboards.json</screen>
      <para>The dashboards resource will provide a list of dashboards. Remember that the dashboard
        object is shared so the list will be affected by the currently authenticated user. You can
        retrieve more information about a specific dashboard by following its link, similar to
        this:</para>
      <screen>/api/26/dashboards/vQFhmLJU5sK.json</screen>
      <para>A dashboard contains information like name and creation date and an array of dashboard
        items. The response in JSON format will look similar to this response (certain information
        has been removed for the sake of
        brevity).<screen>{
&quot;lastUpdated&quot; : &quot;2013-10-15T18:17:34.084+0000&quot;,
&quot;id&quot; : &quot;vQFhmLJU5sK&quot;,
&quot;created&quot; : &quot;2013-09-08T20:55:58.060+0000&quot;,
&quot;name&quot; : &quot;Mother and Child Health&quot;,
&quot;href&quot; : &quot;https://play.dhis2.org/demo/api/dashboards/vQFhmLJU5sK&quot;,
&quot;publicAccess&quot; : &quot;--------&quot;,
&quot;externalAccess&quot; : false,
&quot;itemCount&quot; : 17,
&quot;displayName&quot; : &quot;Mother and Child Health&quot;,
&quot;access&quot; : {
&quot;update&quot; : true,
&quot;externalize&quot; : true,
&quot;delete&quot; : true,
&quot;write&quot; : true,
&quot;read&quot; : true,
&quot;manage&quot; : true
},
&quot;user&quot; : {
&quot;id&quot; : &quot;xE7jOejl9FI&quot;,
&quot;name&quot; : &quot;John Traore&quot;,
&quot;created&quot; : &quot;2013-04-18T15:15:08.407+0000&quot;,
&quot;lastUpdated&quot; : &quot;2014-12-05T03:50:04.148+0000&quot;,
&quot;href&quot; : &quot;https://play.dhis2.org/demo/api/users/xE7jOejl9FI&quot;
},
&quot;dashboardItems&quot; : [{
&quot;id&quot; : &quot;bu1IAnPFa9H&quot;,
&quot;created&quot; : &quot;2013-09-09T12:12:58.095+0000&quot;,
&quot;lastUpdated&quot; : &quot;2013-09-09T12:12:58.095+0000&quot;
}, {
&quot;id&quot; : &quot;ppFEJmWWDa1&quot;,
&quot;created&quot; : &quot;2013-09-10T13:57:02.480+0000&quot;,
&quot;lastUpdated&quot; : &quot;2013-09-10T13:57:02.480+0000&quot;
}
],
&quot;userGroupAccesses&quot; : []
}</screen></para>
      <para>A more tailored response can be obtained by specifying specific fields in the request.
        An example is provided below, which would return more detailed information about each object
        on a users dashboard.</para>
      <screen>/api/26/dashboards/vQFhmLJU5sK/?fields=:all,dashboardItems[:all]</screen>
    </section>
    <section xml:id="webapi_searching_dasboards">
      <title>Searching dashboards</title>
      <para>When setting a dashboard it is convenient from a consumer point of view to be able to
        search for various analytical resources using the <emphasis role="italic"
          >/dashboards/q</emphasis> resource. This resource lets you search for matches on the name
        property of the following objects: charts, maps, report tables, users, reports and
        resources. You can do a search by making a <emphasis role="italic">GET</emphasis> request on
        the following resource URL pattern, where my-query should be replaced by the preferred
        search query:</para>
      <screen>/api/26/dashboards/q/my-query.json</screen>
      <para>JSON and XML response formats are supported. The response in JSON format will contain
        references to matching resources and counts of how many matches were found in total and for
        each type of resource. It will look similar to this:</para>
      <screen>{
    &quot;charts&quot;: [{
        &quot;name&quot;: &quot;ANC: 1-3 dropout rate Yearly&quot;,
        &quot;id&quot;: &quot;LW0O27b7TdD&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 1 and 3 coverage Yearly&quot;,
        &quot;id&quot;: &quot;UlfTKWZWV4u&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 1st and 3rd trends Monthly&quot;,
        &quot;id&quot;: &quot;gnROK20DfAA&quot;
    }],
    &quot;maps&quot;: [{
        &quot;name&quot;: &quot;ANC: 1st visit at facility (fixed) 2013&quot;,
        &quot;id&quot;: &quot;YOEGBvxjAY0&quot;
    }, {
        &quot;name&quot;: &quot;ANC: 3rd visit coverage 2014 by district&quot;,
        &quot;id&quot;: &quot;ytkZY3ChM6J&quot;
    }],
    &quot;reportTables&quot;: [{
        &quot;name&quot;: &quot;ANC: ANC 1 Visits Cumulative Numbers&quot;,
        &quot;id&quot;: &quot;tWg9OiyV7mu&quot;
    }],
    &quot;reports&quot;: [{
        &quot;name&quot;: &quot;ANC: 1st Visit Cumulative Chart&quot;,
        &quot;id&quot;: &quot;Kvg1AhYHM8Q&quot;
    }, {
        &quot;name&quot;: &quot;ANC: Coverages This Year&quot;,
        &quot;id&quot;: &quot;qYVNH1wkZR0&quot;
    }],
    &quot;searchCount&quot;: 8,
    &quot;chartCount&quot;: 3,
    &quot;mapCount&quot;: 2,
    &quot;reportTableCount&quot;: 1,
    &quot;reportCount&quot;: 2,
    &quot;userCount&quot;: 0,
    &quot;patientTabularReportCount&quot;: 0,
    &quot;resourceCount&quot;: 0
}</screen>
    </section>
    <section xml:id="webapi_creating_updating_removing_dashboards">
      <title>Creating, updating and removing dashboards</title>
      <para>Creating, updating and deleting dashboards follow standard REST semantics. In order to
        create a new dashboard you can make a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">/api/dashboards</emphasis> resource. From a consumer perspective
        it might be convenient to first create a dashboard and later add items to it. JSON and XML
        formats are supported for the request payload. To create a dashboard with the name &quot;My
        dashboard&quot; you can use a payload in JSON like this:</para>
      <screen>{
  &quot;name&quot;: &quot;My dashboard&quot;
}</screen>
      <para>To update, e.g. rename, a dashboard, you can make a <emphasis role="italic"
          >PUT</emphasis> request with a similar request payload the same api/dasboards
        resource.</para>
      <para>To remove a dashboard, you can make a <emphasis role="italic">DELETE</emphasis> request
        to the specific dashboard resource similar to this:</para>
      <screen>/api/26/dashboards/vQFhmLJU5sK</screen>
    </section>
    <section xml:id="webapi_adding_moving_removing_dashboard_items">
      <title>Adding, moving and removing dashboard items and content</title>
      <para>In order to add dashboard items a consumer can use the <emphasis role="italic"
          >/api/dashboards/&lt;dashboard-id&gt;/items/content</emphasis> resource, where
        &lt;dashboard-id&gt; should be replaced by the relevant dashboard identifier. The request
        must use the <emphasis role="italic">POST</emphasis> method. The URL syntax and parameters
        are described in detail in the following table.</para>
      <table frame="all">
        <title>Items content parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="2.32*"/>
          <colspec colnum="3" colname="c3" colwidth="1.86*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>type</entry>
              <entry>Type of the resource to be represented by the dashboard item</entry>
              <entry>chart | map | reportTable | users | reports | reportTables | resources |
                patientTabularReports | app</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>Identifier of the resource to be represented by the dashboard item</entry>
              <entry>Resource identifier</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>A <emphasis role="italic">POST</emphasis> request URL for adding a chart to a specific
        dashboard could look like this, where the last id query parameter value is the chart
        resource identifier:</para>
      <screen>/api/26/dashboards/vQFhmLJU5sK/items/content?type=chart&amp;id=LW0O27b7TdD</screen>
      <para>When adding resource of type map, chart, report table and app, the API will create and
        add a new item to the dashboard. When adding a resource of type users, reports, report
        tables and resources, the API will try to add the resource to an existing dashboard item of
        the same type. If no item of same type or no item of same type with less than eight
        resources associated with it exists, the API will create a new dashboard item and add the
        resource to it.</para>
      <para>In order to move a dashboard item to a new position within the list of items in a
        dashboard, a consumer can make a <emphasis role="italic">POST</emphasis> request to the
        following resource URL, where &lt;dashboard-id&gt; should be replaced by the identifier of
        the dashboard, &lt;item-id&gt; should be replaced by the identifier of the dashboard item
        and &lt;index&gt; should be replaced by the new position of the item in the dashboard, where
        the index is
        zero-based:<screen>/api/26/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;/position/&lt;index&gt;</screen></para>
      <para>To remove a dashboard item completely from a specific dashboard a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;dashboard-id&gt; should be replaced by the identifier of the dashboard and
        &lt;item-id&gt; should be replaced by the identifier of the dashboard item. The dashboard
        item identifiers can be retrieved through a GET request to the dashboard resource
        URL.</para>
      <screen>/api/26/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;</screen>
      <para>To remove a specific content resource within a dashboard item a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;content-resource-id&gt; should be replaced by the identifier of a resource associated
        with the dasboard item; e.g. the identifier of a report or a user. For instance, this can be
        used to remove a single report from a dashboard item of type reports, as opposed to removing
        the dashboard item completely:</para>
      <screen>/api/26/dashboards/&lt;dashboard-id&gt;/items/&lt;item-id&gt;/content/&lt;content-resource-id&gt;</screen>
    </section>
  </section>
  <section xml:id="webapi_analytics">
    <title>Analytics</title>
    <para>To access analytical, aggregated data in DHIS2 you can work with the <emphasis
        role="italic">analytics</emphasis> resource. The analytics resource is powerful as it lets
      you query and retrieve data aggregated along all available data dimensions. For instance, you
      can ask the analytics resource to provide the aggregated data values for a set of data
      elements, periods and organisation units. Also, you can retrieve the aggregated data for a
      combination of any number of dimensions based on data elements and organisation unit group
      sets.</para>
    <screen>/api/26/analytics</screen>
    <section xml:id="webapi_analytics_query_parameters">
      <title>Request query parameters</title>
      <para>The analytics resource lets you specify a range of query parameters:<table frame="all">
          <title>Query parameters</title>
          <tgroup cols="4">
            <colspec colnum="1" colname="c1" colwidth="1.75*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="4.5*"/>
            <colspec colnum="4" colname="c3" colwidth="2.7*"/>
            <thead>
              <row>
                <entry>Query parameter</entry>
                <entry>Required</entry>
                <entry>Description</entry>
                <entry>Options</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>dimension</entry>
                <entry>Yes</entry>
                <entry>Dimensions and dimension items to be retrieved, repeated for each.</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>filter</entry>
                <entry>No</entry>
                <entry>Filters and filter items to apply to the query, repeated for each.</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>aggregationType</entry>
                <entry>No</entry>
                <entry>Aggregation type to use in the aggregation process.</entry>
                <entry>SUM | AVERAGE | COUNT | STDDEV | VARIANCE</entry>
              </row>
              <row>
                <entry>measureCriteria</entry>
                <entry>No</entry>
                <entry>Filters for the data/measures.</entry>
                <entry>EQ | GT | GE | LT | LE</entry>
              </row>
              <row>
                <entry>skipMeta</entry>
                <entry>No</entry>
                <entry>Exclude the meta data part of the response (improves performance).</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>skipData</entry>
                <entry>No</entry>
                <entry>Exclude the data part of the response.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>skipRounding</entry>
                <entry>No</entry>
                <entry>Skip rounding of data values, i.e. provide full precision.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>hierarchyMeta</entry>
                <entry>No</entry>
                <entry>Include names of organisation unit ancestors and hierarchy paths of
                  organisation units in the metadata.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>ignoreLimit</entry>
                <entry>No</entry>
                <entry>Ignore limit on max 50 000 records in response - use with care.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>tableLayout</entry>
                <entry>No</entry>
                <entry>Use plain data source or table layout for response.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>hideEmptyRows</entry>
                <entry>No</entry>
                <entry>Hides empty rows in response, applicable when table layout is true.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>showHierarchy</entry>
                <entry>No</entry>
                <entry>Display full org unit hierarchy path together with org unit name.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>includeNumDen</entry>
                <entry>No</entry>
                <entry>Include the numerator and denominator used to calculate the value in the
                  response.</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>displayProperty</entry>
                <entry>No</entry>
                <entry>Property to display for metadata.</entry>
                <entry>NAME | SHORTNAME</entry>
              </row>
              <row>
                <entry>outputIdScheme</entry>
                <entry>No</entry>
                <entry>Property to use for metadata items the query response, can be identifier,
                  code or name.</entry>
                <entry>UID | CODE | NAME</entry>
              </row>
              <row>
                <entry>inputIdScheme</entry>
                <entry>No</entry>
                <entry>Property to use for metadata items in the request, can be identifier or
                  code.</entry>
                <entry>UID | CODE</entry>
              </row>
              <row>
                <entry>approvalLevel</entry>
                <entry>No</entry>
                <entry>Include data which has been approved at least up to the given approval level,
                  refers to identfier of approval level.</entry>
                <entry>Identifier of approval level</entry>
              </row>
              <row>
                <entry>relativePeriodDate</entry>
                <entry>No</entry>
                <entry>Date used as basis for relative periods.</entry>
                <entry>Date.</entry>
              </row>
              <row>
                <entry>userOrgUnit</entry>
                <entry>No</entry>
                <entry>Explicitly define the user org units to utilize, overrides organisation units
                  associated with current user, multiple identifiers can be separated by
                  semi-colon.</entry>
                <entry>Organisation unit identifiers.</entry>
              </row>
              <row>
                <entry>columns</entry>
                <entry>No</entry>
                <entry>Dimensions to use as columns for table layout.</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
              <row>
                <entry>rows</entry>
                <entry>No</entry>
                <entry>Dimensions to use as rows for table layout.</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>The <emphasis role="italic">dimension</emphasis> query parameter defines which
        dimensions should be included in the analytics query. Any number of dimensions can be
        specified. The dimension parameter should be repeated for each dimension to include in the
        query response. The query response can potentially contain aggregated values for all
        combinations of the specified dimension items.</para>
      <para>The <emphasis role="italic">filter</emphasis> parameter defines which dimensions should
        be used as filters for the data retrieved in the analytics query. Any number of filters can
        be specified. The filter parameter should be repeated for each filter to use in the query. A
        filter differs from a dimension in that the filter dimensions will not be part of the query
        response content, and that the aggregated values in the response will be collapsed on the
        filter dimensions. In other words, the data in the response will be aggregated on the filter
        dimensions, but the filters will not be included as dimensions in the actual response. As an
        example, to query for certain data elements filtered by the periods and organisation units
        you can use the following URL:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;filter=pe:2014Q1;2014Q2&amp;filter=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>The <emphasis role="italic">aggregationType</emphasis> query parameter lets you define
        which aggregation operator should be used for the query. By default the aggregation operator
        defined for data elements included in the query will be used. If your query does not contain
        any data elements, but does include data element groups, the aggregation operator of the
        first data element in the first group will be used. The order of groups and data elements is
        undefined. This query parameter allows you to override the default and specify a specific
        aggregation operator. As an example you can set the aggregation operator to
        &quot;count&quot; with the following URL:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2014Q1&amp;dimension=ou:O6uvpzGd5pu&amp;aggregationType=COUNT</screen>
      <para>The <emphasis role="italic">measureCriteria</emphasis> query parameter lets you filter
        out ranges of data records to return. You can instruct the system to return only records
        where the aggregated data value is equal, greater than, greater or equal, less than or less
        or equal to certain values. You can specify any number of criteria on the following format,
        where <emphasis role="italic">critieria</emphasis> and <emphasis role="italic"
          >value</emphasis> should be substituted with real values:</para>
      <screen>/api/26/analytics?measureCriteria=criteria:value;criteria:value</screen>
      <para>As an example, the following query will return only records where the data value is
        greater or equal to 6500 and less than 33000:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:2014
  &amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&amp;measureCriteria=GE:6500;LT:33000</screen>
      <para>In order to have the analytics resource generate the data in the shape of a ready-made
        table, you can provide the <emphasis role="italic">tableLayout</emphasis> parameter with
        true as value. Instead of generating a plain, normalized data source, the analytics resource
        will now generate the data in table layout. You can use the <emphasis role="italic"
          >columns</emphasis> and <emphasis role="italic">rows</emphasis> parameters with dimension
        identifiers separated by semi-colons as values to indicate which ones to use as table
        columns and rows. The column and rows dimensions must be present as a data dimension in the
        query (not a filter). Such a request can look like this:</para>
      <screen>/api/26/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:2014Q1;2014Q2
  &amp;dimension=ou:O6uvpzGd5pu&amp;tableLayout=true&amp;columns=dx;ou&amp;rows=pe</screen>
    </section>
    <section xml:id="webapi_analytics_dimensions_and_items">
      <title>Dimensions and items</title>
      <para>DHIS2 features a multi-dimensional data model with several fixed and dynamic data
        dimensions. The fixed dimensions are the data element, period (time) and organisation unit
        dimension. You can dynamically add dimensions through categories, data element group sets
        and organisation unit group sets. The table below displays the available data dimensions in
        DHIS2. Each data dimension has a corresponding <emphasis role="italic">dimension
          identifier</emphasis>, and each dimension can have a set of <emphasis role="italic"
          >dimension items</emphasis>:</para>
      <table frame="all">
        <title>Dimensions and dimension items</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="3.17*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="newCol3" colwidth="4.03*"/>
          <thead>
            <row>
              <entry>Dimension</entry>
              <entry>Dimension id</entry>
              <entry>Dimension items</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Data elements, indicators, data set reporting rate metrics, data element
                operands, program indicators, program data elements, program attributes</entry>
              <entry>dx</entry>
              <entry>Data element, indicator, data set reporting rate metrics, data element operand,
                program indicator, program attribute identifiers, keyword DE_GROUP-&lt;group-id&gt;,
                IN_GROUP-&lt;group-id>, use &lt;dataelement-id&gt;.&lt;optioncombo-id&gt; for data
                element operands, &lt;program-id>.&lt;dataelement-id> for program data elements,
                &lt;program-id>.&lt;attribute-id> for program attributes.</entry>
            </row>
            <row>
              <entry>Periods (time)</entry>
              <entry>pe</entry>
              <entry>ISO periods and relative periods, see &quot;date and period
                format&quot;</entry>
            </row>
            <row>
              <entry>Organisation unit hierarchy</entry>
              <entry>ou</entry>
              <entry>Organisation unit identifiers, and keywords USER_ORGUNIT,
                USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and
                OU_GROUP-&lt;group-id&gt;</entry>
            </row>
            <row>
              <entry>Category option combinations</entry>
              <entry>co</entry>
              <entry>Category option combo identifers (omit to get all items)</entry>
            </row>
            <row>
              <entry>Attribute option combinations</entry>
              <entry>ao</entry>
              <entry>Category option combo identifers (omit to get all items)</entry>
            </row>
            <row>
              <entry>Categories</entry>
              <entry>&lt;category id&gt;</entry>
              <entry>Category option identifiers (omit to get all items)</entry>
            </row>
            <row>
              <entry>Data element group sets</entry>
              <entry>&lt;group set id&gt;</entry>
              <entry>Data element group identifiers (omit to get all items)</entry>
            </row>
            <row>
              <entry>Organisation unit group sets</entry>
              <entry>&lt;group set id&gt;</entry>
              <entry>Organisation unit group identifiers (omit to get all items)</entry>
            </row>
            <row>
              <entry>Category option group sets</entry>
              <entry>&lt;group set id&gt;</entry>
              <entry>Category option group identifiers (omit to get all items)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>It is not necessary to be aware of which objects are used for the various dynamic
        dimensions when designing analytics queries. You can get a complete list of dynamic
        dimensions by visiting this URL in the Web API:</para>
      <screen>/api/26/dimensions</screen>
      <para>The base URL to the analytics resource is <emphasis role="italic"
          >api/analytics</emphasis>. To request specific dimensions and dimension items you can use
        a query string on the following format, where <emphasis role="italic">dim-id</emphasis> and
          <emphasis role="italic">dim-item</emphasis> should be substituted with real values:</para>
      <screen>/api/26/analytics?dimension=dim-id:dim-item;dim-item&amp;dimension=dim-id:dim-item;dim-item</screen>
      <para>As illustrated above, the dimension identifier is followed by a colon while the
        dimension items are separated by semi-colons. As an example, a query for two data elements,
        two periods and two organisation units can be done with the following URL:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
  &amp;dimension=pe:2016Q1;2016Q2&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>To query for data broken down by category option combinations instead of data element
        totals you can include the category dimension in the query string, for instance like
        this:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
  &amp;dimension=co&amp;dimension=pe:201601&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>When selecting data elements you can also select all data elements in a group as items
        by using the DE_GROUP-&lt;id&gt; syntax:</para>
      <screen>/api/26/analytics?dimension=dx:DE_GROUP-h9cuJOkOwY2
  &amp;dimension=pe:201601&amp;dimension=ou:O6uvpzGd5pu</screen>
      <para>When selecting data set reporting rates, the syntax contains of a data set identifier
        followed by a reporting rate metric:</para>
      <screen>/api/26/analytics?dimension=dx:BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS
  &amp;dimension=pe:201601&amp;dimension=ou:O6uvpzGd5pu</screen>
      <para>To query for program data elements (of tracker domain type) you can get those by
        specifying the program for each data element using the &lt;program-id>.&lt;dataelement-id>
        syntax:</para>
      <screen>/api/26/analytics.json?dimension=dx:eBAyeGv0exc.qrur9Dvnyt5;eBAyeGv0exc.GieVkTxp4HH
  &amp;dimension=pe:LAST_12_MONTHS&amp;filter=ou:ImspTQPwCqd</screen>
      <para>To query for program attributes (tracked entity attributes) you can get those by
        specifying the program for each attribute using the &lt;program.id>.&lt;attribute-id>
        syntax:</para>
      <screen>/api/26/analytics.json?dimension=dx:IpHINAT79UW.a3kGcGDCuk6;IpHINAT79UW.UXz7xuGCEhU
  &amp;dimension=pe:LAST_4_QUARTERS&amp;dimension=ou:ImspTQPwCqd</screen>
      <para>To query for organisation unit group sets and data elements you can use the following
        URL - notice how the group set identifier is used as dimension identifier and the groups as
        dimension items:</para>
      <screen>/api/26/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL
  &amp;dimension=pe:2016&amp;dimension=ou:ImspTQPwCqd</screen>
      <para>To query for data elements and categories you can use this URL - use the category
        identifier as dimension identifier and the category options as dimension items:</para>
      <screen>/api/26/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO&amp;dimension=pe:2016
  &amp;dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA&amp;filter=ou:ImspTQPwCqd</screen>
      <para>To query using relative periods and organisation units associated with the current user
        you can use a URL like this:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
  &amp;dimension=pe:LAST_12_MONTHS&amp;dimension=ou:USER_ORGUNIT</screen>
      <para>When selecting organisation units for a dimension you can select an entire level
        optionally constrained by any number of boundary organisation units with the
        LEVEL-&lt;level&gt; syntax. Boundary refers to a top node in a sub-hierarchy, meaning that
        all organisation units at the given level below the given boundary organisation unit in the
        hierarchy will be included in the response, and is provided as regular organisation unit
        dimension items. A simple query for all org units at level three:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2016&amp;dimension=ou:LEVEL-3</screen>
      <para>A query for level three and four with two boundary org units can be specified like
        this:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2016
  &amp;dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf</screen>
      <para>When selecting organisation units you can also select all organisation units in an
        organisation unit group to be included as dimension items using the OU_GROUP-&lt;id&gt;
        syntax. The organisation units in the groups can optionally be constrained by any number of
        boundary organisation units. Both the level and the group items can be repeated any number
        of times:</para>
      <screen>/api/26/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2016
  &amp;dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWsW;O6uvpzGd5pu;lc3eMKXaEf</screen>
      <para>A few things to be aware of when using the analytics resource are listed below.</para>
      <itemizedlist>
        <listitem>
          <para>Data elements, indicator, data set reporting rates, program data elements and
            program indicators are part of a common data dimension, identified as &quot;dx&quot;.
            This means that you can use any of data elements, indicators and data set identifiers
            together with the &quot;dx&quot; dimension identifier in a query.</para>
        </listitem>
        <listitem>
          <para>For the category, data element group set and organisation unit group set dimensions,
            all dimension items will be used in the query if no dimension items are
            specified.</para>
        </listitem>
        <listitem>
          <para>For the period dimension, the dimension items are ISO period identifiers and/or
            relative periods. Please refer to the section above called &quot;Date and period
            format&quot; for the period format and available relative periods.</para>
        </listitem>
        <listitem>
          <para>For the organisation unit dimension you can specify the items to be the organisation
            unit or sub-units of the organisation unit associated with the user currently
            authenticated for the request using they keys USER_ORGUNIT or USER_ORGUNIT_CHILDREN as
            items, respectively. You can also specify organisation unit identifiers directly, or a
            combination of both.</para>
        </listitem>
        <listitem>
          <para>For the organisation unit dimension you can specify the organisation hierarchy level
            and the boundary unit to use for the request on the format
            LEVEL-&lt;level&gt;-&lt;boundary-id&gt;; as an example LEVEL-3-ImspTQPwCqd implies all
            organisation units below the given boundary unit at level 3 in the hierarchy.</para>
        </listitem>
        <listitem>
          <para>For the organisation unit dimension the dimension items are the organisation units
            and their sub-hierarchy - data will be aggregated for all organisation units below the
            given organisation unit in the hierarchy.</para>
        </listitem>
        <listitem>
          <para>You cannot specify dimension items for the category option combination dimension.
            Instead the response will contain the items which are linked to the data values.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="webapi_analytics_dx_dimension">
      <title>The dx dimension</title>
      <para>The <emphasis>dx</emphasis> dimension is a special dimension which can contain all of
        the following data types.</para>
      <table frame="all">
        <title>Data dx dimension types</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.09*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="1.17*"/>
          <colspec colname="newCol4" colnum="4" colwidth="1*"/>
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Syntax</entry>
              <entry>Description</entry>
              <entry>Data source</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Indicator</entry>
              <entry>&lt;indicator-id></entry>
              <entry>Indicator identifier.</entry>
              <entry>Aggregated data</entry>
            </row>
            <row>
              <entry>Indicator</entry>
              <entry>IN_GROUP-&lt;indicatorgroup-id></entry>
              <entry>Keyword followed by indicator group identifier. Will include all indicators in
                the group in the response.</entry>
              <entry>Aggregated data</entry>
            </row>
            <row>
              <entry>Data element</entry>
              <entry>&lt;dataelement-id> </entry>
              <entry>Data element identifier.</entry>
              <entry>Aggregated data</entry>
            </row>
            <row>
              <entry>Data element</entry>
              <entry>DE_GROUP-&lt;dataelementgroup-id&gt;</entry>
              <entry>Keyword followed by data element group identifier. Will include all data
                elements in the group in the response.</entry>
              <entry>Aggregated data</entry>
            </row>
            <row>
              <entry>Data set</entry>
              <entry>&lt;dataset-id>.&lt;reporting-rate-metric></entry>
              <entry>Data set identifier followed by reporting rate metric. Can be REPORTING_RATE |
                REPORTING_RATE_ON_TIME | ACTUAL_REPORTS | ACTUAL_REPORTS_ON_TIME |
                EXPECTED_REPORTS.</entry>
              <entry>Aggregated data</entry>
            </row>
            <row>
              <entry>Program data element</entry>
              <entry>&lt;program-id>.&lt;dataelement-id></entry>
              <entry>Program identifier followed by data element identifier. Reads from events
                within the specified program.</entry>
              <entry>Events from the given program</entry>
            </row>
            <row>
              <entry>Program indicator</entry>
              <entry>&lt;programindicator-id></entry>
              <entry>Program indicator identifier. Reads from events from within the program
                associated with the program identifier.</entry>
              <entry>Events from the program of the program indicator</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Items from all of the various <emphasis>dx</emphasis> types can be combined in an
        analytics request. An example looks like this:</para>
      <screen>/api/26/analytics.json
  ?dimension=dx:Uvn6LCg7dVU;BfMAe6Itzgt.REPORTING_RATE;BfMAe6Itzgt.ACTUAL_REPORTS;IpHINAT79UW.a3kGcGDCuk6
  &amp;dimension=pe:LAST_12_MONTHS&amp;filter=ou:ImspTQPwCqd</screen>
      <para>The group syntax can be used together with any other item as well. An example looks like
        this:</para>
      <screen>/api/26/analytics.json
  ?dimension=dx:DE_GROUP-qfxEYY9xAl6;IN_GROUP-oehv9EO3vP7;BfMAe6Itzgt.REPORTING_RATE
  &amp;dimension=pe:LAST_12_MONTHS&amp;filter=ou:ImspTQPwCqd</screen>
      <tip>
        <para>A great way to learn how to use the analytics API is to use the DHIS2 <emphasis>pivot
            table</emphasis> app. You can play around with pivot tables using the various dimensions
          and items and click Download > Plain data source > JSON to see the resulting analytics API
          calls in the address bar of your Web browser.</para>
      </tip>
    </section>
    <section xml:id="webapi_analytics_response_formats">
      <title>Response formats</title>
      <para>The analytics response containing aggregate data can be returned in various
        representation formats. As usual, you can indicate interest in a specific format by
        appending a file extension to the URL, through the <emphasis role="italic">Accept</emphasis>
        HTTP header or through the <emphasis role="italic">format</emphasis> query parameter. The
        default format is JSON. The available formats and content-types are listed below.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>html (text/html)</para>
        </listitem>
        <listitem>
          <para>html+css</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>As an example, to request an analytics response in XML format you can use the following
        URL:</para>
      <screen>/api/26/analytics.xml?dimension=dx:fbfJHSPpUQD
  &amp;dimension=pe:2016&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>The analytics responses must be retrieved using the HTTP <emphasis role="italic"
          >GET</emphasis> method. This allows for direct linking to analytics responses from Web
        pages as well as other HTTP-enabled clients. To do functional testing we can use the cURL
        library. By executing this command against the demo database you will get an analytics
        response in JSON format:</para>
      <screen>curl &quot;play.dhis2.org/demo/api/26/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R
  &amp;dimension=pe:2016Q1;2016Q2&amp;filter=ou:ImspTQPwCqd&quot; -u admin:district</screen>
      <para>The JSON response will look like this:</para>
      <screen>{
    &quot;headers&quot;: [
        {
            &quot;name&quot;: &quot;dx&quot;,
            &quot;column&quot;: &quot;Data&quot;,
            &quot;meta&quot;: true,
            &quot;type&quot;: &quot;java.lang.String&quot;
        },
        {
            &quot;name&quot;: &quot;pe&quot;,
            &quot;column&quot;: &quot;Period&quot;,
            &quot;meta&quot;: true,
            &quot;type&quot;: &quot;java.lang.String&quot;
        },
        {
            &quot;name&quot;: &quot;value&quot;,
            &quot;column&quot;: &quot;Value&quot;,
            &quot;meta&quot;: false,
            &quot;type&quot;: &quot;java.lang.Double&quot;
        }
    ],
    &quot;height&quot;: 4,
    &quot;metaData&quot;: {
        &quot;pe&quot;: [
            &quot;2016Q1&quot;,
            &quot;2016Q2&quot;
        ],
        &quot;ou&quot;: [
            &quot;ImspTQPwCqd&quot;
        ],
        &quot;names&quot;: {
            &quot;2016Q1&quot;: &quot;Jan to Mar 2016&quot;,
            &quot;2016Q2&quot;: &quot;Apr to Jun 2016&quot;,
            &quot;FbKK4ofIv5R&quot;: &quot;Measles Coverage &lt;1 y&quot;,
            &quot;ImspTQPwCqd&quot;: &quot;Sierra Leone&quot;,
            &quot;eTDtyyaSA7f&quot;: &quot;Fully Immunized Coverage&quot;
        }
    },
    &quot;rows&quot;: [
        [
            &quot;eTDtyyaSA7f&quot;,
            &quot;2016Q2&quot;,
            &quot;81.1&quot;
        ],
        [
            &quot;eTDtyyaSA7f&quot;,
            &quot;2016Q1&quot;,
            &quot;74.7&quot;
        ],
        [
            &quot;FbKK4ofIv5R&quot;,
            &quot;2016Q2&quot;,
            &quot;88.9&quot;
        ],
        [
            &quot;FbKK4ofIv5R&quot;,
            &quot;2016Q1&quot;,
            &quot;84.0&quot;
        ]
    ],
    &quot;width&quot;: 3
}
</screen>
      <para>The response represents a table of dimensional data. The <emphasis role="italic"
          >headers</emphasis> array gives an overview of which columns are included in the table and
        what the columns contain. The <emphasis role="italic">column</emphasis> property shows the
        column dimension identifier, or if the column contains measures, the word &quot;Value&quot;.
        The <emphasis role="italic">meta</emphasis> property is <emphasis role="italic"
          >true</emphasis> if the column contains dimension items or <emphasis role="italic"
          >false</emphasis> if the column contains a measure (aggregated data values). The <emphasis
          role="italic">name</emphasis> property is similar to the column property, except it
        displays &quot;value&quot; in case the column contains a measure. The <emphasis
          role="italic">type</emphasis> property indicates the Java class type of the column
        values.</para>
      <para>The <emphasis role="italic">height</emphasis> and <emphasis role="italic"
          >width</emphasis> properties indicate how many data columns and rows are contained in the
        response, respectively.</para>
      <para>The <emphasis role="italic">metaData periods</emphasis> property contains a unique,
        ordered array of the periods included in the response. The <emphasis role="italic">metaData
          ou</emphasis> property contains an array of the identifiers of organisation units included
        in the response. The <emphasis role="italic">metaData names</emphasis> property contains a
        mapping between the identifiers used in the data response and the names of the objects they
        represent. It can be used by clients to substitute the identifiers within the data response
        with names in order to give a more meaningful view of the data table.</para>
      <para>The <emphasis role="italic">rows</emphasis> array contains the dimensional data table.
        It contains columns with dimension items (object or period identifiers) and a column with
        aggregated data values. The example response above has a data/indicator column, a period
        column and a value column. The first column contains indicator identifiers, the second
        contains ISO period identifiers and the third contains aggregeted data values.</para>
    </section>
    <section xml:id="webapi_analytics_constraints">
      <title>Constraints</title>
      <para>There are several constraints on the input you can provide to the analytics
        resource.</para>
      <itemizedlist>
        <listitem>
          <para>At least one dimension must be specified in a query.</para>
        </listitem>
        <listitem>
          <para>Dimensions cannot be specified as dimension and filter simultaneously.</para>
        </listitem>
        <listitem>
          <para>At least one period must be specified as dimension or filter.</para>
        </listitem>
        <listitem>
          <para>Categories cannot be specified as filter.</para>
        </listitem>
        <listitem>
          <para>Only a single indicator can be specified as filter.</para>
        </listitem>
        <listitem>
          <para>Only a single reporting rate can be specified as filter.</para>
        </listitem>
        <listitem>
          <para>Data element group sets cannot be specified together with data sets.</para>
        </listitem>
        <listitem>
          <para>Categories can only be specified together with data elements, not indicators or data
            sets.</para>
        </listitem>
        <listitem>
          <para>A dimension cannot be specified more than once.</para>
        </listitem>
        <listitem>
          <para>Fixed dimensions (&quot;dx&quot;, &quot;pe&quot;, &quot;ou&quot;) must have at least
            one option if included in a query.</para>
        </listitem>
        <listitem>
          <para>A table cannot contain more than 50 000 cells by default, this can be configured
            under system settings.</para>
        </listitem>
      </itemizedlist>
      <para>When a query request violates any of these constraints the server will return a response
        with status code 409 and content-type &quot;text/plain&quot; together with a textual
        description of the problem.</para>
    </section>
    <section xml:id="webapi_analytics_data_value_set_format">
      <title>Data value set format</title>
      <para>The analytics resource allows for returning aggregated data in the data value set
        format. This format represents raw data values, as opposed to data which has been aggregated
        along various dimensions. Exporting aggregated data as regular data values is useful for
        data exchange between systems when the target system contains data of finer granularity
        compared to what the destination system is storing. </para>
      <para>As an example one can specify an indicator in the target system to summarize data for
        multiple data elements and import this data for a single data element in the destionation
        system. As another example one can aggregate data collected at organisation unit level 4 in
        the target system to level 2 and import that data in the destination system.</para>
      <para>You can retrieve data in the raw data value set format from the
          <emphasis>analytics/dataValueSethttp://dhis2.github.io/dhis2-docs/master/en/developer/html/webapi_authentication.html#webapi_oauth2http://dhis2.github.io/dhis2-docs/master/en/developer/html/webapi_authentication.html#webapi_oauth2</emphasis>
        resource:<screen>/api/26/analytics/dataValueSet</screen></para>
      <para>The following resource representations are supported:<itemizedlist>
          <listitem>
            <para>json (application/json)</para>
          </listitem>
          <listitem>
            <para>xml (application/xml)</para>
          </listitem>
        </itemizedlist></para>
      <para>When using the data value set format, exactly three dimensions must be specified as
        analytics dimensions with at least one dimension item each:<itemizedlist>
          <listitem>
            <para>Data (dx)</para>
          </listitem>
          <listitem>
            <para>Period (pe)</para>
          </listitem>
          <listitem>
            <para>Organisation unit (ou)</para>
          </listitem>
        </itemizedlist></para>
      <para>Any other dimension will be ignored. Filters will be applied as with regular analytics
        requests. Note that any data dimension type can be specified, including indicators, data
        elements, data sets and program indicators.</para>
      <para>An example request which aggregates data for specific indicators, periods and
        organisation units and returns it as regular data values in XML looks like
        this:<screen>api/analytics/dataValueSet.xml?dimension=dx:Uvn6LCg7dVU;OdiHJayrsKo
  &amp;dimension=pe:LAST_4_QUARTERS&amp;dimension=ou:lc3eMKXaEfw;PMa2VCrupOd</screen></para>
    </section>
    <section xml:id="webapi_analytics_debugging">
      <title>Debugging</title>
      <para>When debugging analytics requests it can be useful to examine the data value source of
        the aggregated analytics response. The <emphasis role="italic"
          >analytics/debug/sql</emphasis> resource will provide an SQL statement that returns the
        relevant content of the datavalue table. You can produce this SQL by doing a GET request
        with content type &quot;text/html&quot; or &quot;text/plain&quot; like below. The dimension
        and filter syntax is identical to regular analytics queries:</para>
      <screen>/api/26/analytics/debug/sql?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU
  &amp;filter=pe:2016Q1;2016Q2&amp;filter=ou:O6uvpzGd5pu</screen>
    </section>
  </section>
  <section xml:id="webapi_event_analytics">
    <title>Event analytics</title>
    <para>The event analytics API lets you access aggregated event data and query <emphasis
        role="italic">events</emphasis> captured in DHIS2. This resource lets you retrieve events
      based on a program and optionally a program stage, and lets you retrieve and filter events on
      any event dimensions.<screen>/api/26/analytics/events</screen></para>
    <section xml:id="webapi_event_analytics_dimensions_items">
      <title>Dimensions and items</title>
      <para>Event dimensions include data elements, attributes, organisation units and periods. The
        aggregated event analytics resource will return aggregated information such as counts or
        averages. The query analytics resource will simply return events matching a set of criteria
        and does not perform any aggregation. You can specify dimension items in the form of options
        from option sets and legends from legend sets for data elements and attributes which are
        associated with such. The event dimensions are listed in the table below.</para>
      <table frame="all">
        <title>Event dimensions</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="2.46*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="5.37*"/>
          <thead>
            <row>
              <entry>Dimension</entry>
              <entry>Dimension id</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Data elements</entry>
              <entry>&lt;id&gt;</entry>
              <entry>Data element identifiers</entry>
            </row>
            <row>
              <entry>Attributes</entry>
              <entry>&lt;id&gt;</entry>
              <entry>Attribute identifiers</entry>
            </row>
            <row>
              <entry>Periods</entry>
              <entry>pe</entry>
              <entry>ISO periods and relative periods, see &quot;date and period
                format&quot;</entry>
            </row>
            <row>
              <entry>Organisation units</entry>
              <entry>ou</entry>
              <entry>Organisation unit identifiers and keywords USER_ORGUNIT, USER_ORGUNIT_CHILDREN,
                USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level&gt; and
                OU_GROUP-&lt;group-id&gt;</entry>
            </row>
            <row>
              <entry>Organisation unit group sets</entry>
              <entry>&lt;org unit group set id&gt;</entry>
              <entry>Organisation unit group set identifiers</entry>
            </row>
            <row>
              <entry>Categories</entry>
              <entry>&lt;category id></entry>
              <entry>Category identifiers (program attribute categories only)</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="webapi_event_analytics_request_query_parameters">
      <title>Request query parameters</title>
      <para>The analytics event API let you specify a range of query parameters.</para>
      <table frame="all">
        <title>Query parameters for both event query and aggregate analytics</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>program</entry>
              <entry>Yes</entry>
              <entry>Program identifier.</entry>
              <entry>Any program identifier</entry>
            </row>
            <row>
              <entry>stage</entry>
              <entry>No</entry>
              <entry>Program stage identifier.</entry>
              <entry>Any program stage identifier</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>Yes</entry>
              <entry>Start date for events.</entry>
              <entry>Date in yyyy-MM-dd format</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>Yes</entry>
              <entry>End date for events.</entry>
              <entry>Date in yyyy-MM-dd format</entry>
            </row>
            <row>
              <entry>dimension</entry>
              <entry>Yes</entry>
              <entry>Dimension identifier including data elements, attributes, program indicators,
                periods, organisation units and organisation unit group sets. Parameter can be
                repeated any number of times. Item filters can be applied to a dimension on the
                format &lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;. Filter values are
                case-insensitive.</entry>
              <entry>Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>No</entry>
              <entry>Dimension identifier including data elements, attributes, periods, organisation
                units and organisation unit group sets. Parameter can be repeated any number of
                times. Item filters can be applied to a dimension on the format
                &lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;. Filter values are
                case-insensitive.</entry>
              <entry/>
            </row>
            <row>
              <entry>hierarchyMeta</entry>
              <entry>No</entry>
              <entry>Include names of organisation unit ancestors and hierarchy paths of
                organisation units in the metadata.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>eventStatus</entry>
              <entry>No</entry>
              <entry>Specify status of events to include.</entry>
              <entry>ACTIVE | COMPLETED | SCHEDULE | OVERDUE | SKIPPED</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for event query analytics only</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ouMode</entry>
              <entry>No</entry>
              <entry>The mode of selecting organisation units. Default is DESCENDANTS, meaning all
                sub units in the hierarchy. CHILDREN refers to immediate children in the hierarchy;
                SELECTED refers to the selected organisation units only.</entry>
              <entry>DESCENDANTS, CHILDREN, SELECTED</entry>
            </row>
            <row>
              <entry>asc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted ascending, can reference event date, org unit name and
                code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>desc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted descending, can reference event date, org unit name and
                code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>coordinatesOnly</entry>
              <entry>No</entry>
              <entry>Whether to only return events which have coordinates.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>No</entry>
              <entry>The page number. Default page is 1.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>No</entry>
              <entry>The page size. Default size is 50 items per page.</entry>
              <entry>Numeric zero or positive value</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for aggregate event analytics only</title>
        <tgroup cols="4">
          <colspec colnum="1" colname="c1" colwidth="1.8*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="c3" colwidth="4.3*"/>
          <colspec colnum="4" colname="c4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>value</entry>
              <entry>No</entry>
              <entry>Value dimension identifier. Can be a data element or an attribute which must be
                of numeric value type.</entry>
              <entry>Data element or attribute identifier</entry>
            </row>
            <row>
              <entry>aggregationType</entry>
              <entry>No</entry>
              <entry>Aggregation type for the value dimension. Default is AVERAGE.</entry>
              <entry>AVERAGE | SUM | COUNT | STDDEV | VARIANCE | MIN | MAX</entry>
            </row>
            <row>
              <entry>showHierarchy</entry>
              <entry>No</entry>
              <entry>Display full org unit hierarchy path together with org unit name.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>displayProperty</entry>
              <entry>No</entry>
              <entry>Property to display for metadata.</entry>
              <entry>NAME | SHORTNAME</entry>
            </row>
            <row>
              <entry>sortOrder</entry>
              <entry>No</entry>
              <entry>Sort the records on the value column in ascending or descending order.</entry>
              <entry>ASC | DESC</entry>
            </row>
            <row>
              <entry>limit</entry>
              <entry>No</entry>
              <entry>The maximum number of records to return. Cannot be larger than 10 000.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>outputType</entry>
              <entry>No</entry>
              <entry>Specify output type for analytical data which can be events, enrollments or
                tracked entity instances. The two last options apply to programs with registration
                only.</entry>
              <entry>EVENT | ENROLLMENT | TRACKED_ENTITY_INSTANCE</entry>
            </row>
            <row>
              <entry>collapseDataDimensions</entry>
              <entry>No</entry>
              <entry>Collapse all data dimensions (data elements and attributes) into a single
                dimension in the response.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>skipMeta</entry>
              <entry>No</entry>
              <entry>Exclude the meta data part of the response (improves performance).</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>skipData</entry>
              <entry>No</entry>
              <entry>Exclude the data part of the response.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>skipRounding</entry>
              <entry>No</entry>
              <entry>Skip rounding of aggregate data values.</entry>
              <entry>false | true</entry>
            </row>
            <row>
              <entry>aggregateData</entry>
              <entry>No</entry>
              <entry>Produce aggregate values for the data dimensions (as opposed to dimension
                items).</entry>
              <entry>false | true</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for cluster event analytics only</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.82*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="4.35*"/>
          <colspec colname="c4" colnum="4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Required</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>clusterSize</entry>
              <entry>Yes</entry>
              <entry>Size of clusters in meters.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>bbox</entry>
              <entry>Yes</entry>
              <entry>Bounding box / area of events to include in the response on the format "min
                longitude, min latitude, max longitude , max latitude".</entry>
              <entry>String</entry>
            </row>
            <row>
              <entry>includeClusterPoints</entry>
              <entry>No</entry>
              <entry>Include information about underlying points for each cluster, be careful if
                cluster represent a very high number of points.</entry>
              <entry>false | true</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="webapi_event_query_analytics">
      <title>Event query analytics</title>
      <para>The <emphasis role="italic">analytics/events/query</emphasis> resource lets you query
        for captured events. This resource does not perform any aggregation, rather it lets you
        query and filter for information about events.</para>
      <screen>/api/26/analytics/events/query</screen>
      <para> You can specify any number of dimensions and any number of filters in a query.
        Dimension item identifiers can refer to any of data elements, person attributes, person
        identifiers, fixed and relative periods and organisation units. Dimensions can optionally
        have a query operator and a filter. Event queries should be on the format described
        below.</para>
      <screen>/api/26/analytics/events/query/&lt;program-id&gt;?startDate=yyyy-MM-dd&amp;endDate=yyyy-MM-dd
  &amp;dimension=ou:&lt;ou-id&gt;;&lt;ou-id&gt;&amp;dimension=&lt;item-id&gt;&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;</screen>
      <para>For example, to retrieve events from the &quot;Inpatient morbidity and mortality&quot;
        program between January and October 2016, where the &quot;Gender&quot; and &quot;Age&quot;
        data elements are included and the &quot;Age&quot; dimension is filtered on &quot;18&quot;,
        you can use the following query:</para>
      <screen>/api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:O6uvpzGd5pu;fdc6uOvgoji&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5:EQ:18</screen>
      <para>To retrieve events for the &quot;Birth&quot; program stage of the &quot;Child
        programme&quot; program between March and December 2016, where the &quot;Weight&quot; data
        element, filtered for values larger than 2000:</para>
      <screen>/api/26/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&amp;startDate=2016-03-01&amp;endDate=2016-12-31
  &amp;dimension=ou:O6uvpzGd5pu&amp;dimension=UXz7xuGCEhU:GT:2000</screen>
      <para>Sorting can be applied to the query for the event date of the event and any dimensions.
        To sort descending on the event date and ascending on the &quot;Age&quot; data element
        dimension you can use:</para>
      <screen>/api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:O6uvpzGd5pu&amp;dimension=qrur9Dvnyt5&amp;desc=EVENTDATE&amp;asc=qrur9Dvnyt5</screen>
      <para>Paging can be applied to the query by specifying the page number and the page size
        parameters. If page number is specified but page size is not, a page size of 50 will be
        used. If page size is specified but page number is not, a page number of 1 will be used. To
        get the third page of the response with a page size of 20 you can use a query like
        this:</para>
      <screen>/api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:O6uvpzGd5pu&amp;dimension=qrur9Dvnyt5&amp;page=3&amp;pageSize=20</screen>
      <section>
        <title>Filtering</title>
        <para>Filters can be applied to data elements, person attributes and person identifiers. The
          filtering is done through the query parameter value on the following format:</para>
        <screen>&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter-value&gt;</screen>
        <para>As an example, you can filter the &quot;Weight&quot; data element for values greater
          than 2000 and lower than 4000 like this:</para>
        <screen>&amp;dimension=UXz7xuGCEhU:GT:2000&amp;dimension=UXz7xuGCEhU:LT:4000</screen>
        <para>You can filter the &quot;Age&quot; data element for multiple, specific ages using the
          IN operator like this:<screen>&amp;dimension=qrur9Dvnyt5:IN:18;19;20</screen></para>
        <para>You can specify multiple filters for a given item by repeating the operator and filter
          components, all separated with semi-colons:</para>
        <screen>&amp;dimension=qrur9Dvnyt5:GT:5:LT:15</screen>
        <para>The available operators are listed below.</para>
        <table frame="all">
          <title>Filter operators</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="87.75pt"/>
            <colspec colnum="2" colname="c2" colwidth="368.25pt"/>
            <thead>
              <row>
                <entry>Operator</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>EQ</entry>
                <entry>Equal to</entry>
              </row>
              <row>
                <entry>GT</entry>
                <entry>Greater than</entry>
              </row>
              <row>
                <entry>GE</entry>
                <entry>Greater than or equal to</entry>
              </row>
              <row>
                <entry>LT</entry>
                <entry>Less than</entry>
              </row>
              <row>
                <entry>LE</entry>
                <entry>Less than or equal to</entry>
              </row>
              <row>
                <entry>NE</entry>
                <entry>Not equal to</entry>
              </row>
              <row>
                <entry>LIKE</entry>
                <entry>Like (free text match)</entry>
              </row>
              <row>
                <entry>IN</entry>
                <entry>Equal to one of multiple values separated by &quot;;&quot;</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section>
        <title>Response formats</title>
        <para>The default response representation format is JSON. The requests must be using the
          HTTP <emphasis role="italic">GET</emphasis> method. The following response formats are
          supported.</para>
        <itemizedlist>
          <listitem>
            <para>json (application/json)</para>
          </listitem>
          <listitem>
            <para>jsonp (application/javascript)</para>
          </listitem>
          <listitem>
            <para>xls (application/vnd.ms-excel)</para>
          </listitem>
        </itemizedlist>
        <para>As an example, to get a response in Excel format you can use a file extension in the
          request URL like this:</para>
        <screen>/api/26/analytics/events/query/eBAyeGv0exc.xls?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5</screen>
        <para>You can set the hierarchyMeta query parameter to true in order to include names of all
          ancestor organisation units in the meta-section of the response:</para>
        <screen>/api/26/analytics/events/query/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:YuQRtpLP10I&amp;dimension=qrur9Dvnyt5:EQ:50&amp;hierarchyMeta=true</screen>
        <para>The default response JSON format will look similar to this:</para>
        <screen>{
    &quot;headers&quot;: [
    {
        &quot;name&quot;: &quot;psi&quot;,
        &quot;column&quot;: &quot;Event&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ps&quot;,
        &quot;column&quot;: &quot;Program stage&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;eventdate&quot;,
        &quot;column&quot;: &quot;Event date&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;coordinates&quot;,
        &quot;column&quot;: &quot;Coordinates&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ouname&quot;,
        &quot;column&quot;: &quot;Organisation unit name&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;oucode&quot;,
        &quot;column&quot;: &quot;Organisation unit code&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;ou&quot;,
        &quot;column&quot;: &quot;Organisation unit&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;oZg33kd9taw&quot;,
        &quot;column&quot;: &quot;Gender&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    },
    {
        &quot;name&quot;: &quot;qrur9Dvnyt5&quot;,
        &quot;column&quot;: &quot;Age&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;,
        &quot;hidden&quot;: false,
        &quot;meta&quot;: false
    } ],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;qrur9Dvnyt5&quot;: &quot;Age&quot;,
            &quot;eBAyeGv0exc&quot;: &quot;Inpatient morbidity and mortality&quot;,
            &quot;ImspTQPwCqd&quot;:&#160;&quot;Sierra Leone&quot;,
            &quot;O6uvpzGd5pu&quot;:&#160;&quot;Bo&quot;,
            &quot;YuQRtpLP10I&quot;: &quot;Badjia&quot;,
            &quot;oZg33kd9taw&quot;: &quot;Gender&quot;
        },
        &quot;ouHierarchy&quot;: {
            &quot;YuQRtpLP10I&quot;: &quot;/ImspTQPwCqd/O6uvpzGd5pu&quot;
        },
    },
    &quot;width&quot;: 8,
    &quot;height&quot;: 4,
    &quot;rows&quot;: [
        [&quot;yx9IDINf82o&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2016-08-05&quot;, &quot;[5.12, 1.23]&quot;, &quot;Ngelehun&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;IPNa7AsCyFt&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2016-06-12&quot;, &quot;[5.22, 1.43]&quot;, &quot;Ngelehun&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;ZY9JL9dkhD2&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2016-06-15&quot;, &quot;[5.42, 1.33]&quot;, &quot;Ngelehun&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;],
        [&quot;MYvh4WAUdWt&quot;, &quot;Zj7UnCAulEk&quot;, &quot;2016-06-16&quot;, &quot;[5.32, 1.53]&quot;, &quot;Ngelehun&quot;, &quot;OU_559&quot;, &quot;YuQRtpLP10I&quot;, &quot;Female&quot;, &quot;50&quot;]
    ]
}</screen>
        <para>The <emphasis role="italic">headers</emphasis> section of the response describes the
          content of the query result. The event unique identifier, the program stage identifier,
          the event date, the organisation unit name, the organisation unit code and the
          organisation unit identifier appear as the first six dimensions in the response and will
          always be present. Next comes the data elements, person attributes and person identifiers
          which were specified as dimensions in the request, in this case the &quot;Gender&quot; and
          &quot;Age&quot; data element dimensions. The header section contains the identifier of the
          dimension item in the &quot;name&quot; property and a readable dimension description in
          the &quot;column&quot; property.</para>
        <para>The <emphasis role="italic">metaData</emphasis> section, <emphasis role="italic"
            >ou</emphasis> object contains the identifiers of all organisation units present in the
          response mapped to a string representing the hierarchy. This hierarchy string lists the
          identifiers of the ancestors (parents) of the organistion unit starting from the root. The
            <emphasis role="italic">names</emphasis> object contains the identifiers of all items in
          the response mapped to their names.</para>
        <para>The <emphasis role="italic">rows</emphasis> section contains the events produced by
          the query. Each row represents exactly one event.</para>
      </section>
    </section>
    <section xml:id="webapi_event_aggregate_analytics">
      <title>Event aggregate analytics</title>
      <para>The <emphasis role="italic">analytics/events/aggregate</emphasis> resource lets you
        retrieve <emphasis role="italic">aggregated numbers</emphasis> of events captured in DHIS2.
        This resource lets you retrieve aggregate data based on a program and optionally a program
        stage, and lets you filter on any event dimension.</para>
      <screen>/api/26/analytics/events/aggregate</screen>
      <para>The events aggregate resource does not return the event information itself, rather the
        aggregate numbers of events matching the request query. Event dimensions include data
        elements, person attributes, person identifiers, periods and organisation units. Aggregate
        event queries should be on the format described below.</para>
      <screen>/api/26/analytics/events/aggregate/&lt;program-id&gt;?startDate=yyyy-MM-dd&amp;endDate=yyyy-MM-dd
  &amp;dimension=ou:&lt;ou-id&gt;;&lt;ou-id&gt;&amp;dimension=&lt;item-id&gt;&amp;dimension=&lt;item-id&gt;:&lt;operator&gt;:&lt;filter&gt;</screen>
      <para>For example, to retrieve aggregate numbers for events from the &quot;Inpatient morbidity
        and mortality&quot; program between January and October 2016, where the &quot;Gender&quot;
        and &quot;Age&quot; data elements are included, the &quot;Age&quot; dimension item is
        filtered on &quot;18&quot; and the &quot;Gender&quot; item is filtered on
        &quot;Female&quot;, you can use the following query:</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31
  &amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw:EQ:Female&amp;dimension=qrur9Dvnyt5:GT:50</screen>
      <para>To retrieve data for fixed and relative periods instead of start and end date, in this
        case May 2016 and last 12 months, and the organisation unit associated with the current
        user, you can use the following query:</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:201605;LAST_12_MONTHS
  &amp;dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji&amp;dimension=oZg33kd9taw</screen>
      <para>In order to specify &quot;Female&quot; as a filter for &quot;Gender&quot; for the data
        response, meaning &quot;Gender&quot; will not be part of the response but will filter the
        aggregate numbers in it, you can use the following syntax:</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:2016;
  &amp;dimension=ou:O6uvpzGd5pu&amp;filter=oZg33kd9taw:EQ:Female</screen>
      <para>To specify the &quot;Bo&quot; organisation unit and the period &quot;2016&quot; as
        filters, and the &quot;Mode of discharge&quot; and Gender&quot; as dimensions, where
        &quot;Gender&quot; is filtered on the &quot;Male&quot; item, you can use a query like
        this:</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&amp;filter=ou:O6uvpzGd5pu
  &amp;dimension=fWIAEtYVEGk&amp;dimension=oZg33kd9taw:EQ:Male</screen>
      <para>To create a &quot;Top 3 report&quot; for &quot;Mode of discharge&quot; you can use the
        limit and sortOrder query parameters similar to this:</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2016&amp;filter=ou:O6uvpzGd5pu
  &amp;dimension=fWIAEtYVEGk&amp;limit=3&amp;sortOrder=DESC</screen>
      <para>To specify a value dimension with a corresponding aggregation type you can use the value
        and aggregationType query parameters. Specifying a value dimension will make the analytics
        engine return aggregate values for the values of that dimension in the response as opposed
        to counts of events.</para>
      <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk&amp;dimension=ou:ImspTQPwCqd
  &amp;dimension=pe:LAST_12_MONTHS&amp;dimension=fWIAEtYVEGk&amp;value=qrur9Dvnyt5&amp;aggregationType=AVERAGE</screen>
      <section>
        <title>Ranges / legend sets</title>
        <para>For aggregate queries you can specify a range / legend set for numeric data element
          and attribute dimensions. The purpose is to group the numeric values into ranges. As an
          example, instead of generating data for an &quot;Age&quot; data element for distinct
          years, you can group the information into age groups. To achieve this, the data element or
          attribute must be associated with the legend set. The format is described below:</para>
        <screen>?dimension=&lt;item-id&gt;-&lt;legend-set-id&gt;</screen>
        <para>An example looks like this:</para>
        <screen>/api/26/analytics/events/aggregate/eBAyeGv0exc.json?stage=Zj7UnCAulEk&amp;dimension=qrur9Dvnyt5-Yf6UHoPkdS6
  &amp;dimension=ou:ImspTQPwCqd&amp;dimension=pe:LAST_12_MONTHS</screen>
      </section>
      <section>
        <title>Response formats</title>
        <para>The default response representation format is JSON. The requests must be using the
          HTTP <emphasis role="italic">GET</emphasis> method. The response will look similar to
          this:</para>
        <screen>{
    &quot;headers&quot;: [
        {
            &quot;name&quot;: &quot;oZg33kd9taw&quot;,
            &quot;column&quot;: &quot;Gender&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;qrur9Dvnyt5&quot;,
            &quot;column&quot;: &quot;Age&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;pe&quot;,
            &quot;column&quot;: &quot;Period&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;ou&quot;,
            &quot;column&quot;: &quot;Organisation unit&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        },
        {
            &quot;name&quot;: &quot;value&quot;,
            &quot;column&quot;: &quot;Value&quot;,
            &quot;type&quot;: &quot;java.lang.String&quot;,
            &quot;meta&quot;: false
        }
    ],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;eBAyeGv0exc&quot;: &quot;Inpatient morbidity and mortality&quot;
        }
    },
    &quot;width&quot;: 5,
    &quot;height&quot;: 39,
    &quot;rows&quot;: [
        [
            &quot;Female&quot;,
            &quot;95&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;2&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;63&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;2&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;67&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;1&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;71&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;1&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;75&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;14&quot;
        ],
        [
            &quot;Female&quot;,
            &quot;73&quot;,
            &quot;201605&quot;,
            &quot;O6uvpzGd5pu&quot;,
            &quot;5&quot;
        ],
    ]
}</screen>
        <para>Note that the max limit for rows to return in a single response is 10 000. If the
          query produces more than the max limit, a <emphasis role="italic">409 Conflict</emphasis>
          status code will be returned.</para>
      </section>
    </section>
    <section xml:id="webapi_event_clustering_analytics">
      <title>Event clustering analytics</title>
      <para>The <emphasis role="italic">analytics/events/cluster</emphasis> resource provides
        clustered geospatial event data. A request looks like this:</para>
      <screen>/api/26/analytics/events/cluster/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31&amp;dimension=ou:LEVEL-2
  &amp;clusterSize=100000&amp;bbox=-13.2682125,7.3721619,-10.4261178,9.904012&amp;includeClusterPoints=false</screen>
      <para>The cluster response provides the count of underlying points, the centre point and
        extent of each cluster. If the <emphasis role="italic">includeClusterPoints</emphasis> query
        parameter is set to true, a comma-separated string with the identifiers of the underlying
        events is included. A sample response looks like this:</para>
      <screen>{
    "headers": [{
        "name": "count",
        "column": "Count",
        "type": "java.lang.Long",
        "meta": false
    }, {
        "name": "center",
        "column": "Center",
        "type": "java.lang.String",
        "meta": false
    }, {
        "name": "extent",
        "column": "Extent",
        "type": "java.lang.String",
        "meta": false
    }, {
        "name": "points",
        "column": "Points",
        "type": "java.lang.String",
        "meta": false
    }],
    "width": 3,
    "height": 4,
    "rows": [
        ["3", "POINT(-13.15818 8.47567)", "BOX(-13.26821 8.4St7215,-13.08711 8.47807)", ""],
        ["9", "POINT(-13.11184 8.66424)", "BOX(-13.24982 8.51961,-13.05816 8.87696)", ""],
        ["1", "POINT(-12.46144 7.50597)", "BOX(-12.46144 7.50597,-12.46144 7.50597)", ""],
        ["7", "POINT(-12.47964 8.21533)", "BOX(-12.91769 7.66775,-12.21011 8.49713)", ""]
    ]
}</screen>
    </section>
    <section xml:id="webapi_event_count_extent_analytics">
      <title>Event count and extent analytics</title>
      <para>The <emphasis role="italic">analytics/events/count</emphasis> resource is suitable for
        geometry-related requests for retrieving the count and extent (bounding box) of events for a
        specific query. The query syntax is equal to the <emphasis role="italic"
          >events/query</emphasis> resource. A request looks like this:</para>
      <screen>/api/26/analytics/events/count/eBAyeGv0exc?startDate=2016-01-01&amp;endDate=2016-10-31&amp;dimension=ou:O6uvpzGd5pu</screen>
      <para> The response will provide the count and extent in JSON format:</para>
      <screen>{
    extent: "BOX(-13.2682125910096 7.38679562779441,-10.4261178860988 9.90401290212795)",
    count: 59
}</screen>
    </section>
  </section>
  <section xml:id="webapi_data_set_report">
    <title>Data set report</title>
    <para>Data set reports can be generated trough the web api using the
        <emphasis>/dataSetReport</emphasis> resource. This resource generates reports on data set
      and returns the result in the form of a HTML table.
      <screen>/api/26/dataSetReport</screen></para>
    <para>The request supports the following parameters:</para>
    <para>
      <table frame="all">
        <title>Accepted parameters of /dataSetReport resource</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="3.25*"/>
          <colspec colname="c3" colnum="3" colwidth="1.11*"/>
          <colspec colname="c4" colnum="4" colwidth="1.13*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
              <entry>Type</entry>
              <entry>Required</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ds</entry>
              <entry>Data set to create the report from</entry>
              <entry>Data set UID</entry>
              <entry>Yes</entry>
            </row>
            <row>
              <entry>pe</entry>
              <entry>Period to create the report from</entry>
              <entry>ISO String</entry>
              <entry>Yes</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Organisation unit to create the report from</entry>
              <entry>Organisation unit UID</entry>
              <entry>Yes</entry>
            </row>
            <row>
              <entry>dimension</entry>
              <entry>Dimensions to be used as filters for the report</entry>
              <entry>One or more UIDs</entry>
              <entry>No</entry>
            </row>
            <row>
              <entry>selectedUnitOnly</entry>
              <entry>Whether to use captured or aggregated data</entry>
              <entry>Boolean</entry>
              <entry>No</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>The data set report resource accepts GET requests only. An example request to retrieve a
      report for a data set and orgunit for 2015 looks like
      this:<screen>GET /api/dataSetReport?ds=BfMAe6Itzgt&amp;pe=201610&amp;ou=ImspTQPwCqd&amp;selectedUnitOnly=false</screen></para>
  </section>
  <section xml:id="webapi_push_analysis">
    <title>Push Analysis</title>
    <para>The push analysis api includes endpoints for previewing a push analysis report for the
      logged in user and manualy triggering the system to generate and send push analysis reports,
      in addition to the normal CRUD operations. When using the create and update endpoints for push
      analysis, the push analysis will be scheduled to run based on the properties of the push
      analysis. When deleting or updating a pushanalysis to be disabled, the job will also be
      stopped from running in the future.</para>
    <para>To get a HTML preview of an existing push analysis, you can do a GET request to the
      following endpoint:<screen>/api/26/pushAnalysis/&lt;id>/render</screen></para>
    <para>To manually trigger a push analysis job, you can do a POST request to this
      endpoint:<screen>/api/26/pushAnalysis/&lt;id>/run</screen></para>
    <para>A push analysis consists of the following properties, where some are required to
      automaticly run push analysis jobs:<table frame="all">
        <title>Push analysis properties</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Property</entry>
              <entry>Description</entry>
              <entry>Type</entry>
              <entry>Required</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>dashboard</entry>
              <entry>Dashboard on which reports are based</entry>
              <entry>Dashboard UID</entry>
              <entry>Yes</entry>
            </row>
            <row>
              <entry>message</entry>
              <entry>Appears after title in reports</entry>
              <entry>String</entry>
              <entry>No</entry>
            </row>
            <row>
              <entry>recipientUserGroups</entry>
              <entry>A set of user groups who should receive the reports</entry>
              <entry>One or more user Group UID</entry>
              <entry>No. Scheduled jobs without any recipient will be skipped.</entry>
            </row>
            <row>
              <entry>enabled</entry>
              <entry>Indicated whether this push analysis should be scheduled or not. False by
                default.</entry>
              <entry>Boolean</entry>
              <entry>Yes. Must be true to be scheduled.</entry>
            </row>
            <row>
              <entry>schedulingFrequency</entry>
              <entry>The frequency of which reports should be scheduled.</entry>
              <entry>"DAILY", "WEEKLY", "MONTHLY"</entry>
              <entry>No. Push analysis without a frequency will not be scheduled</entry>
            </row>
            <row>
              <entry>schedulingDayOfFrequency</entry>
              <entry>The day in the frequency the job should be scheduled.</entry>
              <entry>Integer. Any value when frequency is "DAILY". 0-7 when frequency is "WEEKLY".
                1-31 when frequency is "MONTHLY"</entry>
              <entry>No. Push analysis  without a valid day of frequency for the frequency set will
                not be scheduled.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>
  <section xml:id="webapi_usage_analytics">
    <title>Data usage analytics</title>
    <para>The usage analytics API lets you access information about how people are using DHIS2 based
      on data analysis. When users access favorites, an event is recorded. The event consists of the
      user name, the UID of the favorite, when the event took place, and the type of event. The
      different types of events are listed in the
      table.<screen>/api/26/dataStatistics</screen></para>
    <para>The usage analytics API lets you retrieve aggregated snapshots of usage analytics based on
      time intervals. The API captures user views (for example the number of times a chart or pivot
      table has been viewed by a user) and saved analysis favorites (for example favorite charts and
      pivot tables). DHIS2 will capture nightly snapshots which are then aggregated at
      request.</para>
    <section xml:id="webapi_usage_analytics_request_query_parameters">
      <title>Request query parameters</title>
      <para>The usage analytics (data statistics) API supports two operations:</para>
      <itemizedlist>
        <listitem>
          <para>POST: creates a view event</para>
        </listitem>
        <listitem>
          <para>GET: retrieves aggregated statistics</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="webapi_usage_analytics_create_view_events">
      <title>Create view events (POST)</title>
      <para>The usage analytics API lets you create event views. The dataStatisticsEventType
        parameter describes what type of item was viewed. The favorite parameter indicates the
        identifier of the relevant favorite.</para>
      <para>URL that creates a new event view of
        charts:<screen>POST /api/24/dataStatistics?eventType=CHART_VIEW&amp;favorite=LW0O27b7TdD</screen></para>
      <para>A successful save operation returns HTTP status code 201. The table below shows the
        supported types of events.</para>
      <table>
        <title>Supported event types</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.63*"/>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>REPORT_TABLE_VIEW</entry>
              <entry>Report table (pivot table) view</entry>
            </row>
            <row>
              <entry>CHART_VIEW</entry>
              <entry>Chart view</entry>
            </row>
            <row>
              <entry>MAP_VIEW</entry>
              <entry>Map view (GIS)</entry>
            </row>
            <row>
              <entry>EVENT_REPORT_VIEW</entry>
              <entry>Event report view</entry>
            </row>
            <row>
              <entry>EVENT_CHART_VIEW</entry>
              <entry>Event chart view</entry>
            </row>
            <row>
              <entry>DASHBOARD_VIEW</entry>
              <entry>Dashboard view</entry>
            </row>
            <row>
              <entry>DATA_SET_REPORT_VIEW</entry>
              <entry>Data set report view</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="webapi_aggregated_usage_analytics">
      <title>Retrieve aggregated usage analytics report (GET)</title>
      <para>The usage analytics (data statistics) API lets you specify certain query parameters when
        asking for an aggregated report.<table frame="all">
          <title>Query parameters for aggregated usage analytics (data statistics)</title>
          <tgroup cols="4">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <colspec colname="c3" colnum="3" colwidth="1.0*"/>
            <colspec colname="c4" colnum="4" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Query parameter</entry>
                <entry>Required</entry>
                <entry>Description</entry>
                <entry>Options</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>startDate</entry>
                <entry>Yes</entry>
                <entry>Start date for period</entry>
                <entry>Date in yyyy-MM-dd format</entry>
              </row>
              <row>
                <entry>endDate</entry>
                <entry>Yes</entry>
                <entry>End date for period</entry>
                <entry>Date in yyyy-MM-dd format</entry>
              </row>
              <row>
                <entry>interval</entry>
                <entry>Yes</entry>
                <entry>Type of interval to be aggregated</entry>
                <entry>DAY, WEEK, MONTH, YEAR</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para>The startDate and endDate parameters specify the period for which snapshots are to be
        used in the aggregation. You must format the dates as shown above. If no
        snapshots are saved in the specified period, an empty list is sent back. The parameter
        called interval specifies what type of aggregation will be done.</para>
      <para>API query that creates a query for a yearly
        aggregation:<screen>GET /api/24/dataStatistics?startDate=2014-01-02&amp;endDate=2016-01-01&amp;interval=MONTH</screen></para>
    </section>
    <section xml:id="webapi_usage_analytics_top_favorites">
      <title>Retrieve top favorites</title>
      <para>The usage analytics API lets you retrieve the top favorites used in DHIS2, and by
          user.<table frame="all">
          <title>Query parameters for top favorites</title>
          <tgroup cols="4">
            <colspec colname="c1" colnum="1" colwidth="1.0*"/>
            <colspec colname="c2" colnum="2" colwidth="1.0*"/>
            <colspec colname="c3" colnum="3" colwidth="1.0*"/>
            <colspec colname="c4" colnum="4" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Query parameter</entry>
                <entry>Required</entry>
                <entry>Description</entry>
                <entry>Options</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>eventType</entry>
                <entry>Yes</entry>
                <entry>The data statistics event type</entry>
                <entry>See above table</entry>
              </row>
              <row>
                <entry>pageSize</entry>
                <entry>No</entry>
                <entry>Size of the list returned</entry>
                <entry>For example 5, 10, 25. Default is 25</entry>
              </row>
              <row>
                <entry>sortOrder</entry>
                <entry>No</entry>
                <entry>Descending or ascending</entry>
                <entry>ASC or DESC. Default is DESC.</entry>
              </row>
              <row>
                <entry>username</entry>
                <entry>No</entry>
                <entry>If specified, the response will only contain favorites by this user.</entry>
                <entry>For example 'admin'</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para>The API query can be used without username, and will then find the top favorites of the
        system. If username is specified, the response will only contain the top favorites of that
        user.<screen>/api/24/dataStatistics/favorites?eventType=CHART_VIEW&amp;pageSize=25&amp;sortOrder=ASC</screen><screen>/api/24/dataStatistics/favorites?eventType=CHART_VIEW&amp;pageSize=25&amp;sortOrder=ASC&amp;username=admin</screen></para>
    </section>
    <section xml:id="webapi_usage_analytics_response_format">
      <title>Response format</title>
      <para>You can return the aggregated data in a usage analytics response in several
        representation formats. The default format is JSON. The available formats and content types are:<itemizedlist>
          <listitem>
            <para>json (application/json)</para>
          </listitem>
          <listitem>
            <para>xml (application/xml)</para>
          </listitem>
          <listitem>
            <para>html (text/html)</para>
          </listitem>
        </itemizedlist></para>
      <para>API query that requests an usage analytics response in XML
        format:<screen>/api/24/dataStatistics.xml?startDate=2014-01-01&amp;endDate=2016-01-01&amp;interval=WEEK</screen></para>
      <para>You must retrieve the aggregated usage analytics response with the HTTP GET method. This
        allows you to link directly from Web pages and other HTTP-enabled clients to usage analytics
        responses. To do functional testing use the
        <?oxy_comment_start author="yrjanaff" timestamp="20160623T095607+0200" comment="cURL is a developer testing tool for API queries, so the c in cURL must not be removed." flag="done"?>cURL<?oxy_comment_end?>
        library.</para>
      <para>Execute this command against the demo database to get an usage analytics response in
        JSON format: </para>
      <para>
        <screen>curl "play.dhis2.org/demo/api/24/dataStatistics?startDate=2016-02-01&amp;endDate=2016-02-14&amp;
interval=WEEK" -u admin:district</screen>
      </para>
      <para>The JSON response looks like this:
        <screen>[
  {
    "year": 2016,
    "week": 5,
    "mapViews": 2181,
    "chartViews": 2227,
    "reportTableViews": 5633,
    "eventReportViews": 6757,
    "eventChartViews": 9860,
    "dashboardViews": 10082,
    "totalViews": 46346,
    "averageViews": 468,
    "averageMapViews": 22,
    "averageChartViews": 22,
    "averageReportTableViews": 56,
    "averageEventReportViews": 68,
    "averageEventChartViews": 99,
    "averageDashboardViews": 101,
    "savedMaps": 1805,
    "savedCharts": 2205,
    "savedReportTables": 1995,
    "savedEventReports": 1679,
    "savedEventCharts": 1613,
    "savedDashboards": 0,
    "savedIndicators": 1831,
    "activeUsers": 99,
    "users": 969
  },
  {
    "year": 2016,
    "week": 6,
    "mapViews": 2018,
    "chartViews": 2267,
    "reportTableViews": 4714,
    "eventReportViews": 6697,
    "eventChartViews": 9511,
    "dashboardViews": 12181,
    "totalViews": 47746,
    "averageViews": 497,
    "averageMapViews": 21,
    "averageChartViews": 23,
    "averageReportTableViews": 49,
    "averageEventReportViews": 69,
    "averageEventChartViews": 99,
    "averageDashboardViews": 126,
    "savedMaps": 1643,
    "savedCharts": 1935,
    "savedReportTables": 1867,
    "savedEventReports": 1977,
    "savedEventCharts": 1714,
    "savedDashboards": 0,
    "savedIndicators": 1646,
    "activeUsers": 96,
    "users": 953
  }
]</screen></para>
    </section>
    <section xml:id="webapi_usage_analytics_retrieve_favorite_statistics">
      <title>Retrieve statistics for a favorite</title>
      <para>You can retrieve the number of view for a specific favorite by using the
          <emphasis>favorites</emphasis> resource, where <emphasis>{favorite-id}</emphasis> should
        be substituted with the identifier of the favorite of
        interest:<screen>/api/24/dataStatistics/favorites/{favorite-id}.json</screen></para>
      <para>The response will contain the number of views for the given favorite and look like
        this:<screen>{
  "views": 3
}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_geospatial_features">
    <title>Geospatial features</title>
    <para>The <emphasis role="italic">geoFeatures</emphasis> resource lets you retrieve geospatial
      information from DHIS2. Geospatial features are stored together with organisation units. The
      syntax for retrieving features is identical to the syntax used for the organisation unit
      dimension for the analytics resource. It is recommended to read up on the analytics api
      resource before continuing reading this section. You must use the GET request type, and only
      JSON response format is supported.</para>
    <para>As an example, to retrieve geo features for all organisation units at level 3 in the
      organisation unit hierarchy you can use a GET request with the following URL:</para>
    <screen>/api/26/geoFeatures.json?ou=ou:LEVEL-3</screen>
    <para>To retrieve geo features for organisation units at level within the boundary of an
      organisation unit (e.g. at level 2) you can use this URL:</para>
    <screen>/api/26/geoFeatures.json?ou=ou:LEVEL-4;O6uvpzGd5pu</screen>
    <para>The semantics of the response properties are described in the following table.</para>
    <table frame="all">
      <title>Geo features response</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="5.67*"/>
        <thead>
          <row>
            <entry>Property</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>id</entry>
            <entry>Organisation unit / geo feature identifier</entry>
          </row>
          <row>
            <entry>na</entry>
            <entry>Organisation unit / geo feature name</entry>
          </row>
          <row>
            <entry>hcd</entry>
            <entry>Has coordinates down, indicating whether one or more children organisation units
              exist with coordinates (below in the hierarchy)</entry>
          </row>
          <row>
            <entry>hcu</entry>
            <entry>Has coordinates up, indicating whether the parent organisation unit has
              coordinates (above in the hierarchy)</entry>
          </row>
          <row>
            <entry>le</entry>
            <entry>Level of this organisation unit / geo feature.</entry>
          </row>
          <row>
            <entry>pg</entry>
            <entry>Parent graph, the graph of parent organisation unit identifiers up to the root in
              the hierarchy</entry>
          </row>
          <row>
            <entry>pi</entry>
            <entry>Parent identifier, the identifier of the parent of this organisation unit</entry>
          </row>
          <row>
            <entry>pn</entry>
            <entry>Parent name, the name of the parent of this organisation unit</entry>
          </row>
          <row>
            <entry>ty</entry>
            <entry>Geo feature type, 1 = point and 2 = polygon or multi-polygon</entry>
          </row>
          <row>
            <entry>co</entry>
            <entry>Coordinates of this geo feature</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section>
      <title>GeoJSON</title>
      <para>To export GeoJSON, you can simple add <emphasis role="italic">.geosjon</emphasis> as an
        extension to the endpoint <emphasis role="italic">/api/organisationUnits</emphasis>, or you
        can use the <emphasis role="italic">Accept</emphasis> header <emphasis role="italic"
          >application/json+geojson</emphasis>.</para>
      <para>Two parameters are supported <emphasis role="bold">level</emphasis> (defaults to 1) and
          <emphasis role="bold">parent</emphasis> (defaults to root organisation units), both can be
        added multiple times, some examples follow.</para>
      <para>Get all features at level 2 and 4:
        <screen>/api/26/organisationUnits.geojson?level=2&amp;level=4</screen></para>
      <para>Get all features at level 3 with a boundary organisation
        unit:<screen>/api/26/organisationUnits.geojson?parent=fdc6uOvgoji&amp;level=3</screen></para>
    </section>
  </section>
  <section xml:id="webapi_generating_resource_analytics_tables">
    <title>Generating resource and analytics tables</title>
    <para>DHIS2 features a set of generated database tables which are used as basis for various
      system functionality. These tables can be executed immediately or scheduled to be executed at
      regular intervals through the user interface. They can also be generated through the Web API
      as explained in this section. This task is typically one for a system administrator and not
      consuming clients. </para>
    <para>The resource tables are used internally by the DHIS2 application for various analysis
      functions. These tables are also valuable for users writing advanced SQL reports. They can be
      generated with a POST or PUT request to the following URL:</para>
    <screen>/api/26/resourceTables</screen>
    <para>The analytics tables are optimized for data aggregation and used currently in DHIS2 for
      the pivot table module. The analytics tables can be generated with a POST or PUT request
      to:</para>
    <screen>/api/26/resourceTables/analytics</screen>
    <table frame="all">
      <title>Analytics tables optional query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="2.38*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="3.76*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Options</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>skipResourceTables</entry>
            <entry>false | true</entry>
            <entry>Skip generation of resource tables</entry>
          </row>
          <row>
            <entry>skipAggregate</entry>
            <entry>false | true</entry>
            <entry>Skip generation of aggregate data and completeness data</entry>
          </row>
          <row>
            <entry>skipEvents</entry>
            <entry>false | true</entry>
            <entry>Skip generation of event data</entry>
          </row>
          <row>
            <entry>lastYears</entry>
            <entry>integer</entry>
            <entry>Number of last years of data to include</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>These requests will return immediately and initiate a server-side process.</para>
  </section>
  <section xml:id="webapi_maintenance">
    <title>Maintenance</title>
    <para>To perform maintenance you can interact with the <emphasis role="italic"
        >maintenance</emphasis> resource. You should use <emphasis role="italic">POST</emphasis> or
        <emphasis role="italic">PUT</emphasis> as method for requests. The following requests are
      available. </para>
    <para>Analytics tables clear will drop all analytics tables:</para>
    <screen>/api/26/maintenance/analyticsTablesClear</screen>
    <para>Expired invitations clear will remove all user account invitations which have
      expired:</para>
    <screen>/api/26/maintenance/expiredInvitationsClear</screen>
    <para>Period pruning will remove periods which are not linked to any data values:</para>
    <screen>/api/26/maintenance/periodPruning</screen>
    <para>Zero data value removal will delete zero data values linked to data elements where zero
      data is defined as not significant:</para>
    <screen>/api/26/maintenance/zeroDataValueRemoval</screen>
    <para>Drop SQL views will drop all SQL views in the database. Note that it will not delete the
      DHIS2 SQL views.</para>
    <screen>/api/26/maintenance/sqlViewsDrop</screen>
    <para>Create SQL views will recreate all SQL views in the database.</para>
    <screen>/api/26/maintenance/sqlViewsCreate</screen>
    <para>Category option combo update will remove obsolete and generate missing category option
      combos for all category combinations:</para>
    <screen>/api/26/maintenance/categoryOptionComboUpdate</screen>
    <para>Cache clearing will clear the application Hibernate cache and the analytics partition
      caches:</para>
    <screen>/api/26/maintenance/cacheClear</screen>
    <para>Re-generate organisation unit path property (can be useful if you imported org units with
      SQL):</para>
    <screen>/api/26/maintenance/ouPathsUpdate</screen>
    <para>Data pruning will remove complete data set registrations, data approvals, data value
      audits and data values, in this case for an organisation unit.</para>
    <screen>/api/26/maintenance/dataPruning/organisationUnits/&lt;org-unit-id&gt;</screen>
    <para>Metadata validation will apply all metadata validation rules and return the result of the
      operation:</para>
    <screen>/api/26/metadataValidation</screen>
    <para>Maintenance operations are supported in a batch style with a POST request to the
      api/maintenance resource where the operations are supplied as query parameters:</para>
    <screen>/api/26/maintenance?analyticsTablesClear=true&amp;expiredInvitationsClear=true&amp;periodPruning=true
  &amp;zeroDataValueRemoval=true&amp;sqlViewsDrop=true&amp;sqlViewsCreate=true&amp;categoryOptionComboUpdate=true
  &amp;cacheClear=true&amp;ouPathsUpdate=true</screen>
  </section>
  <section xml:id="webapi_system_resource">
    <title>System resource</title>
    <para>The system resource provides you with convenient information and functions. The system
      resource can be found at <emphasis role="italic">/api/system</emphasis>. </para>
    <section>
      <title>Generate identifiers</title>
      <para>To generate valid, random DHIS2 identifiers you can do a GET request to this
        resource:</para>
      <screen>/api/26/system/id?limit=3</screen>
      <para>The <emphasis role="italic">limit</emphasis> query parameter is optional and indicates
        how many identifiers you want to be returned with the response. The default is to return one
        identifier. The response will contain a JSON object with a array named codes, similar to
        this:</para>
      <screen>{
  &quot;codes&quot;: [
    &quot;Y0moqFplrX4&quot;,
    &quot;WI0VHXuWQuV&quot;,
    &quot;BRJNBBpu4ki&quot;
  ]
}</screen>
      <para>The DHIS2 UID format has these requirements:</para>
      <itemizedlist>
        <listitem>
          <para>11 characters long.</para>
        </listitem>
        <listitem>
          <para>Alphanumeric characters only, ie. alphabetic or numeric characters
            (A-Za-z0-9).</para>
        </listitem>
        <listitem>
          <para>Start with an alphabetic character (A-Za-z).</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>View system information</title>
      <para>To get information about the current system you can do a GET request to this URL:</para>
      <screen>/api/26/system/info</screen>
      <para>JSON and JSONP response formats are supported. The system info response currently
        includes the below properties. Note that if the user who is requesting this resourec does
        not have full authority in the system then only the first seven properties will be included,
        as this information is security sensitive.</para>
      <screen>{
    contextPath: &quot;http://yourdomain.com&quot;,
    userAgent: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/29.0.1547.62 Safari/537.36&quot;,
    version: &quot;2.13-SNAPSHOT&quot;,
    revision: &quot;11852&quot;,
    buildTime: &quot;2013-09-01T21:36:21.000+0000&quot;,
    serverDate: &quot;2013-09-02T12:35:54.311+0000&quot;,
    environmentVariable: &quot;DHIS2_HOME&quot;,
    javaVersion: &quot;1.7.0_06&quot;,
    javaVendor: &quot;Oracle Corporation&quot;,
    javaIoTmpDir: &quot;/tmp&quot;,
    javaOpts: &quot;-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m&quot;,
    osName: &quot;Linux&quot;,
    osArchitecture: &quot;amd64&quot;,
    osVersion: &quot;3.2.0-52-generic&quot;,
    externalDirectory: &quot;/home/dhis/config/dhis2&quot;,
    databaseInfo: {
        type: &quot;PostgreSQL&quot;,
        name: &quot;dhis2&quot;,
        user: &quot;dhis&quot;,
        spatialSupport: false
    },
    memoryInfo: &quot;Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333&quot;,
    cpuCores: 8
}</screen>
      <para>To get information about the system context (<emphasis role="italic"
          >contextPath</emphasis> and <emphasis role="italic">userAgent</emphasis>) only you can do
        a GET request to the below URL. JSON and JSONP response formats are supported:
        <screen>/api/26/system/context</screen></para>
    </section>
    <section>
      <title>Check if username and password combination is correct</title>
      <para>To check if some user credentials (a username and password combination) is correct you
        can make a <emphasis role="italic">GET</emphasis> request to the following resource using
          <emphasis role="italic">basic authentication</emphasis>:</para>
      <screen>/api/26/system/ping</screen>
      <para>You can detect the outcome of the authentication by inspecting the <emphasis
          role="italic">HTTP status code</emphasis> of the response header. The meaning of the
        possible status codes are listed below. Note that this applies to Web API requests in
        general.</para>
      <table frame="all">
        <title>HTTP Status codes</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1.1*"/>
          <colspec colnum="2" colname="c2" colwidth="1*"/>
          <colspec colnum="3" colname="newCol3" colwidth="6.09*"/>
          <thead>
            <row>
              <entry>HTTP Status code</entry>
              <entry>Description</entry>
              <entry>Outcome</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>200</entry>
              <entry>OK</entry>
              <entry>Authentication was successful</entry>
            </row>
            <row>
              <entry>302</entry>
              <entry>Found</entry>
              <entry>No credentials was supplied with the request - no authentication took
                place</entry>
            </row>
            <row>
              <entry>401</entry>
              <entry>Unauthorized</entry>
              <entry>The username and password combination was incorrect - authentication
                failed</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>View asynchronous task status</title>
      <para>Several tasks which typically take a significant time to complete can be performed
        asynchronously. After initiating an async task you can poll the status through the <emphasis
          role="italic">system/tasks</emphasis> resource by suppling the task category of interest. </para>
      <para>When polling for the task status you need to authenticate as the same user which
        initiated the task. The following task categories are supported.</para>
      <para>
        <table frame="all">
          <title>Task categories</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="3.65*"/>
            <thead>
              <row>
                <entry>Identifier</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>ANALYTICSTABLE_UPDATE</entry>
                <entry>Generation of the analytics tables.</entry>
              </row>
              <row>
                <entry>RESOURCETABLE_UPDATE</entry>
                <entry>Generation of the resource tables.</entry>
              </row>
              <row>
                <entry>MONITORING</entry>
                <entry>Processing of data surveillance/monitoring validation rules.</entry>
              </row>
              <row>
                <entry>DATAVALUE_IMPORT</entry>
                <entry>Import of data values.</entry>
              </row>
              <row>
                <entry>EVENT_IMPORT</entry>
                <entry>Import of events.</entry>
              </row>
              <row>
                <entry>METADATA_IMPORT</entry>
                <entry>Import of metadata.</entry>
              </row>
              <row>
                <entry>DATAINTEGRITY</entry>
                <entry>Processing of data integrity checks.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>You can poll tasks through a GET request to the system tasks
        resource:<screen>/api/26/system/tasks/{task-category-id}</screen></para>
      <para>A request to poll for the status of a data value import task looks like
        this:<screen>/api/26/system/tasks/DATAVALUE_IMPORT</screen></para>
      <para>The response will provide information about the status, such as the notification level,
        category, time and status. The completed property indicates whether the process is
        considered to be
        complete.<screen>[
    {
        &quot;uid&quot;: &quot;hpiaeMy7wFX&quot;,
        &quot;level&quot;: &quot;INFO&quot;,
        &quot;category&quot;: &quot;DATAVALUE_IMPORT&quot;,
        &quot;time&quot;: &quot;2015-09-02T07:43:14.595+0000&quot;,
        &quot;message&quot;: &quot;Import done&quot;,
        &quot;completed&quot;: true
    }
]</screen></para>
    </section>
    <section>
      <title>Get appearance information</title>
      <para>You can retrieve the available flag icons in JSON format with a GET
        request:<screen>/api/26/system/flags</screen></para>
      <para>You can retrieve the available UI styles in JSON format with a GET
        request:<screen>/api/26/system/styles</screen></para>
    </section>
  </section>
  <section xml:id="webapi_locales">
    <title>Locales</title>
    <para>DHIS2 supports translations both for the user interface and for database content.</para>
    <section>
      <title>UI locales</title>
      <para>You can retrieve the available locales for the user interface through the following
        resource with a GET request. XML and JSON resource representations are
        supported.<screen>/api/26/locales/ui</screen></para>
    </section>
    <section>
      <title>Database content locales</title>
      <para>You can retrieve and create locales for database content with GET and POST requests
        through the following resource. XML and JSON resource representations are
        supported.<screen>/api/26/locales/db</screen></para>
    </section>
  </section>
  <section xml:id="webapi_translations">
    <title>Translations</title>
    <para>DHIS2 allows for translations of database content. You can work with translations through
      the Web API using the <emphasis role="italic">translations</emphasis>
      resource.<screen>/api/26/translations</screen></para>
    <section>
      <title>Create translation</title>
      <para>You can create a translation with a POST request in JSON
        format:<screen>{
  &quot;objectId&quot;: &quot;P3jJH5Tu5VC&quot;,
  &quot;className&quot;: &quot;DataElement&quot;,
  &quot;locale&quot;: &quot;es&quot;,
  &quot;property&quot;: &quot;name&quot;,
  &quot;value&quot;: &quot;Casos de fiebre amarilla&quot;
}</screen><screen>POST /api/26/translations</screen></para>
      <para>The properties which support translations are listed in the table below.</para>
      <table frame="all">
        <title>Property names</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Property name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>name</entry>
              <entry>Object name</entry>
            </row>
            <row>
              <entry>shortName</entry>
              <entry>Object short name</entry>
            </row>
            <row>
              <entry>description</entry>
              <entry>Object description</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The classes which support translations are listed in the table below.</para>
      <table frame="all">
        <title>Class names</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="1.94*"/>
          <thead>
            <row>
              <entry>Class name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>DataElementCategoryOption</entry>
              <entry>Category option</entry>
            </row>
            <row>
              <entry>DataElementCategory</entry>
              <entry>Category</entry>
            </row>
            <row>
              <entry>DataElementCategoryCombo</entry>
              <entry>Category combination</entry>
            </row>
            <row>
              <entry>DataElement</entry>
              <entry>Data element</entry>
            </row>
            <row>
              <entry>DataElementGroup</entry>
              <entry>Data element group</entry>
            </row>
            <row>
              <entry>DataElementGroupSet</entry>
              <entry>Data element group set</entry>
            </row>
            <row>
              <entry>Indicator</entry>
              <entry>Indicator</entry>
            </row>
            <row>
              <entry>IndicatorType</entry>
              <entry>Indicator type</entry>
            </row>
            <row>
              <entry>IndicatorGroup</entry>
              <entry>Indicator group</entry>
            </row>
            <row>
              <entry>IndicatorGroupSet</entry>
              <entry>Indicator group set</entry>
            </row>
            <row>
              <entry>OrganisationUnit</entry>
              <entry>Organisation unit</entry>
            </row>
            <row>
              <entry>OrganisationUnitGroup</entry>
              <entry>Organisation unit group</entry>
            </row>
            <row>
              <entry>OrganisationUnitGroupSet</entry>
              <entry>Organisation unit group set</entry>
            </row>
            <row>
              <entry>DataSet</entry>
              <entry>Data set</entry>
            </row>
            <row>
              <entry>Section</entry>
              <entry>Data set section</entry>
            </row>
            <row>
              <entry>ValidationRule</entry>
              <entry>Validation rule</entry>
            </row>
            <row>
              <entry>ValidationRuleGroup</entry>
              <entry>Validation rule group</entry>
            </row>
            <row>
              <entry>Program</entry>
              <entry>Program</entry>
            </row>
            <row>
              <entry>ProgramStage</entry>
              <entry>Program stage</entry>
            </row>
            <row>
              <entry>TrackedEntityAttribute</entry>
              <entry>Tracked entity attribute</entry>
            </row>
            <row>
              <entry>TrackedEntityAttributeGroup</entry>
              <entry>Tracked entity attribute group</entry>
            </row>
            <row>
              <entry>TrackedEntity</entry>
              <entry>Tracked entity</entry>
            </row>
            <row>
              <entry>RelationshipType</entry>
              <entry>Relationship type for tracked entity instances</entry>
            </row>
            <row>
              <entry>OptionSet</entry>
              <entry>Option set</entry>
            </row>
            <row>
              <entry>Attribute</entry>
              <entry>Attribute for metadata</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Get translations</title>
      <para>You can browse all translations through the translations
        resource:<screen>GET /api/26/translations</screen></para>
      <para>You can use the standard filtering technique to fetch translations of interest. E.g. to
        get all translations for data elements in the Spanish locale you can use this
        request:<screen>/api/26/translations.json?fields=*&amp;filter=className:eq:DataElement&amp;filter=locale:eq:es</screen></para>
      <para>To get translations for a specific object for all
        properties:<screen>/api/26/translations.json?fields=*&amp;filter=className:eq:DataElement&amp;filter=locale:eq:fr&amp;filter=objectId:eq:fbfJHSPpUQD</screen></para>
    </section>
  </section>
  <section xml:id="webapi_sms">
    <title>Short Message Service (SMS)</title>
    <para>This section covers the SMS Web API for sending and receiving short text messages.</para>
    <section>
      <title>Outbound SMS service</title>
      <para>The Web API supports sending outgoing SMS using the POST method. SMS can be sent to a
        single or multiple destinations. One or more gateways need to be configured before using the
        service. An SMS will not be sent if there is no gateway configured.  It needs a set of
        recipients and message text in JSON format as shown below. </para>
      <screen>/api/26/sms/outbound</screen>
      <screen>{ 
  &quot;message&quot;:&quot;Sms Text&quot;,  
  &quot;recipients&quot;: [
    &quot;47XXXXXX1&quot;,
    &quot;47XXXXXX2&quot;
  ] 
}</screen>
      <para>The Web API also supports a query parameter version, but the parameterized API can only
        be used for sending SMS to a single destination. </para>
      <screen>/api/26/sms/outbound?message=text&amp;recipient=47XXXXXX</screen>
      <section>
        <title>Gateway response codes</title>
        <para>Gateway may response with following response codes.</para>
        <table frame="all">
          <title>Gateway response codes</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1.01*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="5.52*"/>
            <thead>
              <row>
                <entry>Response code</entry>
                <entry>Response Message</entry>
                <entry>Detail Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>RESULT_CODE_0</entry>
                <entry>success</entry>
                <entry>Message has been sent successfully</entry>
              </row>
              <row>
                <entry>RESULT_CODE_1</entry>
                <entry>scheduled</entry>
                <entry>Message has been scheduled successfully</entry>
              </row>
              <row>
                <entry>RESULT_CODE_22</entry>
                <entry>internal fatal error</entry>
                <entry>Internal fatal error</entry>
              </row>
              <row>
                <entry>RESULT_CODE_23</entry>
                <entry>authentication failure</entry>
                <entry>Authentication credentials are incorrect</entry>
              </row>
              <row>
                <entry>RESULT_CODE_24</entry>
                <entry>data validation failed</entry>
                <entry>Parameters provided in request are incorrect</entry>
              </row>
              <row>
                <entry>RESULT_CODE_25</entry>
                <entry>insufficient credits</entry>
                <entry>Credit is not enough to send message</entry>
              </row>
              <row>
                <entry>RESULT_CODE_26</entry>
                <entry>upstream credits not available</entry>
                <entry>Upstream credits not available</entry>
              </row>
              <row>
                <entry>RESULT_CODE_27</entry>
                <entry>exceeded your daily quota</entry>
                <entry>You have exceeded your daily quota</entry>
              </row>
              <row>
                <entry>RESULT_CODE_40</entry>
                <entry>temporarily unavailable</entry>
                <entry>Service is temporarily down</entry>
              </row>
              <row>
                <entry>RESULT_CODE_201</entry>
                <entry>maximum batch size exceeded</entry>
                <entry>Maximum batch size exceeded</entry>
              </row>
              <row>
                <entry>RESULT_CODE_200</entry>
                <entry>success</entry>
                <entry>The request was successfully completed</entry>
              </row>
              <row>
                <entry>RESULT_CODE_202</entry>
                <entry>accepted</entry>
                <entry>The message(s) will be processed</entry>
              </row>
              <row>
                <entry>RESULT_CODE_207</entry>
                <entry>multi-status</entry>
                <entry>More than one message was submitted to the API; however, not all messages
                  have the same status</entry>
              </row>
              <row>
                <entry>RESULT_CODE_400</entry>
                <entry>bad request</entry>
                <entry>Validation failure (such as missing/invalid parameters or headers)</entry>
              </row>
              <row>
                <entry>RESULT_CODE_401</entry>
                <entry>unauthorized</entry>
                <entry>Authentication failure. This can also be caused by IP lockdown
                  settings</entry>
              </row>
              <row>
                <entry>RESULT_CODE_402</entry>
                <entry>payment required</entry>
                <entry>Not enough credit to send message</entry>
              </row>
              <row>
                <entry>RESULT_CODE_404</entry>
                <entry>not found</entry>
                <entry>Resource does not exist</entry>
              </row>
              <row>
                <entry>RESULT_CODE_405</entry>
                <entry>method not allowed</entry>
                <entry>Http method is not support on the resource</entry>
              </row>
              <row>
                <entry>RESULT_CODE_410</entry>
                <entry>gone</entry>
                <entry>Mobile number is blocked</entry>
              </row>
              <row>
                <entry>RESULT_CODE_429</entry>
                <entry>too many requests</entry>
                <entry>Generic rate limiting error</entry>
              </row>
              <row>
                <entry>RESULT_CODE_503</entry>
                <entry>service unavailable</entry>
                <entry>A temporary error has occurred on our platform - please retry</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
    <section>
      <title>Inbound SMS service</title>
      <para>The Web API supports collecting incoming SMS messages using the
        POST method. Incoming messages routed towards the DHIS2 Web API can be received using this
        API. The API collects inbound SMS messages and provides it to  listeners for parsing, based
        on the SMS content (SMS Command). An example payload in JSON format is given below. Text,
        originator, received date and sent date are mandatory parameters. The rest are optional but
        the system will use the default value for these parameters.</para>
      <screen>/api/26/sms/inbound</screen>
      <screen>{
  &quot;text&quot;: &quot;sample text&quot;,
  &quot;originator&quot;: &quot;47XXXXXXXX&quot;,
  &quot;gatewayid&quot;: &quot;unknown&quot;,
  &quot;receiveddate&quot;: &quot;2016-05-01&quot;,
  &quot;sentdate&quot;:&quot;2016-05-01&quot;,
  &quot;smsencoding&quot;: &quot;1&quot;,
  &quot;smsstatus&quot;:&quot;1&quot;          
}</screen>
      <para>The Web API also supports a query parameter-based version.</para>
      <screen>/api/26/sms/inbound?message=text&amp;originator=47XXXXXX&amp;gateway=clickatel</screen>
      <table frame="all">
        <title>User query parameters</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1.01*"/>
          <colspec colnum="2" colname="newCol2" colwidth="1*"/>
          <colspec colnum="3" colname="c2" colwidth="5.52*"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Type</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>message</entry>
              <entry>String</entry>
              <entry>This is mandatory parameter which carries the actual text message.</entry>
            </row>
            <row>
              <entry>originator</entry>
              <entry>String</entry>
              <entry>This is mandatory parameter which shows by whom this message was actually sent
                from.</entry>
            </row>
            <row>
              <entry>gateway</entry>
              <entry>String</entry>
              <entry>This is an optional parameter which gives gateway id. If not present default
                text &quot;UNKNOWN&quot; will be stored</entry>
            </row>
            <row>
              <entry>receiveTime</entry>
              <entry>Date</entry>
              <entry>This is an optional parameter. It is timestamp at which message was received at
                the gateway.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Gateway service administration</title>
      <para>The Web API exposes resources which provide a way to configure and update SMS gateway
        configurations.</para>
      <para>The list of different gateways configured can be retrieved using a GET method.</para>
      <screen>GET /api/26/sms/gateways</screen>
      <para>Configurations can also be retrieved for a specific gateway type using GET
        method.</para>
      <screen>GET /api/26/sms/gateways/{uid}</screen>
      <para>Configurations can be removed for specific gateway type using DELETE method.</para>
      <screen>DELETE /api/26/sms/gateways/{uid}</screen>
      <para>Default gateway can be retrieved with the GET method.</para>
      <screen>GET /api/26/sms/gateways/default</screen>
      <para>Default gateway can be set using the PUT method.</para>
      <screen>PUT /api/26/sms/gateways/default/{uid}</screen>
    </section>
    <section>
      <title>Gateway configuration</title>
      <para>The Web API lets you create and update gateway configurations. For each type of gateway
        there are different parameters in the JSON payload. Sample JSON payloads for each gateway
        are given below. POST is used to create and PUT to update configurations. </para>
      <para><emphasis role="italic">Clickatell</emphasis></para>
      <screen>{
  &quot;name&quot; : &quot;clickatell&quot;,
  &quot;username&quot;: &quot;clickatelluser&quot;,
  &quot;password&quot;: &quot;abc123&quot;,
  &quot;Auth-token&quot;: &quot;XXXXXXXXXXXXXXXXXXXX&quot;,
}</screen>
      <para><emphasis role="italic">Bulksms</emphasis></para>
      <screen>{ 
  &quot;name&quot;: &quot;bulkSMS&quot;,
  &quot;username&quot;: &quot;bulkuser&quot;,
  &quot;password&quot;: &quot;abc123&quot;,
}</screen>
      <para><emphasis role="italic">GenericHttp</emphasis></para>
      <screen>{
  &quot;name&quot; : &quot;generic&quot;,
  &quot;messageParameter&quot;: &quot;message&quot;,
  &quot;recipientParameter&quot;: &quot;msisdn&quot;,
  &quot;urlTemplate&quot;: &quot;http://localhost:template&quot;,
  &quot;parameters&quot;: [
    {
      &quot;key&quot;: &quot;username&quot;,
      &quot;value&quot;: &quot;user12&quot;
      &quot;classified&quot;: &quot;false&quot;
    },
    {
      &quot;key&quot;: &quot;password&quot;,
      &quot;value&quot;: &quot;XXX&quot;
      &quot;classified&quot;: &quot;true&quot;
    }
  ]
}</screen>

  <para>HTTP.OK will be returned if configurations are saved successfully. In all other cases HTTP.ERROR will be retured.</para>
      <para>The various gateway configurations can be instantiated using the endpoints listed
        below.</para>
      <table frame="all">
        <title>Gateway api end points</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1.01*"/>
          <colspec colnum="2" colname="newCol2" colwidth="1*"/>
          <colspec colnum="3" colname="c2" colwidth="5.52*"/>
          <thead>
            <row>
              <entry>Gatway Type</entry>
              <entry>Method</entry>
              <entry>API End Points</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Clickatell</entry>
              <entry>POST/PUT</entry>
              <entry>/api/sms/gateways/clickatell</entry>
            </row>
            <row>
              <entry>Bulksms</entry>
              <entry>POST/PUT</entry>
              <entry>/api/sms/gateways/bulksms</entry>
            </row>
            <row>
              <entry>Generichttp</entry>
              <entry>POST/PUT</entry>
              <entry>/api/sms/gateways/generichttp</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section xml:id="webapi_sms_commands">
    <title>SMS Commands</title>
    <para>SMSCommands are being used to collect data through SMS. These commands belong to specific
      Parser Type. Each parser has different functionality.</para>
    <section>
      <title>API End Points</title>
      <para>The list of commands can be retrieved using GET.</para>
      <screen>GET /api/26/sms/commands</screen>
      <para>One particular command can also be retreived using GET. Where parameter <emphasis
        role="italic">type</emphasis> can be one of the below mentioned parsers. In this type of query, command will be retreived with all its parameters attached to it. For example "birth A=1,B=2,G=Male". Birth is the name
      of SMS command and A,B and G are parameters attached to this SMS command. Query result will also contain information about what these parameters are and which DataElement they belong to. These parameters are given short codes inorder to fit them in 160 characters SMS length.</para>
      <screen>GET /api/26/sms/commands/{commandName}?type=EVENT_REGISTRATION_PARSER</screen>
      <itemizedlist>
        <listitem>
          <para>KEY_VALUE_PARSER</para>
        </listitem>
        <listitem>
          <para>J2ME_PARSER</para>
        </listitem>
        <listitem>
          <para>ALERT_PARSER</para>
        </listitem>
        <listitem>
          <para>UNREGISTERED_PARSER</para>
        </listitem>
        <listitem>
          <para>TRACKED_ENTITY_REGISTRATION_PARSER</para>
        </listitem>
        <listitem>
          <para>PROGRAM_STAGE_DATAENTRY_PARSER</para>
        </listitem>
        <listitem>
          <para>EVENT_REGISTRATION_PARSER</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section xml:id="webapi_program_messages">
    <title>Program Messages</title>
    <para>Program message lets you send messages to tracked entity instances, contact addresses
      assiociated with organisation units, phone numbers and email addresses. You can send messages
      through the <emphasis>messages</emphasis> resource.<screen>/api/26/messages</screen></para>
    <section>
      <title>Sending program messages</title>
      <para>Program messages can be sent using two delivery channels:<itemizedlist>
          <listitem>
            <para>SMS (SMS)</para>
          </listitem>
          <listitem>
            <para>Email address (EMAIL)</para>
          </listitem>
        </itemizedlist></para>
      <para>Program messages can be sent to various recipients:</para>
      <para> <itemizedlist>
        <listitem>
          <para>Tracked entity instance: The system will look up attributes of value type
              PHONE_NUMBER or EMAIL (depending on the specified delivery channels) and use the
              corresponding attribute values.</para>
        </listitem>
        <listitem>
          <para>Organisation unit: The system will use the phone number or email information
              registered for the organisation unit.</para>
        </listitem>
        <listitem>
          <para>List of phone numbers: The system will use the explicitly defined phone
              numbers.</para>
        </listitem>
        <listitem>
          <para>List of email addresses: The system will use the explicitly defined email
              addresses.</para>
        </listitem>
      </itemizedlist></para>
      
      <para>Below is a sample JSON payload for sending messages using POST requests. Note that
        message resource accepts a wrapper object named <emphasis>programMessages</emphasis> which
        can contain any number of program messages.</para>
      <screen>POST /api/26/messages</screen>
      <screen>{
    "programMessages": [{
        "recipients": {
            "trackedEntityInstance": {
                "id": "UN810PwyVYO"
            },
            "organisationUnit": {
                "id": "Rp268JB6Ne4"
            },
            "phoneNumbers": [
                "55512345",
                "55545678"
            ],
            "emailAddresses": [
                "johndoe@mail.com",
                "markdoe@mail.com"
            ]
        },
        "programInstance": {
            "id": "f3rg8gFag8j"
        },
        "programStageInstance": {
            "id": "pSllsjpfLH2"
        },
        "deliveryChannels": [
            "SMS", "EMAIL"
        ],
        "subject": "Outbreak alert",
        "text": "An outbreak has been detected",
        "storeCopy": false
    }]
}</screen>
      <para>The fields are explained in the following table.<table frame="all">
          <title>Program message payload</title>
          <tgroup cols="4">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="newCol2" colnum="2" colwidth="1*"/>
            <colspec colname="c2" colnum="3" colwidth="1.45*"/>
            <colspec colname="c3" colnum="4" colwidth="1.22*"/>
            <thead>
              <row>
                <entry>Field</entry>
                <entry>Required</entry>
                <entry>Description</entry>
                <entry>Values</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>recipients</entry>
                <entry>Yes</entry>
                <entry>Recipients of the program message. At least one recipient must be specified.
                  Any number of recipients / types can be specified for a message.</entry>
                <entry>Can be trackedEntityInstance, organisationUnit, an array of phoneNumbers or
                  an array of emailAddresses.</entry>
              </row>
              <row>
                <entry>programInstance</entry>
                <entry>Either this or programStageInstance required</entry>
                <entry>The program instance / enrollment.</entry>
                <entry>Enrollment ID.</entry>
              </row>
              <row>
                <entry>programStageInstance</entry>
                <entry>Either this or programInstance required</entry>
                <entry>The program stage instance / event.</entry>
                <entry>Event ID.</entry>
              </row>
              <row>
                <entry>deliveryChannels</entry>
                <entry>Yes</entry>
                <entry>Array of delivery channels.</entry>
                <entry>SMS | EMAIL</entry>
              </row>
              <row>
                <entry>subject</entry>
                <entry>No</entry>
                <entry>The message subject. Not applicable for SMS delivery channel.</entry>
                <entry>Text.</entry>
              </row>
              <row>
                <entry>text</entry>
                <entry>Yes</entry>
                <entry>The message text.</entry>
                <entry>Text.</entry>
              </row>
              <row>
                <entry>storeCopy</entry>
                <entry>No</entry>
                <entry>Whether to store a copy of the program message in DHIS 2.</entry>
                <entry>false (default) | true</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para>A minimalistic example for sending a message over SMS to a tracked entity instance looks
        like
        this:<screen>curl -d @message.json "https://play.dhis2.org/demo/api/26/messages" 
  -H "Content-Type:application/json" -u admin:district -v</screen><screen>{
    "programMessages": [{
        "recipients": {
            "trackedEntityInstance": {
                "id": "PQfMcpmXeFE"
            }
        },
        "programInstance": {
            "id": "JMgRZyeLWOo"
        },
        "deliveryChannels": [
            "SMS"
        ],
        "text": "Please make a visit on Thursday"
    }]
}</screen></para>
    </section>

    <section>
      <title>Retrieving and deleting program messages</title>
      <para>The list of messages can be retrieved using GET.</para>
      <screen>GET /api/26/messages</screen>
      <para>One particular message can also be retreived using GET.</para>
      <screen>GET /api/26/messages/{uid}</screen>
      <para>Message can be deleted using DELETE.</para>
      <screen>DELETE /api/26/messages/{uid}</screen>
    </section>
    <section>
      <title>Querying program messages</title>
      <para>The program message API supports program message queries based on request
        parameters. Messages can be filtered based on below mentioned query parameters. All requests should
        use the GET HTTP verb for retreiving information. <table frame="all">
          <title>Query program messages API</title>
          <tgroup cols="2">
            <colspec colname="parameter" colnum="1" colwidth="1.0*"/>
            <colspec colname="url" colnum="2" colwidth="3.0*"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>URL</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>programInstance</entry>
                <entry>/api/26/messages?programInstance=6yWDMa0LP7</entry>
              </row>
              <row>
                <entry>programStageInstance</entry>
                <entry>/api/26/messages?programStageInstance=SllsjpfLH2</entry>
              </row>
              <row>
                <entry>trackedEntityInstance</entry>
                <entry>/api/26/messages?trackedEntityInstance=xdfejpfLH2</entry>
              </row>
              <row>
                <entry>organisationUnit</entry>
                <entry>/api/26/messages?ou=Sllsjdhoe3</entry>
              </row>
              <row>
                <entry>processedDate</entry>
                <entry>/api/26/messages?processedDate=2016-02-01</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </section>
  </section>
  <section xml:id="webapi_users">
    <title>Users</title>
    <para>This section covers the user resource methods.<screen>/api/26/users</screen></para>
    <section>
      <title>User query</title>
      <para>The <emphasis role="italic">users</emphasis> resource offers additional query parameters
        beyond the standard parameters (e.g. paging). To query for users at the users resource you
        can use the following parameters.</para>
      <para>
        <table frame="all">
          <title>User query parameters</title>
          <tgroup cols="3">
            <colspec colnum="1" colname="c1" colwidth="1.01*"/>
            <colspec colnum="2" colname="newCol2" colwidth="1*"/>
            <colspec colnum="3" colname="c2" colwidth="3.57*"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Type</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>query</entry>
                <entry>Text</entry>
                <entry>Query value for first name, surname, username and email, case
                  in-sensitive.</entry>
              </row>
              <row>
                <entry>phoneNumber</entry>
                <entry>Text</entry>
                <entry>Query for phone number.</entry>
              </row>
              <row>
                <entry>canManage</entry>
                <entry>false | true</entry>
                <entry>Filter on whether the current user can manage the returned users through the
                  managed user group relationships.</entry>
              </row>
              <row>
                <entry>authSubset</entry>
                <entry>false | true</entry>
                <entry>Filter on whether the returned users have a subset of the authorities of the
                  current user.</entry>
              </row>
              <row>
                <entry>lastLogin</entry>
                <entry>Date</entry>
                <entry>Filter on users who have logged in later than the given date.</entry>
              </row>
              <row>
                <entry>inactiveMonths</entry>
                <entry>Number</entry>
                <entry>Filter on users who have not logged in for the given number of
                  months.</entry>
              </row>
              <row>
                <entry>inactiveSince</entry>
                <entry>Date</entry>
                <entry>Filter on users who have not logged in later than the given date.</entry>
              </row>
              <row>
                <entry>selfRegistered</entry>
                <entry>false | true</entry>
                <entry>Filter on users who have self-registered their user account.</entry>
              </row>
              <row>
                <entry>invitationStatus</entry>
                <entry>none | all | expired</entry>
                <entry>Filter on user invitations, including all or expired invitations.</entry>
              </row>
              <row>
                <entry>ou</entry>
                <entry>Identifier</entry>
                <entry>Filter on users who are associated with the organisation unit with the given
                  identifier.</entry>
              </row>
              <row>
                <entry>page</entry>
                <entry>Number</entry>
                <entry>The page number.</entry>
              </row>
              <row>
                <entry>pageSize</entry>
                <entry>Number</entry>
                <entry>The page size.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </para>
      <para>A query for max 10 users with &quot;konan&quot; as first name or surname (case
        in-sensitive) who have a subset of authorities compared to the current user:</para>
      <screen>/api/26/users?query=konan&amp;authSubset=true&amp;pageSize=10</screen>
    </section>
    <section>
      <title>User credentials query</title>
      <para>An alternative to the previous user query, is to directly query the user credentials
        (the part where username, etc resides) using <emphasis role="italic"
          >/api/userCredentials</emphasis> endpoint, it supports all regular field and object
        filters as the other endpoints.</para>
      <para>Get user credentials where username is
        admin:<screen>/api/26/userCredentials?filter=username:eq:admin</screen></para>
      <para>Get username and code from all user credentials where username starts with <emphasis
          role="italic">adm</emphasis>:</para>
      <screen>/api/26/userCredentials?fields=username,code&amp;filter=username:^like:adm</screen>
    </section>
    <section>
      <title>User account create and update</title>
      <para>Both creating and updating a user is supported through the web-api. The payload itself
        is similar to other payloads in the web-api, so they support collection references etc. A
        simple example payload to create would be, the password should be sent in plain text
        (remember to only use this on a SSL enabled server) and will be encrypted on the
        backend:<screen>{
  &quot;firstName&quot;: &quot;John&quot;,
  &quot;surname&quot;: &quot;Doe&quot;,
  &quot;email&quot;: &quot;johndoe@mail.com&quot;,
  &quot;userCredentials&quot;: {
    &quot;username&quot;: &quot;johndoe&quot;,
    &quot;password&quot;: &quot;your-password-123&quot;,
    &quot;userRoles&quot;: [ {
      &quot;id&quot;: &quot;Euq3XfEIEbx&quot;
    } ]
  },
  &quot;organisationUnits&quot;: [ {
    &quot;id&quot;: &quot;ImspTQPwCqd&quot;
  } ],
  &quot;userGroups&quot;: [ {
    &quot;id&quot;: &quot;vAvEltyXGbD&quot;
  } ]
}</screen></para>
      <screen>curl -X POST -u user:pass -d @u.json -H &quot;Content-Type: application/json&quot; http://server/api/26/users</screen>
      <para>After the user is created, a <emphasis role="italic">Location</emphasis> header is sent
        back with the newly generated ID (you can also provide your own using /api/system/id
        endpoint). The same payload can then be used to do updates, but remember to then use
          <emphasis role="bold">PUT</emphasis> instead of <emphasis role="bold">POST</emphasis> and
        the endpoint is now <emphasis role="italic"
        >/api/users/ID</emphasis>.<screen>curl -X PUT -u user:pass -d @u.json -H &quot;Content-Type: application/json&quot; http://server/api/26/users/ID</screen></para>
      <para>For more info about the full payload available, please see <emphasis role="italic"
          >/api/schemas/user</emphasis></para>
    </section>
    <section>
      <title>User account invitations</title>
      <para>The Web API supports inviting people to create user accounts through the <emphasis
          role="italic">invite</emphasis> resource. To create an invitation you should POST a user
        in XML or JSON format to the invite resource. A specific username can be forced by defining
        the username in the posted entity. By omitting the username, the person will be able to
        specify it herself. The system will send out an invitation through email. This requires that
        email settings have been properly configured. The invite resource is useful in order to
        securely allow people to create accounts without anyone else knowing the password or by
        transferring the password in plain text. The payload to use for the invite is the same as
        for creating users. An example payload in JSON looks like this:</para>
      <screen>{
  &quot;firstName&quot;: &quot;John&quot;,
  &quot;surname&quot;: &quot;Doe&quot;,
  &quot;email&quot;: &quot;johndoe@mail.com&quot;,
  &quot;userCredentials&quot;: {
    &quot;username&quot;: &quot;johndoe&quot;,
    &quot;userRoles&quot;: [ {
      &quot;id&quot;: &quot;Euq3XfEIEbx&quot;
    } ]
  },
  &quot;organisationUnits&quot;: [ {
    &quot;id&quot;: &quot;ImspTQPwCqd&quot;
  } ],
  &quot;userGroups&quot;: [ {
    &quot;id&quot;: &quot;vAvEltyXGbD&quot;
  } ]
}</screen>
      <para>The user invite entity can be posted like this:</para>
      <screen>curl -d @invite.json &quot;localhost/api/26/users/invite&quot; -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
      <para>To send out invites for multiple users at the same time you must use a slightly
        different format. For
        JSON:<screen>{
  &quot;users&quot;: [ {
    &quot;firstName&quot;: &quot;John&quot;,
    &quot;surname&quot;: &quot;Doe&quot;,
    &quot;email&quot;: &quot;johndoe@mail.com&quot;,
    &quot;userCredentials&quot;: {
      &quot;username&quot;: &quot;johndoe&quot;,
      &quot;userRoles&quot;: [ {
        &quot;id&quot;: &quot;Euq3XfEIEbx&quot;
      } ]
    },
    &quot;organisationUnits&quot;: [ {
      &quot;id&quot;: &quot;ImspTQPwCqd&quot;
      } ]
    }, {
    &quot;firstName&quot;: &quot;Tom&quot;,
    &quot;surname&quot;: &quot;Johnson&quot;,
    &quot;email&quot;: &quot;tomj@mail.com&quot;,
    &quot;userCredentials&quot;: {
      &quot;userRoles&quot;: [ {
        &quot;id&quot;: &quot;Euq3XfEIEbx&quot;
      } ]
    },
    &quot;organisationUnits&quot;: [ {
      &quot;id&quot;: &quot;ImspTQPwCqd&quot;
      } ]
    }
  ]
}</screen></para>
      <para>To create multiple invites you can post the payload to the api/users/invites resource
        like this:</para>
      <screen>curl -d @invites.json &quot;localhost/api/26/users/invites&quot; -H &quot;Content-Type:application/json&quot;
  -u admin:district</screen>
      <para>There are certain requirements for user account invitations to be sent out:<itemizedlist>
          <listitem>
            <para>Email SMTP server must be configured properly on the server.</para>
          </listitem>
          <listitem>
            <para>The user to be invited must have specified a valid email.</para>
          </listitem>
          <listitem>
            <para>The user to be invited must not be granted user roles with critical authorities
              (see below).</para>
          </listitem>
          <listitem>
            <para>If username is specified it must not be already taken by another existing
              user.</para>
          </listitem>
        </itemizedlist>If any of these requirements are not met the invite resource will return with
        a <emphasis role="italic">409 Conflict</emphasis> status code together with a descriptive
        message. </para>
      <para>The critical authorities which cannot be granted with invites include:<itemizedlist>
          <listitem>
            <para>ALL</para>
          </listitem>
          <listitem>
            <para>Scheduling administration</para>
          </listitem>
          <listitem>
            <para>Set system settings</para>
          </listitem>
          <listitem>
            <para>Add, update, delete and list user roles</para>
          </listitem>
          <listitem>
            <para>Add, update, delete and view SQL views</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>User replication</title>
      <para>To replicate a user you can use the <emphasis role="italic">replica</emphasis> resource.
        Replicating a user can be useful when debugging or reproducing issues reported by a
        particular user. You need to provide a new username and password for the replicated user
        which you will use to authenticate later. Note that you need the ALL authority to perform
        this action. To replicate a user you can post a JSON payload looking like below:</para>
      <screen>{
  &quot;username&quot;: &quot;replica&quot;,
  &quot;password&quot;: &quot;Replica.1234&quot;
}</screen>
      <para>This payload can be posted to the replica resource, where you provide the identifier of
        the user to replicate in the URL:</para>
      <screen>/api/26/users/&lt;uid&gt;/replica</screen>
      <para>An example of replicating a user using curl looks like this:</para>
      <screen>curl -d @replica.json &quot;localhost/api/26/users/N3PZBUlN8vq/replica&quot; 
  -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
    </section>
  </section>
  <section xml:id="webapi_current_user_information">
    <title>Current user information and associations</title>
    <para>In order to get information about the currently authenticated user and its associations to
      other resources you can work with the <emphasis role="italic">me</emphasis> resource (you can
      also refer to it by its old name <emphasis role="italic">currentUser</emphasis>). The current
      user related resources gives your information which is useful when building clients for
      instance for data entry and user management. The following describes these resources and their
      purpose.</para>
    <para>Provides basic information about the user that you are currently logged in as, including
      username, user credentials, assigned organisation units:</para>
    <screen>/api/me</screen>
    <para>Gives information about currently unread messages and interpretations:</para>
    <screen>/api/me/dashboard</screen>
    <para>Lists all messages and interpretations in the inbox (including replies):</para>
    <screen>/api/me/inbox</screen>
    <para>Gives the full profile information for current user. This endpoint support both <emphasis
        role="italic">GET</emphasis> to retrieve profile and <emphasis role="italic">POST</emphasis>
      to update profile (the exact same format is used):</para>
    <screen>/api/me/user-account</screen>
    <para>Returns the set of authorities granted to the current user:</para>
    <screen>/api/me/authorization</screen>
    <para>Returns true or false, indicating whether the current user has been granted the given
      &lt;auth&gt; authorization:</para>
    <screen>/api/me/authorization/&lt;auth&gt;</screen>
    <para>Lists all organisation units directly assigned to the user:</para>
    <screen>/api/me/organisationUnits</screen>
    <para>Gives all the datasets assigned to the users organisation units, and their direct
      children. This endpoint contains all required information to build a form based on one of our
      datasets. If you want all descendants of your assigned organisation units, you can use the
      query parameter <emphasis role="italic">includeDescendants=true</emphasis> :</para>
    <screen>/api/me/dataSets</screen>
    <para>Gives all the programs assigned to the users organisation units, and their direct
      children. This endpoint contains all required information to build a form based on one of our
      datasets. If you want all descendants of your assigned organisation units, you can use the
      query parameter <emphasis role="italic">includeDescendants=true</emphasis> :</para>
    <screen>/api/me/programs</screen>
    <para>Gives the data approval levels which are relenvant to the current user:</para>
    <screen>/api/me/dataApprovalLevels</screen>
  </section>
  <section xml:id="webapi_system_settings">
    <title>System settings</title>
    <para>You can manipulate system settings by interacting with the <emphasis role="italic"
        >systemSettings</emphasis> resource. A system setting is a simple key-value pair, where both
      the key and the value are plain text strings. To save or update a system setting you can make
      a <emphasis role="italic">POST</emphasis> request to the following URL:</para>
    <screen>/api/26/systemSettings/my-key?value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to &quot;text/plain&quot;. As an example, you can use curl like this:</para>
    <screen>curl &quot;play.dhis2.org/demo/api/26/systemSettings/my-key&quot; -d &quot;My long value&quot; 
  -H &quot;Content-Type: text/plain&quot; -u admin:district -v</screen>
    <para>To set system settings in bulk you can send a JSON object with a property and value for
      each system setting key-value pair using a POST request:</para>
    <screen>{
  &quot;keyApplicationNotification&quot;: &quot;Welcome&quot;,
  &quot;keyApplicationIntro&quot;: &quot;DHIS2&quot;,
  &quot;keyApplicationFooter&quot;: &quot;Read more at dhis2.org&quot;
}  </screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/26/systemSettings/my-key</screen>
    <para>Alternatively, you can specify the key as a query parameter:</para>
    <screen>/api/26/systemSettings?key=my-key</screen>
    <para>You can retrieve specific system settings as JSON by repeating the key query
      parameter:</para>
    <screen>curl &quot;play.dhis2.org/demo/api/26/systemSettings?key=keyApplicationNotification&amp;key=keyApplicationIntro&quot; 
  -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen>
    <para>You can retrieve all system settings with a GET request:</para>
    <screen>/api/26/systemSettings</screen>
    <para>To delete a system setting, you can make a <emphasis role="italic">DELETE</emphasis>
      request to the URL similar to the one used above for retrieval.</para>
    <para>The available system settings are listed below.<table frame="all">
        <title>System settings</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c3" colnum="2" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>keyMessageEmailNotification</entry>
              <entry>Send email notification for messages</entry>
            </row>
            <row>
              <entry>keyMessageSmsNotification</entry>
              <entry>Send sms notification for messages</entry>
            </row>
            <row>
              <entry>keyUiLocale</entry>
              <entry>Locale for the user interface</entry>
            </row>
            <row>
              <entry>keyDbLocale</entry>
              <entry>Locale for the database</entry>
            </row>
            <row>
              <entry>keyAnalysisDisplayProperty</entry>
              <entry>The property to display in analysis. Default: "name"</entry>
            </row>
            <row>
              <entry>keyCurrentDomainType</entry>
              <entry>Not yet in use</entry>
            </row>
            <row>
              <entry>keyAutoSaveCaseEntryForm</entry>
              <entry>Autosave case entry forms</entry>
            </row>
            <row>
              <entry>keyAutoSaveDataEntryForm</entry>
              <entry>Autosave data entry forms</entry>
            </row>
            <row>
              <entry>keyTrackerDashboardLayout</entry>
              <entry>Used by tracker capture</entry>
            </row>
            <row>
              <entry>keyAutoSavetTrackedEntityForm</entry>
              <entry>Autosave tracked entity forms</entry>
            </row>
            <row>
              <entry>applicationTitle</entry>
              <entry>The application title. Default: "DHIS2"</entry>
            </row>
            <row>
              <entry>keyApplicationIntro</entry>
              <entry>The application introduction</entry>
            </row>
            <row>
              <entry>keyApplicationNotification</entry>
              <entry>Application notification</entry>
            </row>
            <row>
              <entry>keyApplicationFooter</entry>
              <entry>Application left footer</entry>
            </row>
            <row>
              <entry>keyApplicationRightFooter</entry>
              <entry>Application right footer</entry>
            </row>
            <row>
              <entry>keyFlag</entry>
              <entry>Application flag</entry>
            </row>
            <row>
              <entry>keyFlagImage</entry>
              <entry>Flag used in dashboard menu</entry>
            </row>
            <row>
              <entry>startModule</entry>
              <entry>The startpage of the application. Default:
                "dhis-web-dashboard-integration"</entry>
            </row>
            <row>
              <entry>factorDeviation</entry>
              <entry>Data analysis standard deviation factor. Default: "2d"</entry>
            </row>
            <row>
              <entry>keyEmailHostName</entry>
              <entry>Email server hostname</entry>
            </row>
            <row>
              <entry>keyEmailPort</entry>
              <entry>Email server port</entry>
            </row>
            <row>
              <entry>keyEmailTls</entry>
              <entry>Use TLS. Default: "true"</entry>
            </row>
            <row>
              <entry>keyEmailSender</entry>
              <entry>Email sender</entry>
            </row>
            <row>
              <entry>keyEmailUsername</entry>
              <entry>Email server username</entry>
            </row>
            <row>
              <entry>keyEmailPassword</entry>
              <entry>Email server password</entry>
            </row>
            <row>
              <entry>keyInstanceBaseUrl</entry>
              <entry>The base url of the application instance</entry>
            </row>
            <row>
              <entry>keySmsConfig</entry>
              <entry>SMS configuration</entry>
            </row>
            <row>
              <entry>keyCacheStrategy</entry>
              <entry>Cache strategy. Default: "CACHE_6AM_TOMORROW"</entry>
            </row>
            <row>
              <entry>phoneNumberAreaCode</entry>
              <entry>Phonenumber area code</entry>
            </row>
            <row>
              <entry>multiOrganisationUnitForms</entry>
              <entry>Enable multi-organisation unit forms. Default: "false"</entry>
            </row>
            <row>
              <entry>keyAccountRecovery</entry>
              <entry>Enable user account recovery. Default: "false"</entry>
            </row>
            <row>
              <entry>googleAnalyticsUA</entry>
              <entry>Google Analytic UA key for tracking site-usage</entry>
            </row>
            <row>
              <entry>credentialsExpires</entry>
              <entry>Require user account password change. Default: "0" (Never)</entry>
            </row>
            <row>
              <entry>keySelfRegistrationNoRecaptcha</entry>
              <entry>Do not require recaptcha for self registration. Default: "false"</entry>
            </row>
            <row>
              <entry>keyOpenIdProvider</entry>
              <entry>OpenID provider</entry>
            </row>
            <row>
              <entry>keyCanGrantOwnUserAuthorityGroups</entry>
              <entry>Allow users to grant own user roles. Default: "false"</entry>
            </row>
            <row>
              <entry>keyHideUnapprovedDataInAnalytics</entry>
              <entry>Hide unapproved data in analytics. Default: "false"</entry>
            </row>
            <row>
              <entry>keyAnalyticsMaxLimit</entry>
              <entry>Maximum number of analytics recors. Default: "50000"</entry>
            </row>
            <row>
              <entry>keyAnalyticsMaintenanceMode</entry>
              <entry>Put analytics in maintenance mode. Default: "false"</entry>
            </row>
            <row>
              <entry>keyDatabaseServerCpus</entry>
              <entry>Number of database server CPUs. Default: "0" (Automatic)</entry>
            </row>
            <row>
              <entry>helpPageLink</entry>
              <entry>Link to help page.
                <?oxy_comment_start author="cecilia" timestamp="20160704T120524+0200" comment="Before release: Veirfy that link works."?>Default<?oxy_comment_end?>:
                  "<link xmlns:xlink="http://www.w3.org/1999/xlink"
                  xlink:href="http://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html"
                  >https://dhis2.github.io/dhis2-docs/master/en/user/html/dhis2_user_manual_en.html</link></entry>
            </row>
            <row>
              <entry>keyAcceptanceRequiredForApproval</entry>
              <entry>Acceptance required before approval. Default: "false"</entry>
            </row>
            <row>
              <entry>keySystemNotificationsEmail</entry>
              <entry>Where to email system notifications</entry>
            </row>
            <row>
              <entry>keyAnalysisRelativePeriod</entry>
              <entry>Default relative period for analysis. Default: "LAST_12_MONTHS"</entry>
            </row>
            <row>
              <entry>keyRequireAddToView</entry>
              <entry>Require authority to add to view object lists. Default: "false"</entry>
            </row>
            <row>
              <entry>keyAllowObjectAssignment</entry>
              <entry>Allow assigning object to related objects during add or update. Default:
                "false"</entry>
            </row>
            <row>
              <entry>keyUseCustomLogoFront</entry>
              <entry>Enables the usage of a custom logo on the frontpage. Default: "false"</entry>
            </row>
            <row>
              <entry>keyUseCustomLogoBanner</entry>
              <entry>Enables the usage of a custom banner on the website. Default: "false"</entry>
            </row>
            <row>
              <entry>keyDataImportStrictPeriods</entry>
              <entry>Require periods to match period type of data set. Default: "false"</entry>
            </row>
            <row>
              <entry>keyDataImportStrictCategoryOptionCombos</entry>
              <entry>Require category option combos to match category combo of data element.
                Default: "false"</entry>
            </row>
            <row>
              <entry>keyDataImportStrictOrganisationUnits</entry>
              <entry>Require organisation units to match assignment of data set. Default:
                "false"</entry>
            </row>
            <row>
              <entry>keyDataImportStrictAttributeOptionsCombos</entry>
              <entry>Require attribute option combis to match category combo of data set. Default:
                "false"</entry>
            </row>
            <row>
              <entry>keyDataImportRequireCategoryOptionCombo</entry>
              <entry>Require category option combo to be specified. Default: "false"</entry>
            </row>
            <row>
              <entry>keyDataImportRequireAttributeOptionCombo</entry>
              <entry>Require attribute option combo to be specified. Default: "false"</entry>
            </row>
            <row>
              <entry>keyCustomJs</entry>
              <entry>Custom JavaScript to be used on the website</entry>
            </row>
            <row>
              <entry>keyCustomCss</entry>
              <entry>Custom CSS to be used on the website</entry>
            </row>
            <row>
              <entry>keyCalendar</entry>
              <entry>The calendar type. Default: "iso8601".</entry>
            </row>
            <row>
              <entry>keyDateFormat</entry>
              <entry>The format in which dates should be displayed. Default: "yyyy-MM-dd".</entry>
            </row>
            <row>
              <entry>appStoreUrl</entry>
              <entry>The url used to point to the app store. Default:
                "https://www.dhis2.org/appstore"</entry>
            </row>
            <row>
              <entry>keyStyle</entry>
              <entry>The style used on the DHIS2 webpages. Default:
                "light_blue/light_blue.css".</entry>
            </row>
            <row>
              <entry>keyRemoteInstanceUrl</entry>
              <entry>Url used to connect to remote instance</entry>
            </row>
            <row>
              <entry>keyRemoteInstanceUsername</entry>
              <entry>Username used to connect to remote DHIS2 instance</entry>
            </row>
            <row>
              <entry>keyRemoteInstancePassword</entry>
              <entry>Password used to connect to remote DHIS2 instance</entry>
            </row>
            <row>
              <entry>keyMapzenSearchApiKey</entry>
              <entry>Key for the Mapzen geo search API</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>
  <section xml:id="webapi_user_settings">
    <title>User settings</title>
    <para>You can manipulate user settings by interacting with the <emphasis role="italic"
        >userSettings</emphasis> resource. A user setting is a simple key-value pair, where both the
      key and the value are plain text strings. The user setting will be linked to the user who is
      authenticated for the Web API request. To return a list of all user settings, you can send a
        <emphasis>GET</emphasis> request to the following URL:</para>
    <para>
      <screen>/api/26/userSettings</screen>
    </para>
    <para>User settings not set by the user, will fall back to the equvalent system setting. To only
      return the values set explicitly by the user, you can append ?useFallback=false to the above
      URL, like this:<screen>/api/26/userSettings?useFallback=false</screen></para>
    <para> To save or update a setting for the currently authenticated user you can make a <emphasis
        role="italic">POST</emphasis> request to the following URL:</para>
    <screen>/api/26/userSettings/my-key?value=my-val</screen>
    <para>You can specify the user for which to save the setting explicitly with this syntax:</para>
    <screen>/api/26/userSettings/my-key?user=username&amp;value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to &quot;text/plain&quot;. As an example, you can use curl like this:</para>
    <screen>curl &quot;https://play.dhis2.org/demo/api/26/userSettings/my-key&quot; -d &quot;My long value&quot; 
  -H &quot;Content-Type: text/plain&quot; -u admin:district -v</screen>
    <para>As an example, to set the UI locale of the current user to French you can use the
      following command.</para>
    <screen>curl &quot;https://play.dhis2.org/demo/api/26/userSettings/keyUiLocale?value=fr&quot; -X POST -u admin:district -v</screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/26/userSettings/my-key</screen>
    <para>To delete a user setting, you can make a <emphasis role="italic">DELETE</emphasis> request
      to the URL similar to the one used above for retrieval.</para>
    <para>The available system settings are listed below.<table frame="all">
        <title>User settings</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="newCol2" colwidth="1.36*"/>
          <colspec colnum="3" colname="c2" colwidth="2.35*"/>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Options</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>keyStyle</entry>
              <entry>light_blue/light_blue.css | green/green.css | vietnam/vietnam.css</entry>
              <entry>User interface stylesheet.</entry>
            </row>
            <row>
              <entry>keyMessageEmailNotification</entry>
              <entry>false | true</entry>
              <entry>Whether to send email notifications.</entry>
            </row>
            <row>
              <entry>keyMessageSmsNotification</entry>
              <entry>false | true</entry>
              <entry>Whether to send SMS notifications.</entry>
            </row>
            <row>
              <entry>keyUiLocale</entry>
              <entry>Locale value</entry>
              <entry>User interface locale.</entry>
            </row>
            <row>
              <entry>keyDbLocale</entry>
              <entry>Locale value</entry>
              <entry>Database content locale.</entry>
            </row>
            <row>
              <entry>keyAnalysisDisplayProperty</entry>
              <entry>name | shortName</entry>
              <entry>Property to display for metadata in analysis apps.</entry>
            </row>
            <row>
              <entry>keyCurrentDomainType</entry>
              <entry>all | aggregate | tracker</entry>
              <entry>Data element domain type to display in lists.</entry>
            </row>
            <row>
              <entry>keyAutoSaveCaseEntryForm</entry>
              <entry>false | true</entry>
              <entry>Save case entry forms periodically.</entry>
            </row>
            <row>
              <entry>keyAutoSaveTrackedEntityForm</entry>
              <entry>false | true</entry>
              <entry>Save person registration forms periodically.</entry>
            </row>
            <row>
              <entry>keyAutoSaveDataEntryForm</entry>
              <entry>false | true</entry>
              <entry>Save aggregate data entry forms periodically.</entry>
            </row>
            <row>
              <entry>keyTrackerDashboardLayout</entry>
              <entry>false | true</entry>
              <entry>Tracker dasboard layout.</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>
  <section xml:id="webapi_organisation_units">
    <title>Organisation units</title>
    <para>The <emphasis>organisationUnits</emphasis> resource follows the standard conventions as
      other metadata resources in DHIS2. This resource supports some additional query
      parameters.
    </para>
    <section>
      <title>Get list of organisation units</title>
      <para>To get a list of organisation units you can use the following resource.
        <screen>/api/26/organisationUnits</screen></para>
    <table frame="all">
      <title>Organisation units query parameters</title>
      <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colname="newCol2" colnum="2" colwidth="1*"/>
          <colspec colnum="3" colname="c2" colwidth="3.76*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Options</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>userOnly</entry>
              <entry>false | true</entry>
              <entry>Data capture organisation units associated with current user only.</entry>
            </row>
            <row>
              <entry>userDataViewOnly</entry>
              <entry>false | true</entry>
              <entry>Data view organisation units associated with current user only.</entry>
            </row>
            <row>
              <entry>userDataViewFallback</entry>
              <entry>false | true</entry>
              <entry>Data view organisation units associated with current user only with fallback to
                data capture organisation units.</entry>
            </row>
            <row>
              <entry>query</entry>
              <entry>string</entry>
              <entry>Query against the name, code and ID properties.</entry>
            </row>
            <row>
              <entry>level</entry>
              <entry>integer</entry>
              <entry>Organisation units at the given level in the hierarchy.</entry>
            </row>
            <row>
              <entry>maxLevel</entry>
              <entry>integer</entry>
              <entry>Organisation units at the given max level or levels higher up in the
                hierarchy.</entry>
            </row>
          </tbody>
        </tgroup>
    </table>
    </section>
    <section>
      <title>Get organisation unit with relations</title>
      <para>To get an organisation unit with related organisation units you can use the following
        resource. <screen>/api/24/organisationUnits/{id} </screen></para>
      <table frame="all">
        <title>Organisation unit parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="newCol2" colnum="2" colwidth="1*"/>
          <colspec colname="c2" colnum="3" colwidth="2.85*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Options</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>includeChildren</entry>
              <entry>false | true</entry>
              <entry>Include immediate children of the specified organisation unit, i.e. the units
                at the immediate level below in the subhierarchy.</entry>
            </row>
            <row>
              <entry>includeDescendants</entry>
              <entry>false | true</entry>
              <entry>Include all children of the specified organisation unit, i.e. all units in the
                subhierarchy.</entry>
            </row>
            <row>
              <entry>includeAncestors</entry>
              <entry>false | true</entry>
              <entry>Include all parents of the specified organisation unit.</entry>
            </row>
            <row>
              <entry>level</entry>
              <entry>integer</entry>
              <entry>Include children of the specified organisation unit at the given level of the
                subhierarchy (relative to the organisation unit where the immediate level below is
                level 1).</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section xml:id="webapi_data_sets">
    <title>Data sets</title>
    <para>The <emphasis>dataSets</emphasis> resource follows the standard conventions as other
      metadata resources in DHIS2. This resource supports some additional query
      parameters.<screen>/api/26/dataSets</screen></para>
    <para>To retrieve the version of a data set you can issue a GET
      request:<screen>GET /api/26/dataSets/&lt;uid>/version</screen></para>
    <para>To bump (increase by one) the version of a data set you can issue a POST
      request:<screen>POST /api/26/dataSets/&lt;uid>/version</screen></para>
  </section>
  <section xml:id="webapi_filled_organisation_unit_levels">
    <title>Filled organisation unit levels</title>
    <para>The <emphasis>filledOrganisationUnitLevels</emphasis> resource provides an ordered list of
      organisation unit levels, where generated levels are injected into the list to fill positions
      for which it does not exist a persisted level.</para>
    <para>
      <screen>GET /api/26/filledOrganisationUnitLevels</screen>
    </para>
    <para>To set the organisation unit levels you can issue a POST request with a JSON payload
      looking like
      this.<screen>{
  "organisationUnitLevels": [{
    "name": "National",
    "level": 1,
    "offlineLevels": 3
  }, {
    "name": "District",
    "level": 2
  }, {
    "name": "Chiefdom",
    "level": 3
  }, {
    "name": "Facility",
    "level": 4
  }]
}</screen></para>
    <para>To do functional testing with curl you can issue the following command.
      <screen>curl "http://localhost/api/26/filledOrganisationUnitLevels" -H "Content-Type:application/json"
  -d @levels.json -u admin:district -v</screen></para>
  </section>
  <section xml:id="webapi_static_content">
    <title>Static content</title>
    <para>The <emphasis>staticContent</emphasis> resource allowes you to upload and retrieve custom
      logos used in DHIS2. The resource lets the user upload a file with an associated key, which
      can later be retrieved using the key. Only PNG files are supported and can only be uploaded to
      the &quot;logo_banner&quot; and &quot;logo_front&quot;
      keys.<screen>/api/26/staticContent</screen></para>
    <table frame="all">
      <title>Static content keys</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1.0*"/>
        <colspec colnum="2" colname="c2" colwidth="1.0*"/>
        <thead>
          <row>
            <entry>Key</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>logo_banner</entry>
            <entry>Logo in the application top menu on the left side.</entry>
          </row>
          <row>
            <entry>logo_front</entry>
            <entry>Logo on the login-page above the login form.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para> To upload a file, send the file with a <emphasis>POST</emphasis> request
      to:<screen>POST /api/26/staticContent/&lt;key&gt;</screen></para>
    <para>Example request to upload logo.png to the logo_front
      key:<screen>curl -F &quot;file=@logo.png;type=image/png&quot; &quot;https://play.dhis2.org/demo/api/26/staticContent/logo_front&quot;
  -X POST -H &quot;Content-Type: multipart/form-data&quot; -u admin:district -v</screen></para>
    <para>Uploading multiple files with the same key will overwrite the existing file. This way,
      retrieving a file for any given key will only return the latest file uploaded.</para>
    <para>To retrieve a logo, you can <emphasis>GET</emphasis> the
      following:<screen>GET /api/26/staticContent/&lt;key&gt;</screen></para>
    <para>Example request to retrieve the file stored for
      logo_front:<screen>curl &quot;https://play.dhis2.org/demo/api/26/staticContent/logo_front&quot; -L -X GET -u admin:district -v</screen></para>
    <para>To use custom logos, you need to enable the corresponding system settings by setting it to
        <emphasis>true</emphasis>. If the corresponding setting is false, the default logo will be
      served.</para>
  </section>
  <section xml:id="webapi_configuration">
    <title>Configuration</title>
    <para>To access configuration you can interact with the <emphasis role="italic"
        >configuration</emphasis> resource. You can get XML and JSON responses through the <emphasis
        role="italic">Accept</emphasis> header or by using the .json or .xml extensions. You can
        <emphasis role="italic">GET</emphasis> all properties of the configuration from:</para>
    <screen>/api/26/configuration</screen>
    <para>You can send <emphasis role="italic">GET</emphasis> and <emphasis role="italic"
        >POST</emphasis> requests to the following specific resources:</para>
    <screen>GET /api/26/configuration/systemId</screen>
    <screen>GET POST DELETE /api/26/configuration/feedbackRecipients</screen>
    <screen>GET POST DELETE /api/26/configuration/offlineOrganisationUnitLevel</screen>
    <screen>GET POST /api/26/configuration/infrastructuralDataElements</screen>
    <screen>GET POST /api/26/configuration/infrastructuralIndicators</screen>
    <screen>GET POST /api/26/configuration/infrastructuralPeriodType</screen>
    <screen>GET POST DELETE /api/26/configuration/selfRegistrationRole</screen>
    <screen>GET POST DELETE /api/26/configuration/selfRegistrationOrgUnit</screen>
    <para>For the CORS whitelist configuration you can make a POST request with an array of URLs to
      whitelist as payload using &quot;application/json&quot; as content-type, for instance:</para>
    <screen>[&quot;www.google.com&quot;, &quot;www.dhis2.org&quot;, &quot;www.who.int&quot;]</screen>
    <screen>GET POST /api/26/configuration/corsWhitelist</screen>
    <para>For POST requests, the configuration value should be sent as the request payload as text.
      The following table shows appropriate configuration values for each property.</para>
    <table frame="all">
      <title>Configuration values</title>
      <tgroup cols="2">
        <colspec colnum="1" colname="c1" colwidth="1*"/>
        <colspec colnum="2" colname="c2" colwidth="2.28*"/>
        <thead>
          <row>
            <entry>Configuration property</entry>
            <entry>Value</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>feedbackRecipients</entry>
            <entry>User group ID</entry>
          </row>
          <row>
            <entry>offlineOrganisationUnitLevel</entry>
            <entry>Organisation unit level ID</entry>
          </row>
          <row>
            <entry>infrastructuralDataElements</entry>
            <entry>Data element group ID</entry>
          </row>
          <row>
            <entry>infrastructuralIndicators</entry>
            <entry>Indicator group ID</entry>
          </row>
          <row>
            <entry>infrastructuralPeriodType</entry>
            <entry>Period type name (e.g. &quot;Monthly&quot;)</entry>
          </row>
          <row>
            <entry>selfRegistrationRole</entry>
            <entry>User role ID</entry>
          </row>
          <row>
            <entry>selfRegistrationOrgUnit</entry>
            <entry>Organisation unit ID</entry>
          </row>
          <row>
            <entry>smtpPassword</entry>
            <entry>SMTP email server password</entry>
          </row>
          <row>
            <entry>remoteServerUrl</entry>
            <entry>URL to remote server</entry>
          </row>
          <row>
            <entry>remoteServerUsername</entry>
            <entry>Username for remote server authentication</entry>
          </row>
          <row>
            <entry>remoteServerPassword</entry>
            <entry>Password for remote server authentication</entry>
          </row>
          <row>
            <entry>corsWhitelist</entry>
            <entry>JSON list of URLs</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>As an example, to set the feedback recipients user group you can invoke the following curl
      command:<screen>curl &quot;localhost/api/26/configuration/feedbackRecipients&quot; -d &quot;wl5cDMuUhmF&quot; 
  -H &quot;Content-Type:text/plain&quot;-u admin:district -v</screen></para>
  </section>
  <section xml:id="webapi_i18n">
    <title>Internationalization</title>
    <para>In order to retrieve key-value pairs for translated strings you can use the <emphasis
        role="italic">i18n</emphasis> resource.<screen>/api/26/i18n</screen> The endpoint is located
      at <emphasis role="italic">api/i18n</emphasis> and the request format is a simple array of the
      key-value pairs:</para>
    <screen>[
  &quot;access_denied&quot;,
  &quot;uploading_data_notification&quot;
]</screen>
    <para>The request must be of type <emphasis role="italic">POST</emphasis> and use <emphasis
        role="italic">application/json</emphasis> as content-type. An example using curl, assuming
      the request data is saved as a file keys.json:</para>
    <screen>curl -d @keys.json &quot;play.dhis2.org/demo/api/26/i18n&quot; -X POST 
  -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen>
    <para>The result will look like this:</para>
    <screen>{
  &quot;access_denied&quot;:&quot;Access denied&quot;,
  &quot;uploading_data_notification&quot;:&quot;Uploading locally stored data to the server&quot;
}</screen>
  </section>
  <section xml:id="webapi_svg_conversion">
    <title>SVG conversion</title>
    <para>The Web API provides a resource which can be used to convert SVG content into more widely
      used formats such as PNG and PDF. Ideally this conversion should happen on the client side,
      but not all client side technologies are capable of performing this task. Currently PNG and
      PDF output formats are supported. The SVG content itself should passed with a <emphasis
        role="italic">svg</emphasis> query parameter, and an optional query parameter <emphasis
        role="italic">filename</emphasis> can be used to specify the filename of the response
      attachment file. Note that the file extension should be omitted. For PNG you can send a
        <emphasis role="italic">POST</emphasis> request to the following URL with Content-type
        <emphasis role="italic">application/x-www-form-urlencoded</emphasis>, identical to a regular
      HTML form submission.</para>
    <screen>api/svg.png</screen>
    <para>For PDF you can send a <emphasis role="italic">POST</emphasis> request to the following
      URL with Content-type <emphasis role="italic"
      >application/x-www-form-urlencoded</emphasis>.</para>
    <screen>api/svg.pdf</screen>
    <table frame="all">
      <title>Query parameters</title>
      <tgroup cols="3">
        <colspec colnum="1" colname="c1" colwidth="1.92*"/>
        <colspec colnum="2" colname="c2" colwidth="1*"/>
        <colspec colnum="3" colname="c3" colwidth="5.96*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>svg</entry>
            <entry>Yes</entry>
            <entry>The SVG content</entry>
          </row>
          <row>
            <entry>filename</entry>
            <entry>No</entry>
            <entry>The file name for the returned attachment without file extension</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section xml:id="webapi_tracked_entity_instance_management">
    <title>Tracked entity instance management</title>
    <para>Tracked entity instances have full CRUD (create, read, update, delete) support in the
      Web-API. Together with the API for enrollment most operations needed for working with tracked
      entity instances and programs are
      supported.<screen>/api/26/trackedEntityInstances</screen></para>
    <section>
      <title>Creating a new tracked entity instance</title>
      <para>For creating a new person in the system, you will be working with the <emphasis
          role="italic">trackedEntityInstances</emphasis> resource. A template payload can be seen
        below:<screen>{
    &quot;trackedEntity&quot;: &quot;tracked-entity-id&quot;,
    &quot;orgUnit&quot;: &quot;org-unit-id&quot;,
    &quot;attributes&quot;: [ {
        &quot;attribute&quot;: &quot;attribute-id&quot;,
        &quot;value&quot;: &quot;attribute-value&quot;
    } ]
}</screen></para>
      <para>For getting the IDs for <emphasis role="italic">relationship</emphasis>, <emphasis
          role="italic">attributes</emphasis> you can have a look at the respective resources
          <emphasis role="italic">relationshipTypes</emphasis>,, <emphasis role="italic"
          >trackedEntityAttributes</emphasis>. To create a tracked entity instance you must use the
        HTTP <emphasis role="bold">POST</emphasis> method. You can post the payload the the
        following URL:</para>
      <screen>/api/trackedEntityInstances</screen>
      <para> For example, let us create a new instance of a person tracked entity and specify its
        first name and last name
        attributes:<screen>{
  &quot;trackedEntity&quot;: &quot;nEenWmSyUEp&quot;,
  &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
  &quot;attributes&quot;: [
    {
      &quot;attribute&quot;: &quot;w75KJ2mc4zz&quot;,
      &quot;value&quot;: &quot;Joe&quot;
    },
    {
      &quot;attribute&quot;: &quot;zDhUuAYrxNC&quot;,
      &quot;value&quot;: &quot;Smith&quot;
    }
  ]
}</screen></para>
      <para>To push this to the server you can use the cURL command like
        this:<screen>curl -d @tei.json &quot;https://play.dhis2.org/demo/api/trackedEntityInstances&quot; -X POST 
-H &quot;Content-Type: application/json&quot; -u admin:district -v</screen></para>
      <para>To create multiple instances in one request you can wrap the payload in an outer array
        like this and POST to the same resource as
        above:<screen>{
  &quot;trackedEntityInstances&quot;: [
    {
      &quot;trackedEntity&quot;: &quot;nEenWmSyUEp&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
      &quot;attributes&quot;: [
        {
          &quot;attribute&quot;: &quot;w75KJ2mc4zz&quot;,
          &quot;value&quot;: &quot;Joe&quot;
        },
        {
          &quot;attribute&quot;: &quot;zDhUuAYrxNC&quot;,
          &quot;value&quot;: &quot;Smith&quot;
        }
      ]
    },
    {
      &quot;trackedEntity&quot;: &quot;nEenWmSyUEp&quot;,
      &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
      &quot;attributes&quot;: [
        {
          &quot;attribute&quot;: &quot;w75KJ2mc4zz&quot;,
          &quot;value&quot;: &quot;Jennifer&quot;
        },
        {
          &quot;attribute&quot;: &quot;zDhUuAYrxNC&quot;,
          &quot;value&quot;: &quot;Johnson&quot;
        }
      ]
    }
  ]
}</screen></para>
    </section>
    <section>
      <title>Updating a tracked entity instance</title>
      <para>For updating a tracked entity instance, the payload is the equal to the previous
        section. The difference is that you must use the HTTP <emphasis role="bold">PUT</emphasis>
        method for the request when sending the payload. You will also need to append the person
        identifier to the <emphasis role="italic">trackedEntityInstances</emphasis> resource in the
        URL like this, where &lt;tracked-entity-instance-identifier&gt; should be replaced by the
        identifier of the tracked entity instance:</para>
      <screen>/api/trackedEntityInstances/&lt;tracked-entity-instance-id&gt;</screen>
    </section>
    <section>
      <title>Deleting a tracked entity instance</title>
      <para>To delete a tracked entity instance you can make a request to the URL identifiying the
        tracked entity instance with the HTTP <emphasis role="bold">DELETE</emphasis> method. The
        URL is equal to the one above used for update.</para>
    </section>
    <section>
      <title>Enrolling a tracked entity instance into a program</title>
      <para>For enrolling persons into a program, you will need to first get the identifier of the
        person from the <emphasis role="italic">trackedEntityInstances</emphasis> resource. Then,
        you will need to get the program identifier from the <emphasis role="italic"
          >programs</emphasis> resource. A template payload can be seen
        below:<screen>{
  &quot;trackedEntityInstance&quot;: &quot;ZRyCnJ1qUXS&quot;,
  &quot;orgUnit&quot;: &quot;ImspTQPwCqd&quot;,
  &quot;program&quot;: &quot;S8uo8AlvYMz&quot;,
  &quot;enrollmentDate&quot;: &quot;2013-09-17&quot;,
  &quot;incidentDate&quot;: &quot;2013-09-17&quot;
}</screen></para>
      <para>This payload should be used in a <emphasis role="bold">POST</emphasis> request to the
        enrollments resource identified by the following URL:</para>
      <screen>/api/enrollments</screen>
      <para>For cancelling or completing an enrollment, you can make a <emphasis role="bold"
          >PUT</emphasis> request to the <emphasis role="italic">enrollments</emphasis> resource,
        including the identifier and the action you want to perform. For cancelling an enrollment
        for a tracked entity
        instance:<screen>/api/enrollments/&lt;enrollment-id&gt;/cancelled</screen></para>
      <para>For completing a enrollment for a tracked entity instance you can make a <emphasis
          role="bold">PUT</emphasis> request to the following
        URL:<screen>/api/enrollments/&lt;enrollment-id&gt;/completed</screen></para>
      <para>For deleting a enrollment, you can make a <emphasis role="bold">DELETE</emphasis>
        request to the following URL:<screen>/api/enrollments/&lt;enrollment-id&gt;</screen></para>
    </section>
    <section>
      <title>Update strategies</title>
      <para>Two update strategies for tracked entity instance are supported: enrollment and event
        creation. This is useful when you have generated an identifier on the client side and are
        not sure if it was created or not on the server.<table frame="all">
          <title>Available tracker strategies</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="1*"/>
            <colspec colnum="2" colname="c2" colwidth="3.08*"/>
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>CREATE</entry>
                <entry>Create only, this is the default behavior.</entry>
              </row>
              <row>
                <entry>CREATE_AND_UPDATE</entry>
                <entry>Try and match the ID, if it exist then update, if not create.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para>To change the parameter, please use the strategy
        parameter:<screen>POST /api/trackedEntityInstances?strategy=CREATE_AND_UPDATE</screen></para>
    </section>
    <section>
      <title>Create and enroll tracked entity instances</title>
      <para>It is also possible to both create (and update) a tracked entity instance and at the
        same time enroll into a program.</para>
      <screen>{
    "trackedEntity": "tracked-entity-id",
    "orgUnit": "org-unit-id",
    "attributes": [ {
        "attribute": "attribute-id",
        "value": "attribute-value"
    } ],
    "enrollments": [ {
        "orgUnit": "org-unit-id",
        "program": "program-id",
        "enrollmentDate": "2013-09-17",
        "incidentDate": "2013-09-17"
     }, {
        "orgUnit": "org-unit-id",
        "program": "program-id",
        "enrollmentDate": "2013-09-17",
        "incidentDate": "2013-09-17"
     } ]
}</screen>
      <para>You would send this to the server as you would normally when creating or updating a new
        tracked entity
        instane.<screen>curl -X POST -d @tei.json -H "Content-Type: application/json"
  -u user:pass http://server/api/26/trackedEntityInstances</screen></para>
    </section>
    <section>
      <title>Generated tracked entity instance attributes</title>
      <para>Tracked entity instance attributes that is using automatic generation of unique values
        has two endpoints that is used by apps. One is used to generate values, the other to
        generate and reserve one or more values for use later.</para>
      <section>
        <title>Generate value endpoint</title>
        <para>Online web apps and other clients that wants to generate a value that will be used
          right away can use the simple generate endpoint. This endpoint will generate a value that
          is guaranteed to be unique at the time of generation. The value is also guaranteed not to
          be reserved by use of the generateAndReseve endpoint.</para>
        <screen>curl -X GET -H "Content-Type: application/json" -u admin:district 
          https://play.dhis2.org/dev/api/trackedEntityAttributes/lZGmxYbs97q/generate</screen>
      </section>
      <section>
        <title>Generate and reserve value endpoint</title>
        <para>The generate and reserve endpoint is used by offline clients that needs to be able to
          register tracked entities with unique ids. They will reserve a number of unique ids that
          this device will then use when registering new tracked entity instances. The endpoint is
          called to retreieve a number of tracked entity instance reserved values. An optional
          parameter numberToReserve specifies how many ids to generate (default is 1). </para>
        <screen>curl -X GET -H "Content-Type: application/json" -u admin:district 
          https://play.dhis2.org/dev/api/trackedEntityAttributes/lZGmxYbs97q/generateAndReserve?numberToReserve=3</screen>
        <screen>[
   {
      "created":"2016-06-25T07:52:26.466+0000",
      "expiryDate":"2017-06-25T07:52:26.466+0000",
      "value":"43327401",
      "trackedEntityAttribute":{  }
   },
   {
      "created":"2016-06-25T07:52:26.468+0000",
      "expiryDate":"2017-06-25T07:52:26.468+0000",
      "value":"82676084",
      "trackedEntityAttribute":{  }
   },
   {
      "created":"2016-06-25T07:52:26.471+0000",
      "expiryDate":"2017-06-25T07:52:26.471+0000",
      "value":"91700776",
      "trackedEntityAttribute":{  }
   }
]
        </screen>
        <para>The generate and reserve endpoint returns an array of reserved values:</para>
        <table frame="all">
          <title>Tracked entity reserved values</title>
          <tgroup cols="2">
            <colspec colnum="1" colname="c1" colwidth="1.38*"/>
            <colspec colnum="2" colname="c3" colwidth="7.25*"/>
            <thead>
              <row>
                <entry>Property</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>created</entry>
                <entry>The date the reserved value was created.</entry>
              </row>
              <row>
                <entry>expiryDate</entry>
                <entry>After this date the value can be deleted/unreserved by the server if  no
                  tracked entity has been registered with the value. The deletion does not happen
                  automatically at the exact time of the expiration, but can/will be done with
                  scripts or mechanisms implemneted later.</entry>
              </row>
              <row>
                <entry>value</entry>
                <entry>The actual generated value that is reserved.</entry>
              </row>
              <row>
                <entry>trackedEntityAttribute</entry>
                <entry>The tracked entity attribute that the value was generated for.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
    </section>
  </section>
  <section xml:id="webapi_tracked_entity_instance_query">
    <title>Tracked entity instance query</title>
    <para>To query for tracked entity instances you can interact with the <emphasis role="italic"
        >/api/trackedEntityInstances</emphasis>
      resource.<screen>/api/26/trackedEntityInstances</screen></para>
    <section>
      <title>Request syntax</title>
      <table frame="all">
        <title>Tracked entity instances query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.38*"/>
          <colspec colnum="2" colname="c3" colwidth="7.25*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>filter</entry>
              <entry>Attributes to use as a filter for the query. Param can be repeated any number
                of times. Filters can be applied to a dimension on the format
                &lt;attribute-id&gt;:&lt;operator&gt;:&lt;filter&gt;[:&lt;operator&gt;:&lt;filter&gt;].
                Filter values are case-insensitive and can be repeated together with operator any
                number of times. Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN.</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Organisation unit idenfiers, separated by &quot;;&quot;.</entry>
            </row>
            <row>
              <entry>ouMode</entry>
              <entry>The mode of selecting organisation units, can be SELECTED | CHILDREN |
                DESCENDANTS | ACCESSIBLE | ALL. Default is SELECTED, which refers to the selected
                organisation units only. See table below for explanations.</entry>
            </row>
            <row>
              <entry>program</entry>
              <entry>Program identifier. Restricts instances to being enrolled in the given
                program.</entry>
            </row>
            <row>
              <entry>programStatus</entry>
              <entry>Status of the instance for the given program. Can be ACTIVE | COMPLETED |
                CANCELLED.</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>Follow up status of the instance for the given program. Can be true | false or
                omitted.</entry>
            </row>
            <row>
              <entry>programStartDate</entry>
              <entry>Start date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>programEndDate</entry>
              <entry>End date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>trackedEntity</entry>
              <entry>Tracked entity identifer. Restricts instances to the given tracked instance
                type.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>The page number. Default page is 1.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>The page size. Default size is 50 rows per page.</entry>
            </row>
            <row>
              <entry>totalPages</entry>
              <entry>Indicates whether to include the total number of pages in the paging response
                (implies higher response time).</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>Indicates whether paging should be ignored and all rows should be
                returned.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The available organisation unit selection modes are explained in the following
        table.</para>
      <table frame="all">
        <title>Organisation unit selection modes</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3.88*"/>
          <thead>
            <row>
              <entry>Mode</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>SELECTED</entry>
              <entry>Organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>CHILDREN</entry>
              <entry>The selected organisation units and the immediate children, i.e. the
                organisation units at the level below.</entry>
            </row>
            <row>
              <entry>DESCENDANTS</entry>
              <entry>The selected organisation units and and all children, i.e. all organisation
                units in the subhierarchy.</entry>
            </row>
            <row>
              <entry>ACCESSIBLE</entry>
              <entry>The data view organisation units associated with the current user and all
                children, i.e. all organisation units in the subhierarchy. Will fall back to data
                capture organisation units associated with the current user if the former is not
                defined.</entry>
            </row>
            <row>
              <entry>ALL</entry>
              <entry>All organisation units in the system. Requires the ALL authority.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The query is case insensitive. The following rules apply to the query parameters.</para>
      <itemizedlist>
        <listitem>
          <para>At least one organisation unit must be specified using the <emphasis role="italic"
              >ou</emphasis> parameter (one or many), or <emphasis role="italic"
              >ouMode=ALL</emphasis> must be specified.</para>
        </listitem>
        <listitem>
          <para>Only one of the <emphasis role="italic">program</emphasis> and <emphasis
              role="italic">trackedEntity</emphasis> parameters can be specified (zero or
            one).</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStatus</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">followUp</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStartDate</emphasis> or <emphasis role="italic"
              >programEndDate</emphasis> is specified then <emphasis role="italic"
              >program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>Filter items can only be specified once.</para>
        </listitem>
      </itemizedlist>
      <para>A query for all instances associated with a specific organisation unit can look like
        this:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8</screen>
      <para>To query for instances using one attribute with a filter and one attribute without a
        filter, with one organisation unit using the descendants organisation unit query
        mode:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;filter=AMpUYgxuCaE&amp;ou=DiszpKrYNg8;yMCshbaVExv</screen>
      <para>A query for instances where one attribute is included in the response and one attribute
        us used as a filter:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;filter=AMpUYgxuCaE:LIKE:Road&amp;ou=DiszpKrYNg8</screen>
      <para>A query where multiple operand and filters are specified for a filter item:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8&amp;program=ur1Edk5Oe2n&amp;filter=lw1SqmMlnfh:GT:150:LT:190</screen>
      <para>To query on an attribute using multiple values in an IN filter:</para>
      <screen>api/trackedEntityInstances.json?ou=DiszpKrYNg8&amp;filter=dv3nChNSIxy:IN:Scott;Jimmy;Santiago</screen>
      <para>To constrain the response to instances which are part of a specific program you can
        include a program query parameter:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;ou=O6uvpzGd5pu
&amp;ouMode=DESCENDANTS&amp;program=ur1Edk5Oe2n</screen>
      <para>To specify program enrollment dates as part of the query:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;ou=O6uvpzGd5pu&amp;program=ur1Edk5Oe2n
&amp;programStartDate=2013-01-01&amp;programEndDate=2013-09-01</screen>
      <para>To constrain the response to instances of a specific tracked entity you can include a
        tracked entity query parameter:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;ou=O6uvpzGd5pu
&amp;ouMode=DESCENDANTS&amp;trackedEntity=cyl5vuJ5ETQ</screen>
      <para>By default the instances are returned in pages of size 50, to change this you can use
        the page and pageSize query parameters:</para>
      <screen>api/trackedEntityInstances.json?filter=zHXD5Ve1Efw:EQ:A&amp;ou=O6uvpzGd5pu
&amp;ouMode=DESCENDANTS&amp;page=2&amp;pageSize=3</screen>
      <para>You can use a range of operators for the filtering:</para>
      <table frame="all">
        <title>Filter operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="87.75pt"/>
          <colspec colnum="2" colname="c2" colwidth="368.25pt"/>
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>EQ</entry>
              <entry>Equal to</entry>
            </row>
            <row>
              <entry>GT</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>GE</entry>
              <entry>Greater than or equal to</entry>
            </row>
            <row>
              <entry>LT</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>LE</entry>
              <entry>Less than or equal to</entry>
            </row>
            <row>
              <entry>NE</entry>
              <entry>Not equal to</entry>
            </row>
            <row>
              <entry>LIKE</entry>
              <entry>Like (free text match)</entry>
            </row>
            <row>
              <entry>IN</entry>
              <entry>Equal to one of multiple values separated by &quot;;&quot;</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Response format</title>
      <para>This resource supports JSON, JSONP, XLS and CSV resource representations.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
      </itemizedlist>
      <para>The response in JSON/XML is in object format and can look like the following (please
        note that field filtering is supported, so if you want a full view, you might want to add
        fields=*):</para>
      <screen>{
    &quot;trackedEntityInstances&quot;: [
        {
            &quot;lastUpdated&quot;: &quot;2014-03-28 12:27:52.399&quot;,
            &quot;trackedEntity&quot;: &quot;cyl5vuJ5ETQ&quot;,
            &quot;created&quot;: &quot;2014-03-26 15:40:19.997&quot;,
            &quot;orgUnit&quot;: &quot;ueuQlqb8ccl&quot;,
            &quot;trackedEntityInstance&quot;: &quot;tphfdyIiVL6&quot;,
            &quot;relationships&quot;: [],
            &quot;attributes&quot;: [
                {
                    &quot;displayName&quot;: &quot;Address&quot;,
                    &quot;attribute&quot;: &quot;AMpUYgxuCaE&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;2033 Akasia St&quot;
                },
                {
                    &quot;displayName&quot;: &quot;TB number&quot;,
                    &quot;attribute&quot;: &quot;ruQQnf6rswq&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;1Z 989 408 56 9356 521 9&quot;
                },
                {
                    &quot;displayName&quot;: &quot;Weight in kg&quot;,
                    &quot;attribute&quot;: &quot;OvY4VVhSDeJ&quot;,
                    &quot;type&quot;: &quot;number&quot;,
                    &quot;value&quot;: &quot;68.1&quot;
                },
                {
                    &quot;displayName&quot;: &quot;Email&quot;,
                    &quot;attribute&quot;: &quot;NDXw0cluzSw&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;LiyaEfrem@armyspy.com&quot;
                },
                {
                    &quot;displayName&quot;: &quot;Gender&quot;,
                    &quot;attribute&quot;: &quot;cejWyOfXge6&quot;,
                    &quot;type&quot;: &quot;optionSet&quot;,
                    &quot;value&quot;: &quot;Female&quot;
                },
                {
                    &quot;displayName&quot;: &quot;Phone number&quot;,
                    &quot;attribute&quot;: &quot;P2cwLGskgxn&quot;,
                    &quot;type&quot;: &quot;phoneNumber&quot;,
                    &quot;value&quot;: &quot;085 813 9447&quot;
                },
                {
                    &quot;displayName&quot;: &quot;First name&quot;,
                    &quot;attribute&quot;: &quot;dv3nChNSIxy&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Liya&quot;
                },
                {
                    &quot;displayName&quot;: &quot;Last name&quot;,
                    &quot;attribute&quot;: &quot;hwlRTFIFSUq&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Efrem&quot;
                },
                {
                    &quot;code&quot;: &quot;Height in cm&quot;,
                    &quot;displayName&quot;: &quot;Height in cm&quot;,
                    &quot;attribute&quot;: &quot;lw1SqmMlnfh&quot;,
                    &quot;type&quot;: &quot;number&quot;,
                    &quot;value&quot;: &quot;164&quot;
                },
                {
                    &quot;code&quot;: &quot;City&quot;,
                    &quot;displayName&quot;: &quot;City&quot;,
                    &quot;attribute&quot;: &quot;VUvgVao8Y5z&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Kranskop&quot;
                },
                {
                    &quot;code&quot;: &quot;State&quot;,
                    &quot;displayName&quot;: &quot;State&quot;,
                    &quot;attribute&quot;: &quot;GUOBQt5K2WI&quot;,
                    &quot;type&quot;: &quot;number&quot;,
                    &quot;value&quot;: &quot;KwaZulu-Natal&quot;
                },
                {
                    &quot;code&quot;: &quot;Zip code&quot;,
                    &quot;displayName&quot;: &quot;Zip code&quot;,
                    &quot;attribute&quot;: &quot;n9nUvfpTsxQ&quot;,
                    &quot;type&quot;: &quot;number&quot;,
                    &quot;value&quot;: &quot;3282&quot;
                },
                {
                    &quot;code&quot;: &quot;Mother maiden name&quot;,
                    &quot;displayName&quot;: &quot;Mother maiden name&quot;,
                    &quot;attribute&quot;: &quot;o9odfev2Ty5&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Gabriel&quot;
                },
                {
                    &quot;code&quot;: &quot;National identifier&quot;,
                    &quot;displayName&quot;: &quot;National identifier&quot;,
                    &quot;attribute&quot;: &quot;AuPLng5hLbE&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;465700042&quot;
                },
                {
                    &quot;code&quot;: &quot;Occupation&quot;,
                    &quot;displayName&quot;: &quot;Occupation&quot;,
                    &quot;attribute&quot;: &quot;A4xFHyieXys&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Biophysicist&quot;
                },
                {
                    &quot;code&quot;: &quot;Company&quot;,
                    &quot;displayName&quot;: &quot;Company&quot;,
                    &quot;attribute&quot;: &quot;kyIzQsj96BD&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;Sav-A-Center&quot;
                },
                {
                    &quot;code&quot;: &quot;Vehicle&quot;,
                    &quot;displayName&quot;: &quot;Vehicle&quot;,
                    &quot;attribute&quot;: &quot;VHfUeXpawmE&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;2008 Citroen Picasso&quot;
                },
                {
                    &quot;code&quot;: &quot;Blood type&quot;,
                    &quot;displayName&quot;: &quot;Blood type&quot;,
                    &quot;attribute&quot;: &quot;H9IlTX2X6SL&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;B-&quot;
                },
                {
                    &quot;code&quot;: &quot;Latitude&quot;,
                    &quot;displayName&quot;: &quot;Latitude&quot;,
                    &quot;attribute&quot;: &quot;Qo571yj6Zcn&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;-30.659626&quot;
                },
                {
                    &quot;code&quot;: &quot;Longitude&quot;,
                    &quot;displayName&quot;: &quot;Longitude&quot;,
                    &quot;attribute&quot;: &quot;RG7uGl4w5Jq&quot;,
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;value&quot;: &quot;26.916172&quot;
                }
            ]
        }
    ]
}</screen>
    </section>
  </section>
  <section xml:id="webapi_tracked_entity_instance_grid_query">
    <title>Tracked entity instance grid query</title>
    <para>To query for tracked entity instances you can interact with the <emphasis role="italic"
        >/api/trackedEntityInstances/grid</emphasis> resource. There are two types of queries: One
      where a <emphasis role="italic">query</emphasis> query parameter and optionally <emphasis
        role="italic">attribute</emphasis> parameters are defined, and one where <emphasis
        role="italic">attribute</emphasis> and <emphasis role="italic">filter</emphasis> parameters
      are defined. This endpoint uses a more compact &quot;grid&quot; format, and is an alternative
      to the query in the previous
      section.<screen>api/24/trackedEntityInstances/query</screen></para>
    <section>
      <title>Request syntax</title>
      <table frame="all">
        <title>Tracked entity instances query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.38*"/>
          <colspec colnum="2" colname="c3" colwidth="7.25*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>query</entry>
              <entry>Query string. Attribute query parameter can be used to define which attributes
                to include in the response. If no attributes but a program is defined, the
                attributes from the program will be used. If no program is defined, all attributes
                will be used. There are two formats. The first is a plan query string. The second is
                on the format &lt;operator&gt;:&lt;query&gt;. Operators can be EQ | LIKE. EQ implies
                exact matches on words, LIKE implies partial matches on words. The query will be
                split on space, where each word will form a logical AND query.</entry>
            </row>
            <row>
              <entry>attribute</entry>
              <entry>Attributes to be included in the response. Can also be used a filter for the
                query. Param can be repeated any number of times. Filters can be applied to a
                dimension on the format
                &lt;attribute-id&gt;:&lt;operator&gt;:&lt;filter&gt;[:&lt;operator&gt;:&lt;filter&gt;].
                Filter values are case-insensitive and can be repeated together with operator any
                number of times. Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN. Filters
                can be omitted in order to simply include the attribute in the response without any
                constraints.</entry>
            </row>
            <row>
              <entry>filter</entry>
              <entry>Attributes to use as a filter for the query. Param can be repeated any number
                of times. Filters can be applied to a dimension on the format
                &lt;attribute-id&gt;:&lt;operator&gt;:&lt;filter&gt;[:&lt;operator&gt;:&lt;filter&gt;].
                Filter values are case-insensitive and can be repeated together with operator any
                number of times. Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN.</entry>
            </row>
            <row>
              <entry>ou</entry>
              <entry>Organisation unit idenfiers, separated by &quot;;&quot;.</entry>
            </row>
            <row>
              <entry>ouMode</entry>
              <entry>The mode of selecting organisation units, can be SELECTED | CHILDREN |
                DESCENDANTS | ACCESSIBLE | ALL. Default is SELECTED, which refers to the selected
                organisation units only. See table below for explanations.</entry>
            </row>
            <row>
              <entry>program</entry>
              <entry>Program identifier. Restricts instances to being enrolled in the given
                program.</entry>
            </row>
            <row>
              <entry>programStatus</entry>
              <entry>Status of the instance for the given program. Can be ACTIVE | COMPLETED |
                CANCELLED.</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>Follow up status of the instance for the given program. Can be true | false or
                omitted.</entry>
            </row>
            <row>
              <entry>programStartDate</entry>
              <entry>Start date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>programEndDate</entry>
              <entry>End date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>trackedEntity</entry>
              <entry>Tracked entity identifer. Restricts instances to the given tracked instance
                type.</entry>
            </row>
            <row>
              <entry>eventStatus</entry>
              <entry>Status of any event associated with the given program and the tracked entity
                instance. Can be ACTIVE | COMPLETED | VISITED | SCHEDULED | OVERDUE
                |&#160;SKIPPED.</entry>
            </row>
            <row>
              <entry>eventStartDate</entry>
              <entry>Start date of event associated with the given program and event status.</entry>
            </row>
            <row>
              <entry>eventEndDate</entry>
              <entry>End date of event associated with the given program and event status.</entry>
            </row>
            <row>
              <entry>skipMeta</entry>
              <entry>Indicates whether meta data for the response should be included.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>The page number. Default page is 1.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>The page size. Default size is 50 rows per page.</entry>
            </row>
            <row>
              <entry>totalPages</entry>
              <entry>Indicates whether to include the total number of pages in the paging response
                (implies higher response time).</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>Indicates whether paging should be ignored and all rows should be
                returned.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The available organisation unit selection modes are explained in the following
        table.</para>
      <table frame="all">
        <title>Organisation unit selection modes</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3.88*"/>
          <thead>
            <row>
              <entry>Mode</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>SELECTED</entry>
              <entry>Organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>CHILDREN</entry>
              <entry>Immediate children, i.e. only the first level below, of the organisation units
                defined in the request.</entry>
            </row>
            <row>
              <entry>DESCENDANTS</entry>
              <entry>All children, i.e. at only levels below, e.g. including children of children,
                of the organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>ACCESSIBLE</entry>
              <entry>All descendants of the data view organisation units associated with the current
                user. Will fall back to data capture organisation units associated with the current
                user if the former is not defined.</entry>
            </row>
            <row>
              <entry>ALL</entry>
              <entry>All organisation units in the system. Requires authority.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>Note that you can specify attributes with filters for constraining the instances to
        return, or attributes without filters in order to include the attribute in the response
        without any constraints. Attributes will be included in the response, while filters will
        only be used as criteria. </para>
      <para>Certain rules apply to which attributes are defined when no attributes are specified in
        the request:</para>
      <itemizedlist>
        <listitem>
          <para>If not specifying a program, the attributes defined to be displayed in lists with no
            program will be included in the response.</para>
        </listitem>
        <listitem>
          <para>If specifying a program, the attributes linked to the program will be included in
            the response.</para>
        </listitem>
      </itemizedlist>
      <para>You can specify queries with words separated by space - in that situation the system
        will query for each word independently and return records where each word is contained in
        any attribute. A query item can be specified once as an attribute and once as a filter if
        needed. The query is case insensitive. The following rules apply to the query
        parameters.</para>
      <itemizedlist>
        <listitem>
          <para>At least one organisation unit must be specified using the <emphasis role="italic"
              >ou</emphasis> parameter (one or many), or <emphasis role="italic"
              >ouMode=ALL</emphasis> must be specified.</para>
        </listitem>
        <listitem>
          <para>Only one of the <emphasis role="italic">program</emphasis> and <emphasis
              role="italic">trackedEntity</emphasis> parameters can be specified (zero or
            one).</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStatus</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">followUp</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStartDate</emphasis> or <emphasis role="italic"
              >programEndDate</emphasis> is specified then <emphasis role="italic"
              >program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">eventStatus</emphasis> is specified then <emphasis
              role="italic">eventStartDate</emphasis> and <emphasis role="italic"
              >eventEndDate</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>A query cannot be specified together with filters.</para>
        </listitem>
        <listitem>
          <para>Attribute items can only be specified once.</para>
        </listitem>
        <listitem>
          <para>Filter items can only be specified once.</para>
        </listitem>
      </itemizedlist>
      <para>A query for all instances associated with a specific organisation unit can look like
        this:</para>
      <screen>/api/26/trackedEntityInstances/query.json?ou=DiszpKrYNg8</screen>
      <para>A query on all attributes for a specific value and organisation unit, using an exact
        word match:</para>
      <screen>/api/26/trackedEntityInstances/query.json?query=scott&amp;ou=DiszpKrYNg8</screen>
      <para>A query on all attributes for a specific value, using a partial word match:</para>
      <screen>/api/26/trackedEntityInstances/query.json?query=LIKE:scott&amp;ou=DiszpKrYNg8</screen>
      <para>You can query on multiple words separated by the the URL character for space which is
        %20, will use a logical AND query for each word:</para>
      <screen>/api/26/trackedEntityInstances/query.json?query=isabel%20may&amp;ou=DiszpKrYNg8</screen>
      <para>A query where the attributes to include in the response are specified:</para>
      <screen>/api/26/trackedEntityInstances/query.json?query=isabel&amp;attribute=dv3nChNSIxy&amp;attribute=AMpUYgxuCaE&amp;ou=DiszpKrYNg8</screen>
      <para>To query for instances using one attribute with a filter and one attribute without a
        filter, with one organisation unit using the descendants organisation unit query
        mode:</para>
      <screen>/api/26/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
  &amp;attribute=AMpUYgxuCaE&amp;ou=DiszpKrYNg8;yMCshbaVExv</screen>
      <para>A query for instances where one attribute is included in the response and one attribute
        us used as a filter:</para>
      <screen>/api/26/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A&amp;filter=AMpUYgxuCaE:LIKE:Road&amp;ou=DiszpKrYNg8</screen>
      <para>A query where multiple operand and filters are specified for a filter item:</para>
      <screen>/api/26/trackedEntityInstances/query.json?ou=DiszpKrYNg8&amp;program=ur1Edk5Oe2n&amp;filter=lw1SqmMlnfh:GT:150:LT:190</screen>
      <para>To query on an attribute using multiple values in an IN filter:</para>
      <screen>/api/26/trackedEntityInstances/query.json?ou=DiszpKrYNg8&amp;attribute=dv3nChNSIxy:IN:Scott;Jimmy;Santiago</screen>
      <para>To constrain the response to instances which are part of a specific program you can
        include a program query parameter:</para>
      <screen>/api/26/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
  &amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;program=ur1Edk5Oe2n</screen>
      <para>To specify program enrollment dates as part of the query:</para>
      <screen>/api/26/trackedEntityInstances/query.json?filter=zHXD5Ve1Efw:EQ:A
  &amp;ou=O6uvpzGd5pu&amp;program=ur1Edk5Oe2n&amp;programStartDate=2013-01-01&amp;programEndDate=2013-09-01</screen>
      <para>To constrain the response to instances of a specific tracked entity you can include a
        tracked entity query parameter:</para>
      <screen>/api/26/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
  &amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;trackedEntity=cyl5vuJ5ETQ</screen>
      <para>By default the instances are returned in pages of size 50, to change this you can use
        the page and pageSize query parameters:</para>
      <screen>/api/26/trackedEntityInstances/query.json?attribute=zHXD5Ve1Efw:EQ:A
  &amp;ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;page=2&amp;pageSize=3</screen>
      <para>To query for instances which have events of a given status within a given time
        span:</para>
      <screen>/api/26/trackedEntityInstances/query.json?ou=O6uvpzGd5pu
  &amp;program=ur1Edk5Oe2n&amp;eventStatus=LATE_VISIT
  &amp;eventStartDate=2014-01-01&amp;eventEndDate=2014-09-01</screen>
      <para>You can use a range of operators for the filtering:</para>
      <table frame="all">
        <title>Filter operators</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="87.75pt"/>
          <colspec colnum="2" colname="c2" colwidth="368.25pt"/>
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>EQ</entry>
              <entry>Equal to</entry>
            </row>
            <row>
              <entry>GT</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>GE</entry>
              <entry>Greater than or equal to</entry>
            </row>
            <row>
              <entry>LT</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>LE</entry>
              <entry>Less than or equal to</entry>
            </row>
            <row>
              <entry>NE</entry>
              <entry>Not equal to</entry>
            </row>
            <row>
              <entry>LIKE</entry>
              <entry>Like (free text match)</entry>
            </row>
            <row>
              <entry>IN</entry>
              <entry>Equal to one of multiple values separated by &quot;;&quot;</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Response format</title>
      <para>This resource supports JSON, JSONP, XLS and CSV resource representations.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>The response in JSON comes is in a tabular format and can look like the following. The
          <emphasis role="italic">headers</emphasis> section describes the content of each column.
        The instance, created, last updated, org unit and tracked entity columns are always present.
        The following columns correspond to attributes specified in the query. The <emphasis
          role="italic">rows</emphasis> section contains one row per instance.</para>
      <screen>{
    &quot;headers&quot;: [{
        &quot;name&quot;: &quot;instance&quot;,
        &quot;column&quot;: &quot;Instance&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;created&quot;,
        &quot;column&quot;: &quot;Created&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;lastupdated&quot;,
        &quot;column&quot;: &quot;Last updated&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;ou&quot;,
        &quot;column&quot;: &quot;Org unit&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;te&quot;,
        &quot;column&quot;: &quot;Tracked entity&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;zHXD5Ve1Efw&quot;,
        &quot;column&quot;: &quot;Date of birth type&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }, {
        &quot;name&quot;: &quot;AMpUYgxuCaE&quot;,
        &quot;column&quot;: &quot;Address&quot;,
        &quot;type&quot;: &quot;java.lang.String&quot;
    }],
    &quot;metaData&quot;: {
        &quot;names&quot;: {
            &quot;cyl5vuJ5ETQ&quot;: &quot;Person&quot;
        }
    },
    &quot;width&quot;: 7,
    &quot;height&quot;: 7,
    &quot;rows&quot;: [
        [&quot;yNCtJ6vhRJu&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:39:32.19&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;21 Kenyatta Road&quot;],
        [&quot;fSofnQR6lAU&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:19.62&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;56 Upper Road&quot;],
        [&quot;X5wZwS5lgm2&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:31.11&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;56 Main Road&quot;],
        [&quot;pCbogmlIXga&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:40:45.02&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;12 Lower Main Road&quot;],
        [&quot;WnUXrY4XBMM&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:41:06.97&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;13 Main Road&quot;],
        [&quot;xLNXbDs9uDF&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:42:25.66&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;14 Mombasa Road&quot;],
        [&quot;foc5zag6gbE&quot;, &quot;2013-09-08 21:40:28.0&quot;, &quot;2014-01-09 19:42:36.93&quot;, &quot;DiszpKrYNg8&quot;, &quot;cyl5vuJ5ETQ&quot;, &quot;A&quot;, &quot;15 Upper Hill&quot;]
    ]
}</screen>
    </section>
  </section>
  <section xml:id="webapi_enrollment_instance_query">
    <title>Enrollment instance query</title>
    <para>To query for tracked entity instances you can interact with the <emphasis role="italic"
        >/api/enrollments</emphasis> resource. <screen>/api/26/enrollments</screen></para>
    <section>
      <title>Request syntax</title>
      <table frame="all">
        <title>Tracked entity instances query parameters</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1.38*"/>
          <colspec colnum="2" colname="c3" colwidth="7.25*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ou</entry>
              <entry>Organisation unit idenfiers, separated by &quot;;&quot;.</entry>
            </row>
            <row>
              <entry>ouMode</entry>
              <entry>The mode of selecting organisation units, can be SELECTED | CHILDREN |
                DESCENDANTS | ACCESSIBLE | ALL. Default is SELECTED, which refers to the selected
                organisation units only. See table below for explanations.</entry>
            </row>
            <row>
              <entry>program</entry>
              <entry>Program identifier. Restricts instances to being enrolled in the given
                program.</entry>
            </row>
            <row>
              <entry>programStatus</entry>
              <entry>Status of the instance for the given program. Can be ACTIVE | COMPLETED |
                CANCELLED.</entry>
            </row>
            <row>
              <entry>followUp</entry>
              <entry>Follow up status of the instance for the given program. Can be true | false or
                omitted.</entry>
            </row>
            <row>
              <entry>programStartDate</entry>
              <entry>Start date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>programEndDate</entry>
              <entry>End date of enrollment in the given program for the tracked entity
                instance.</entry>
            </row>
            <row>
              <entry>trackedEntity</entry>
              <entry>Tracked entity identifer. Restricts instances to the given tracked instance
                type.</entry>
            </row>
            <row>
              <entry>trackedEntityInstsane</entry>
              <entry>Tracked entity instance identifier. Should not be used together with
                trackedEntity.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>The page number. Default page is 1.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>The page size. Default size is 50 rows per page.</entry>
            </row>
            <row>
              <entry>totalPages</entry>
              <entry>Indicates whether to include the total number of pages in the paging response
                (implies higher response time).</entry>
            </row>
            <row>
              <entry>skipPaging</entry>
              <entry>Indicates whether paging should be ignored and all rows should be
                returned.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>The available organisation unit selection modes are explained in the following
        table.</para>
      <table frame="all">
        <title>Organisation unit selection modes</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="3.88*"/>
          <thead>
            <row>
              <entry>Mode</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>SELECTED</entry>
              <entry>Organisation units defined in the request (default).</entry>
            </row>
            <row>
              <entry>CHILDREN</entry>
              <entry>Immediate children, i.e. only the first level below, of the organisation units
                defined in the request.</entry>
            </row>
            <row>
              <entry>DESCENDANTS</entry>
              <entry>All children, i.e. at only levels below, e.g. including children of children,
                of the organisation units defined in the request.</entry>
            </row>
            <row>
              <entry>ACCESSIBLE</entry>
              <entry>All descendants of the data view organisation units associated with the current
                user. Will fall back to data capture organisation units associated with the current
                user if the former is not defined.</entry>
            </row>
            <row>
              <entry>ALL</entry>
              <entry>All organisation units in the system. Requires authority.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>You can specify queries with words separated by space - in that situation the system
        will query for each word independently and return records where each word is contained in
        any attribute. A query item can be specified once as an attribute and once as a filter if
        needed. The query is case insensitive. The following rules apply to the query
        parameters.</para>
      <itemizedlist>
        <listitem>
          <para>At least one organisation unit must be specified using the <emphasis role="italic"
              >ou</emphasis> parameter (one or many), or <emphasis role="italic"
              >ouMode=ALL</emphasis> must be specified.</para>
        </listitem>
        <listitem>
          <para>Only one of the <emphasis role="italic">program</emphasis> and <emphasis
              role="italic">trackedEntity</emphasis> parameters can be specified (zero or
            one).</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStatus</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">followUp</emphasis> is specified then <emphasis
              role="italic">program</emphasis> must also be specified.</para>
        </listitem>
        <listitem>
          <para>If <emphasis role="italic">programStartDate</emphasis> or <emphasis role="italic"
              >programEndDate</emphasis> is specified then <emphasis role="italic"
              >program</emphasis> must also be specified.</para>
        </listitem>
      </itemizedlist>
      <para>A query for all instances associated with a specific organisation unit can look like
        this:</para>
      <screen>/api/26/enrollments.json?ou=DiszpKrYNg8</screen>
      <para>To constrain the response to instances which are part of a specific program you can
        include a program query parameter:</para>
      <screen>/api/26/enrollments.json?ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;program=ur1Edk5Oe2n</screen>
      <para>To specify program enrollment dates as part of the query:</para>
      <screen>/api/26/enrollments.json?&amp;ou=O6uvpzGd5pu&amp;program=ur1Edk5Oe2n&amp;programStartDate=2013-01-01&amp;programEndDate=2013-09-01</screen>
      <para>To constrain the response to instances of a specific tracked entity you can include a
        tracked entity query parameter:</para>
      <screen>/api/26/enrollments.json?ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;trackedEntity=cyl5vuJ5ETQ</screen>
      <para>To constrain the response to instances of a specific tracked entity instance you can
        include a tracked entity instance query parameter, in this case we are restricted it to
        available enrollments viewable for current
        user:<screen>/api/26/enrollments.json?ouMode=ACCESSIBLE&amp;trackedEntityInstance=tphfdyIiVL6</screen></para>
      <para>By default the instances are returned in pages of size 50, to change this you can use
        the page and pageSize query parameters:</para>
      <screen>/api/26/enrollments.json?ou=O6uvpzGd5pu&amp;ouMode=DESCENDANTS&amp;page=2&amp;pageSize=3</screen>
    </section>
    <section>
      <title>Response format</title>
      <para>This resource supports JSON, JSONP, XLS and CSV resource representations.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
      </itemizedlist>
      <para>The response in JSON/XML is in object format and can look like the following (please
        note that field filtering is supported, so if you want a full view, you might want to add
        fields=*):</para>
      <screen>{
    &quot;enrollments&quot;: [
        {
            &quot;lastUpdated&quot;: &quot;2014-03-28T05:27:48.512+0000&quot;,
            &quot;trackedEntity&quot;: &quot;cyl5vuJ5ETQ&quot;,
            &quot;created&quot;: &quot;2014-03-28T05:27:48.500+0000&quot;,
            &quot;orgUnit&quot;: &quot;DiszpKrYNg8&quot;,
            &quot;program&quot;: &quot;ur1Edk5Oe2n&quot;,
            &quot;enrollment&quot;: &quot;HLFOK0XThjr&quot;,
            &quot;trackedEntityInstance&quot;: &quot;qv0j4JBXQX0&quot;,
            &quot;followup&quot;: false,
            &quot;enrollmentDate&quot;: &quot;2013-05-23T05:27:48.490+0000&quot;,
            &quot;incidentDate&quot;: &quot;2013-05-10T05:27:48.490+0000&quot;,
            &quot;status&quot;: &quot;ACTIVE&quot;
        }
    ]
}</screen>
    </section>
  </section>
  <section xml:id="webapi_tracker_bulk_deletion">
    <title>Tracker bulk deletion</title>
    <para>Bulk deletion of tracker objects work in a similar fashion to adding and updating tracker
      objects, the only difference is that the <emphasis role="italic">importStrategy</emphasis> is
        <emphasis role="bold">DELETE</emphasis>.</para>
    <para><emphasis role="italic">Example: Bulk deletion of tracked entity
      instances:</emphasis><screen>{
  &quot;trackedEntityInstances&quot;: [
    { &quot;trackedEntityInstance&quot;: &quot;ID1&quot; },
    { &quot;trackedEntityInstance&quot;: &quot;ID2&quot; },
    { &quot;trackedEntityInstance&quot;: &quot;ID3&quot; }
  ]
}</screen></para>
    <screen>curl -X POST -d @data.json -H &quot;Content-Type: application/json&quot;
  &quot;http://server/api/26/trackedEntityInstasnces?strategy=DELETE&quot;</screen>
    <para><emphasis role="italic">Example: Bulk deletion of
      enrollments:</emphasis><screen>{
  &quot;enrollments&quot;: [
    { &quot;enrollment&quot;: &quot;ID1&quot; },
    { &quot;enrollment&quot;: &quot;ID2&quot; },
    { &quot;enrollment&quot;: &quot;ID3&quot; }
  ]
}</screen></para>
    <screen>curl -X POST -d @data.json -H &quot;Content-Type: application/json&quot;
  &quot;http://server/api/26/enrollments?strategy=DELETE&quot;</screen>
    <para><emphasis role="italic">Example: Bulk deletion of
      events:</emphasis><screen>{
  &quot;events&quot;: [
    { &quot;event&quot;: &quot;ID1&quot; },
    { &quot;event&quot;: &quot;ID2&quot; },
    { &quot;event&quot;: &quot;ID3&quot; }
  ]
}</screen></para>
    <screen>curl -X POST -d @data.json -H &quot;Content-Type: application/json&quot;
  &quot;http://server/api/26/events?strategy=DELETE&quot;</screen>
  </section>
  <section xml:id="webapi_email">
    <title>Email</title>
    <para>The Web API features a resource for sending emails. For emails to be sent it is required
      that the SMTP configuration has been properly set up and that a system notification email
      address for the DHIS2 instance has been defined. You can set SMTP settings from the email
      settings screen and system notification email address from the general settings screen in DHIS
      2.<screen>/api/26/email</screen></para>
    <section>
      <title>System notification</title>
      <para>The <emphasis role="italic">notification</emphasis> resource lets you send system email
        notifications with a given subject and text in JSON or XML. The email will be sent to the
        notification email address as defined in the DHIS2 general system settings:</para>
      <screen>{
  &quot;subject&quot;: &quot;Integrity check summary&quot;,
  &quot;text&quot;: &quot;All checks ran successfully&quot;
}</screen>
      <para>You can send a system email notification by posting to the notification resource like
        this:</para>
      <screen>curl -d @email.json &quot;localhost/api/26/email/notification&quot; -X POST -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
    </section>
    <section>
      <title>Test message</title>
      <para>To test whether the SMTP setup is correct by sending a test email to yourself you can
        interact with the <emphasis role="italic">test</emphasis> resource. To send test emails it
        is required that your DHIS2 user account has a valid email address associated with it. You
        can send a test email like this:</para>
      <screen>curl &quot;localhost/api/26/email/test&quot; -X POST -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
    </section>
  </section>
  <section xml:id="webapi_sharing">
    <title>Sharing</title>
    <para>The sharing solution allows you to share most objects in the system with specific user
      groups and to define whether objects should be publicly accessible or private. To get and set
      sharing status for objects you can interact with the <emphasis role="italic"
        >sharing</emphasis> resource.<screen>/api/26/sharing</screen></para>
    <section>
      <title>Get sharing status</title>
      <para>To request the sharing status for an object use a GET request to:</para>
      <screen>/api/26/sharing?type=dataElement&amp;id=fbfJHSPpUQD</screen>
      <para>The response looks like the below.</para>
      <screen>{
    &quot;meta&quot;: {
        &quot;allowPublicAccess&quot;: true,
        &quot;allowExternalAccess&quot;: false
    },
    &quot;object&quot;: {
        &quot;id&quot;: &quot;fbfJHSPpUQD&quot;,
        &quot;name&quot;: &quot;ANC 1st visit&quot;,
        &quot;publicAccess&quot;: &quot;rw------&quot;,
        &quot;externalAccess&quot;: false,
        &quot;user&quot;: {},
        &quot;userGroupAccesses&quot;: [
            {
                &quot;id&quot;: &quot;hj0nnsVsPLU&quot;,
                &quot;access&quot;: &quot;rw------&quot;
            },
            {
                &quot;id&quot;: &quot;qMjBflJMOfB&quot;,
                &quot;access&quot;: &quot;r-------&quot;
            }
        ]
    }
}</screen>
    </section>
    <section>
      <title>Set sharing status</title>
      <para>You can define the sharing status for an object using the same URL with a POST request,
        where the payload in JSON format looks like this:</para>
      <screen>{
    &quot;object&quot;: {
        &quot;publicAccess&quot;: &quot;rw------&quot;,
        &quot;externalAccess&quot;: false,
        &quot;user&quot;: {},
        &quot;userGroupAccesses&quot;: [
            {
                &quot;id&quot;: &quot;hj0nnsVsPLU&quot;,
                &quot;access&quot;: &quot;rw------&quot;
            },
            {
                &quot;id&quot;: &quot;qMjBflJMOfB&quot;,
                &quot;access&quot;: &quot;r-------&quot;
            }
        ]
    }
}</screen>
      <para>In this example, the payload defines the object to have read-write public access, no
        external access (without login), read-write access to one user group and read-only access to
        another user group. You can submit this to the sharing resource using curl:</para>
      <screen>curl -d @sharing.json &quot;localhost/api/26/sharing?type=dataElement&amp;id=fbfJHSPpUQD&quot; 
  -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen>
    </section>
  </section>
  <section xml:id="webapi_scheduling">
    <title>Scheduling</title>
    <para>To schedule tasks to run at fixed intervals you can interact with the scheduling resource.
      To configure tasks you can do a POST request to the following
      resource:<screen>/api/26/scheduling</screen></para>
    <para>The payload in JSON format is described
      below.<screen>{
    &quot;resourceTableStrategy&quot;: &quot;allDaily&quot;,
    &quot;analyticsStrategy&quot;: &quot;allDaily&quot;,
    &quot;monitoringStrategy&quot;: &quot;allDaily&quot;,
    &quot;dataSynchStrategy&quot;: &quot;enabled&quot;
}</screen></para>
    <para>An example using
      curl:<screen>curl &quot;localhost/dhis/api/26/scheduling&quot; -d @scheduling.json -X POST 
  -H &quot;Content-Type:application/json&quot; -u admin:district -v</screen></para>
    <para>The table below lists available task strategies.<table frame="all">
        <title>Task strategies</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.27*"/>
          <thead>
            <row>
              <entry>Task</entry>
              <entry>Strategies</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Resource table task</entry>
              <entry>allDaily | allEvery15Min</entry>
            </row>
            <row>
              <entry>Analytics task</entry>
              <entry>allDaily | last3YearsDaily</entry>
            </row>
            <row>
              <entry>Monitoring</entry>
              <entry>allDaily</entry>
            </row>
            <row>
              <entry>Data synch task</entry>
              <entry>enabled</entry>
            </row>
          </tbody>
        </tgroup>
      </table></para>
  </section>
  <section xml:id="webapi_schema">
    <title>Schema</title>
    <para>A resource which can be used to introspect all available DXF 2 objects can be found on
        <emphasis role="italic">/api/schemas</emphasis>. For specific resources you can have a look
      at <emphasis role="italic">/api/schemas/TYPE</emphasis>.</para>
    <para>To get all available schemas in XML:<screen>GET /api/schemas.xml</screen></para>
    <para>To get all available schemas in JSON:<screen>GET /api/schemas.json</screen></para>
    <para>To get JSON schema for a specific
      class:<screen>GET /api/schemas/dataElement.json</screen></para>
  </section>
  <section xml:id="webapi_ui_customization">
    <title>UI customization</title>
    <para>To customize the UI of the DHIS2 application you can insert custom Javascript and CSS
      styles through the <emphasis role="italic">files</emphasis> resource. The Javascript and CSS
      content inserted through this resource will be loaded by the DHIS2 web application. This can
      be particularly useful in certain situations:</para>
    <itemizedlist>
      <listitem>
        <para>Overriding the CSS styles of the DHIS2 application, such as the login page or main
          page.</para>
      </listitem>
      <listitem>
        <para>Defining Javascript functions which are common to several custom data entry forms and
          HTML-based reports.</para>
      </listitem>
      <listitem>
        <para>Including CSS styles which are used in custom data entry forms and HTML-based
          reports.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Javascript</title>
      <para>To insert Javascript from a file called <emphasis role="italic">script.js</emphasis> you
        can interact with the <emphasis role="italic">files/script</emphasis> resource with a
        POST-request:</para>
      <screen>curl --data-binary @script.js &quot;localhost/api/26/files/script&quot; 
  -H &quot;Content-Type:application/javascript&quot; -u admin:district -v</screen>
      <para>Note that we use the --data-binary option to preserve formatting of the file content.
        You can fetch the Javascript content with a GET-request:</para>
      <screen>/api/26/files/script</screen>
      <para>To remove the Javascript content you can use a DELETE-request.</para>
    </section>
    <section>
      <title>CSS</title>
      <para>To insert CSS from a file called <emphasis role="italic">style.css</emphasis> you can
        interact with the <emphasis role="italic">files/style</emphasis> resource with a
        POST-request:</para>
      <screen>curl --data-binary @style.css &quot;localhost/api/26/files/style&quot; 
  -H &quot;Content-Type:text/css&quot; -u admin:district -v</screen>
      <para>You can fetch the CSS content with a GET-request:</para>
      <screen>/api/26/files/style</screen>
      <para>To remove the Javascript content you can use a DELETE-e "request.</para>
    </section>
  </section>
  <section xml:id="webapi_synchronization">
    <title>Synchronization</title>
    <para>This section covers pull and push of data and metadata.</para>
    <section>
      <title>Data push</title>
      <para>To initiate a data push to a remote server one must first configure the URL and
        credentials for the relevant server from System settings &gt; Synchronization, then make a
        POST request to the following
        resource:<screen>/api/26/synchronization/dataPush</screen></para>
    </section>
    <section>
      <title>Metadata pull</title>
      <para>To initiate a metadata pull from a remote JSON document you can make a POST request with
        a <emphasis role="italic">url</emphasis> as request payload to the following
        resource:<screen>/api/26/synchronization/metadataPull</screen></para>
    </section>
    <section>
      <title>Availability check</title>
      <para>To check the availability of the remote data server and verify user credentials you can
        make a GET request to the following
        resource:<screen>/api/26/synchronization/availability</screen></para>
    </section>
  </section>
  <section xml:id="webapi_apps">
    <title>Apps</title>
    <para> The <emphasis role="italic">/api/apps</emphasis> endpoint can be used for installing,
      deleting and listing apps. The app key is derived from the name of the ZIP archive, exluding
      the file extension.<screen>/api/26/apps</screen></para>
    <section>
      <title>Get apps</title>
      <para>You can read the keys for apps by listing all apps from the apps resource and look for
        the <emphasis role="italic">key</emphasis> property. To list all installed apps in
        JSON:<screen>curl -X GET -u user:pass -H &quot;Accept: application/json&quot; http://server.com/api/26/apps</screen></para>
      <para>You can also simply point your web browser to the resource URL:</para>
      <screen>http://server.com/api/26/apps</screen>
      <para>The apps list can also be filtered by app type and by name, by appending one or more
          <emphasis>filter</emphasis> parameters to the URL:</para>
      <para>
        <screen>http://server.com/api/26/apps?filter=appType:eq:DASHBOARD_APP&amp;filter=name:ilike:youtube</screen>
      </para>
      <para>App names support the <emphasis>eq</emphasis> and <emphasis>ilike</emphasis> filter
        operators, while <emphasis>appType</emphasis> supports <emphasis>eq</emphasis> only.</para>
    </section>
    <section>
      <title>Install an app</title>
      <para>To install an app, the following command can be issued:
        <screen>curl -X POST -u user:pass -F file=@app.zip http://server.com/api/26/apps</screen></para>
    </section>
    <section>
      <title>Delete an app</title>
      <para>To delete an app, you can issue the following command:
        <screen>curl -X DELETE -u user:pass http://server.com/api/26/apps/&lt;app-key&gt;</screen></para>
    </section>
    <section>
      <title>Reload apps</title>
      <para>To force a reload of currently installed apps, you can issue the following command. This
        is useful if you added a file manually directly to the file system, instead of uploading
        through the DHIS2 user interface.
        <screen>curl -X PUT -u user:pass http://server.com/api/26/apps</screen></para>
    </section>
    <section>
      <title>Configure apps</title>
      <para>To let DHIS2 serve apps from the Web API make sure to set the &quot;App base URL&quot;
        to point to the apps resource, i.e.:<screen>http://server.com/api/26/apps</screen></para>
      <para>To set the apps configuration you can make a POST request to the <emphasis role="italic"
          >config</emphasis> resourec with a JSON payload:</para>
      <screen>{
  &quot;appFolderPath&quot;: &quot;/home/dhis/config/apps&quot;,
  &quot;appBaseUrl&quot;: &quot;http://server.com/api/apps&quot;
}</screen>
      <screen>curl -X POST -u user:pass -d @config.json http://server.com/api/26/apps/config</screen>
      <para>To restore the default app settings you can make a DELETE request to the config
        resource:</para>
      <screen>curl -X DELETE -u user:pass http://server.com/api/26/apps/config</screen>
      <para>Note that by default apps will be served through the apps Web API resource, and the file
        system folder will be <emphasis role="italic">DHIS2_HOME/apps</emphasis>. These systems
        should be fine for most situations.</para>
    </section>
  </section>
  <section xml:id="webapi_app_store">
    <title>App store</title>
    <para>The Web API exposes the content of the DHIS2 App Store as a JSON representation which can
      found at the <emphasis role="italic">api/appStore</emphasis>
      resource.<screen>/api/26/appStore</screen></para>
    <section>
      <title>Get apps</title>
      <para>You can retrieve apps with a GET request: <screen>GET /api/26/appStore</screen></para>
      <para>A sample JSON response is described below.
        <screen>{
  &quot;name&quot;: &quot;DHIS2 App Store&quot;,
  &quot;description&quot;: &quot;Send your apps with a description to us at apps@dhis2.org&quot;,
  &quot;apps&quot;: [
    {
      &quot;name&quot;: &quot;Tabular Tracker Capture&quot;,
      &quot;description&quot;: &quot;Tabular Tracker Capture is an app that makes you more effective.&quot;,
      &quot;developer&quot;: &quot;John Develop&quot;,
      &quot;img_large&quot;: &quot;https://www.dhis2.org/images/appstore/tabular-tracker-capture.png&quot;,
      &quot;versions&quot;: [
        {
          &quot;id&quot;: &quot;upAPqrVgwK6&quot;,
          &quot;version&quot;: &quot;1.2&quot;,
          &quot;min_platform_version&quot;: &quot;2.17&quot;,
          &quot;max_platform_version&quot;: &quot;2.20&quot;,
          &quot;download_url&quot;: &quot;https://www.dhis2.org/download/appstore/tabular-tracker-capture-12.zip&quot;,
          &quot;demo_url&quot;: &quot;http://play.dhis2.org/demo&quot;
        }
      ]
    }
  ]
}</screen></para>
    </section>
    <section>
      <title>Install apps</title>
      <para>You can install apps on your instance of DHIS2 assuming you have the appropriate
        permissions. An app is referred to using the <emphasis role="italic">id</emphasis> property
        of the relevant <emphasis role="italic">version</emphasis> of the <emphasis role="italic"
          >app</emphasis>. An app is installed with a POST request with the version id to the
        following resource:<screen>POST /api/26/appStore/{app-version-id}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_data_store">
    <title>Data store</title>
    <para>Using the <emphasis>dataStore</emphasis> resource, developers can store arbitrary data for
      their apps. Access to a datastore's namespace is limited to the user&apos;s access to the
      corresponding app, if the app has reserved the namespace. For example a user with access to
      the &quot;sampleApp&quot; application will also be able to use the sampleApp namespace in the
      datastore. If a namespace is not reserved, no specific access is required to use
      it.<screen>/api/26/dataStore</screen></para>
    <section>
      <title>Data store structure</title>
      <para>Data store entries consist of a namespace, key and value. The combination of namespace
        and key is unique. The value data type is JSON.</para>
      <table frame="all">
        <title>Data store structure</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="c1" colwidth="1*"/>
          <colspec colnum="2" colname="c2" colwidth="1.76*"/>
          <colspec colnum="3" colname="newCol3" colwidth="1.61*"/>
          <thead>
            <row>
              <entry>Item</entry>
              <entry>Description</entry>
              <entry>Data type</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Namespace</entry>
              <entry>Namespace for organization of entries.</entry>
              <entry>String</entry>
            </row>
            <row>
              <entry>Key</entry>
              <entry>Key for identifiaction of values.</entry>
              <entry>String</entry>
            </row>
            <row>
              <entry>Value</entry>
              <entry>Value holding the information for the entry.</entry>
              <entry>JSON</entry>
            </row>
            <row>
              <entry>Encrypted</entry>
              <entry>Indicates whether the value of the given key should be encrypted</entry>
              <entry>Boolean</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
      <title>Get keys and namespaces</title>
      <para>For a list of all existing namespaces:<screen>GET /api/26/dataStore</screen></para>
      <para>Example curl request for
        listing:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore&quot; -X GET -u admin:district -v</screen></para>
      <para>Example response:</para>
      <para>
        <screen>[
    &quot;foo&quot;,
    &quot;bar&quot;
]</screen>
      </para>
      <para>For a list of all keys in a
        namespace:<screen>GET /api/26/dataStore/&lt;namespace&gt;</screen></para>
      <para>Example curl request for
        listing:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore/foo&quot; -X GET -u admin:district -v</screen></para>
      <para>Example response:</para>
      <screen>[
    &quot;key_1&quot;,
    &quot;key_2&quot;
]</screen>
      <para>To retrieve a value for an existing key from a
        namespace:<screen>GET /api/26/dataStore/&lt;namespace&gt;/&lt;key&gt;</screen></para>
      <para>Example curl request for
        retrieval:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore/foo/key_1&quot; -X GET -u admin:district -v</screen></para>
      <para>Example response:</para>
      <screen>{
    &quot;foo&quot;:&quot;bar&quot;
}</screen>
      <para>To retrieve meta-data for en existing key from a namespace:
        <screen>GET /api/26/dataStore/</screen></para>
      <para>Example curl request for
        retrieval:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore/foo/key_1/metaData&quot; -X GET -u admin:district -v</screen></para>
      <para>Example
        response:<screen>{
    &quot;created&quot;: &quot;...&quot;,
    &quot;user&quot;: {...},
    &quot;namespace&quot;: &quot;foo&quot;,
    &quot;key&quot;: &quot;key_1&quot;
}</screen></para>
    </section>
    <section>
      <title>Create values</title>
      <para>To create a new key and value for a
        namespace:<screen>POST /api/26/dataStore/&lt;namespace&gt;/&lt;key&gt;</screen></para>
      <para>Example curl request for create, assuming a valid json
        payload:<screen>curl &quot;https://play.dhis2.org/demo/api/26/dataStore/foo/key_1&quot; -X POST 
  -H &quot;Content-Type: application/json&quot; -d &quot;{\&quot;foo\&quot;:\&quot;bar\&quot;}&quot; -u admin:district -v</screen></para>
      <para>Example
        response:<screen>{
    &quot;httpStatus&quot;: &quot;OK&quot;,
    &quot;httpStatusCode&quot;: 201,
    &quot;status&quot;: &quot;OK&quot;,
    &quot;message&quot;: &quot;Key &apos;key_1&apos; created.&quot;
}</screen></para>
      <para>If you require the data you store to be encrypted (for example user credentials or
        similar) you can append a query to the url like
        this:<screen>GET /api/26/dataStore/&lt;namespace>/&lt;key>?encrypt=true</screen></para>
      </section>
      <section>
        <title>Update values</title>
      <para>To update a key that exists in a
        namespace:<screen>PUT /api/26/dataStore/&lt;namespace&gt;/&lt;key&gt;</screen></para>
      <para>Example curl request for update, assuming valid JSON
        payload:<screen>curl &quot;https://play.dhis2.org/demo/api/26/dataStore/foo/key_1&quot; -X PUT -d &quot;[1, 2, 3]&quot; 
  -H &quot;Content-Type: application/json&quot; -u admin:district -v</screen></para>
      <para>Example
        response:<screen>{
    &quot;httpStatus&quot;: &quot;OK&quot;,
    &quot;httpStatusCode&quot;: 200,
    &quot;status&quot;: &quot;OK&quot;,
    &quot;message&quot;: &quot;Key &apos;key_1&apos; updated.&quot;
}</screen></para>
    </section>
    <section>
      <title>Delete keys</title>
      <para>To delete an existing key from a
        namespace:<screen>DELETE /api/26/dataStore/&lt;namespace&gt;/&lt;key&gt;</screen></para>
      <para>Example curl request for
        delete:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore/foo/key_1&quot; -X DELETE -u admin:district -v</screen></para>
      <para>Example
        response:<screen>{
    &quot;httpStatus&quot;: &quot;OK&quot;,
    &quot;httpStatusCode&quot;: 200,
    &quot;status&quot;: &quot;OK&quot;,
    &quot;message&quot;: &quot;Key &apos;key_1&apos; deleted from namespace &apos;foo&apos;.&quot;
}</screen></para>
      <para>To delete all keys in a
        namespace:<screen>DELETE /api/26/dataStore/&lt;namespace&gt;</screen></para>
      <para>Example curl request for
        delete:<screen>curl &quot;play.dhis2.org/demo/api/26/dataStore/foo&quot; -X DELETE -u admin:district -v</screen></para>
      <para>Example
        response:<screen>{
    &quot;httpStatus&quot;: &quot;OK&quot;,
    &quot;httpStatusCode&quot;: 200,
    &quot;status&quot;: &quot;OK&quot;,
    &quot;message&quot;: &quot;Namespace &apos;foo&apos; deleted.&quot;
}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_user_data_store">
    <title>User data store</title>
    <para>In addition to the <emphasis>dataStore</emphasis> which is shared between all users of the
      system, a user-based data store is also available. Data stored to the
        <emphasis>userDataStore</emphasis> is associated with individual users, so that each user
      can have different data on the same namespace and key combination. All calls against the
        <emphasis>userDataStore</emphasis> will be associated with the logged in user. This means
      one can only see, change, remove and add values associated with the currently logged in
      user.<screen>/api/26/userDataStore</screen></para>
    <section>
      <title>User data store structure</title>
      <para><emphasis>userDataStore</emphasis> consists of a user, a namespace, keys and associated
        values. The combination of user, namespace and key is unique.<table frame="all">
          <title>User data store structure</title>
          <tgroup cols="3">
            <colspec colname="newCol1" colnum="1" colwidth="1*"/>
            <colspec colname="c1" colnum="2" colwidth="1.0*"/>
            <colspec colname="c2" colnum="3" colwidth="1.0*"/>
            <thead>
              <row>
                <entry>Item</entry>
                <entry>Description</entry>
                <entry>Data Type</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>User</entry>
                <entry>The user this data is associated with</entry>
                <entry>String</entry>
              </row>
              <row>
                <entry>Namespace</entry>
                <entry>The namespace the key belongs to</entry>
                <entry>String</entry>
              </row>
              <row>
                <entry>Key</entry>
                <entry>The key a value is stored on</entry>
                <entry>String</entry>
              </row>
              <row>
                <entry>Value</entry>
                <entry>The value stored</entry>
                <entry>JSON</entry>
              </row>
              <row>
                <entry>Encrypted</entry>
                <entry>Indicates whether the value should be encrypted</entry>
                <entry>Boolean</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </section>
    <section>
      <title>Get namespaces</title>
      <para>Returns an array of all existing
        namespaces<screen>GET /api/26/userDataStore</screen></para>
      <para>Example
        request:<screen>curl -X GET -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/26/userDataStore" -v</screen></para>
      <para>
        <screen>[
  "foo",
  "bar"
]</screen>
      </para>
    </section>
    <section>
      <title>Get keys</title>
      <para>Returns an array of all existing keys in a given
        namespace<screen>GET /api/userDataStore/&lt;namespace></screen></para>
      <para>Example request:</para>
      <para>
        <screen>curl -X GET -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/26/userDataStore/foo" -v</screen>
        <screen>[
  "key_1",
  "key_2"
]</screen>
      </para>
    </section>
    <section>
      <title>Get value</title>
      <para>Returns the value for a given namespace and
        key<screen>GET /api/26/userDataStore/&lt;namespace>/&lt;key></screen></para>
      <para>Example
        request:<screen>curl -X GET -H "Content-Type: application/json" -u admin:district "play.dhis2.org/api/26/userDataStore/foo/bar"</screen><screen>{
  "some": "value"
}</screen></para>
    </section>
    <section>
      <title>Create value</title>
      <para>Adds a new value to a given key in a given
        namespace.<screen>POST /api/26/userDataStore/&lt;namespace>/&lt;key></screen></para>
      <para>Example
        request:<screen>curl -X POST -H "Content-Type: application/json" -u admin:district -d "['some value']"
  "play.dhis2.org/api/26/userDataStore/foo/bar"</screen><screen>{
  "httpStatus": "Created",
  "httpStatusCode": 201,
  "status": "OK",
  "message": "Key 'bar' in namespace 'foo' created."
}</screen></para>
      <para>If you require the value to be encrypted (For example user credetials and such) you can
        append a query to the url like
        this:<screen>GET /api/26/userDataStore/&lt;namespace>/&lt;key>?encrypt=true</screen></para>
    </section>
    <section>
      <title>Update existing value</title>
      <para>Updates an existing
        value<screen>PUT /api/26/userDataStore/&lt;namespace>/&lt;key></screen></para>
      <para>Example
        request:<screen>curl -X PUT -H "Content-Type: application/json" -u admin:district -d "['new value']"
  "play.dhis2.org/api/26/userDataStore/foo/bar"</screen><screen>{
  "httpStatus":"Created",
  "httpStatusCode":201,
  "status":"OK",
  "message":"Key 'bar' in namespace 'foo' updated."
}</screen></para>
    </section>
    <section>
      <title>Delete key</title>
      <para>Delete a key<screen>DELETE /api/26/userDataStore/&lt;namespace>/&lt;key></screen></para>
      <para>Example
        request:<screen>curl -X DELETE -u admin:district "play.dhis2.org/api/26/userDataStore/foo/bar"</screen><screen>{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"Key 'bar' deleted from the namespace 'foo."
}</screen></para>
    </section>
    <section>
      <title>Delete namespace</title>
      <para>Delete all keys in the given
        namespace<screen>DELETE /api/26/userDataStore/&lt;namespace></screen></para>
      <para>Example
        request:<screen>curl -X DELETE -u admin:district "play.dhis2.org/api/26/userDataStore/foo"</screen><screen>{
  "httpStatus":"OK",
  "httpStatusCode":200,
  "status":"OK",
  "message":"All keys from namespace 'foo' deleted."
}</screen></para>
    </section>
  </section>
  <section xml:id="webapi_predictors">
    <title>Predictors</title>
    <para>A predictor allows you to generate data values based on an expression. This can be used to
      generate targets, thresholds and estimated values. You can interact with predictors through
      the <emphasis>/api/26/predictors</emphasis>
      resource.<screen>/api/26/predictors</screen></para>
    <section>
      <title>Creating a predictor</title>
      <para>You can create a predictor with a POST request to the predictors
        resource:<screen>POST /api/26/predictors</screen></para>
      <para>A sample payload looks like
        this:<screen>{
    "id": "AG10KUJCrRk",
    "name": "Malaria Outbreak Threshold Predictor",
    "shortName": "Malaria Outbreak Predictor",
    "description": "Computes the threshold for potential malaria outbreaks based on the mean plus 1.5x the std dev",
    "output": {
        "id": "nXJJZNVAy0Y"
    },
    "generator": {
        "expression": "AVG(#{r6nrJANOqMw})+1.5*STDDEV(#{r6nrJANOqMw})",
        "dataElements": [],
        "sampleElements": [{
            "id": "r6nrJANOqMw"
        }]
    },
    "periodType": "Monthly",
    "sequentialSampleCount": 4,
    "sequentialSkipCount": 1,
    "annualSampleCount": 3,
    "organisationUnitLevels": [4]
}
</screen></para>
      <para>The output element refers to the identifier of the data element for which to saved
        predited data values. The generator element refers to the expression to use when calculating
        the predicted values.</para>
    </section>
    <section>
      <title>Generating predicted values</title>
      <para>To run all predictors (generating predicted values) you can make a POST request to the
        run resource:<screen>POST /api/26/predictors/run</screen></para>
      <para>To run a single predictor you can make a POST request to the run resource for a
        predictor:<screen>POST /api/26/predictors/AG10KUJCrRk/run</screen></para>
      <para>To do a dry run for a single predictor you can use the dryRun resource. This resource
        will return all predicted values in the response, as opposed to actually writing those
        values to the database:<screen>POST /api/26/predictors/AG10KUJCrRk/dryRun</screen></para>
    </section>
  </section>
  <section xml:id="webapi_tokens">
    <title>Tokens</title>
    <para>The <emphasis>tokens</emphasis> resource provides access tokens to various
      services.</para>
    <section>
      <title>Google Service Account</title>
      <para>You can retrieve a Google service account OAuth 2.0 access token with a GET request to
        the following resource.<screen>GET /api/tokens/google</screen></para>
      <para>The token will be valid for a certain amount of time, after which another token must be
        requested from this resource. The response contains a cache control header which matches the
        token expiration. The response will contain the following properties in JSON format.<table
          frame="all">
          <title>Token response</title>
          <tgroup cols="2">
            <colspec colname="c1" colnum="1" colwidth="1*"/>
            <colspec colname="c2" colnum="2" colwidth="1.44*"/>
            <thead>
              <row>
                <entry>Property</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>access_token</entry>
                <entry>The OAuth 2.0 access token to be used when authentication against Google
                  services.</entry>
              </row>
              <row>
                <entry>expires_in</entry>
                <entry>The number of seconds until the access token expires, typically 3600 seconds
                  (1 hour).</entry>
              </row>
              <row>
                <entry>client_id</entry>
                <entry>The Google service account client id.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
      <para>This assumes that a Google service account has been set up and configured for DHIS2.
        Please consult the installation guide for more info.</para>
    </section>
  </section>
  <section xml:id="webapi_metadata_repository">
    <title>Metadata repository</title>
    <para>DHIS2 provides a metadata repository containing metadata packages with various content. A
      metadata package is a DHIS2-compliant JSON document which describes a set of metadata
      objects.</para>
    <para>To retrieve an index over available metadata packages you can issue a GET request to the
        <emphasis role="italic">metadataRepo</emphasis>
      resource:<screen>GET /api/synchronization/metadataRepo</screen></para>
    <para>A metadata package entry contains information about the package and a URL to the relevant
      package. An index could look like
      this:<screen>{
  &quot;packages&quot;: [ {
    &quot;id&quot;: &quot;sierre-leone-demo&quot;,
    &quot;name&quot;: &quot;Sierra Leone demo&quot;,
    &quot;description&quot;: &quot;Sierra Leone demo database&quot;,
    &quot;version&quot;: &quot;0.1&quot;,
    &quot;href&quot;: &quot;https://dhis2.org/metadata-repo/221/sierra-leone-demo/metadata.json&quot;
  },
  {
    &quot;id&quot;: &quot;trainingland-org-units&quot;,
    &quot;name&quot;: &quot;Trainingland organisation units&quot;,
    &quot;description&quot;: &quot;Trainingland organisation units with four levels&quot;,
    &quot;version&quot;: &quot;0.1&quot;,
    &quot;href&quot;: &quot;https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json&quot;
  }
 ]
}</screen></para>
    <para>A client can follow the URLs and install a metadata package through a POST request with
      content type <emphasis>text/plain</emphasis> with the metadata package URL as the payload to
      the <emphasis role="italic">metadataPull</emphasis>
      resource:<screen>POST /api/synchronization/metadataPull</screen></para>
    <para>An example curl command looks like
      this:<screen>curl &quot;localhost:8080/api/synchronization/metadataPull&quot; -X POST
  -d &quot;https://dhis2.org/metadata-repo/221/trainingland-org-units/metadata.json&quot;
  -H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen></para>
  </section>
</chapter>
